<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ab3d.DXEngine.Wpf</name>
    </assembly>
    <members>
        <member name="T:Ab3d.DirectX.Cameras.BaseCamera">
            <summary>
            BaseCamera is a base camera that can be used in DXScene and that implements ICamera and ILeftRightHandedCoordinateSystem
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Cameras.BaseCamera.isMatrixDirty">
            <summary>
            isMatrixDirty is true after any property on camera has changed and signals that the View and Projection cameras need to be recalculated in the Update method.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.BaseCamera.ParentDXScene">
            <summary>
            Gets or sets the DXScene that this camera belong to.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.BaseCamera.ParentSceneNode">
            <summary>
            Gets or sets a parent SceneNode that can be used to adjust the camera's View matrix with the SceneNode's world matrix.
            This can be used to animate the camera with SceneNode.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.BaseCamera.View">
            <summary>
            Gets the camera's view matrix.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.BaseCamera.Projection">
            <summary>
            Gets the camera's projection matrix.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.BaseCamera.AspectRatio">
            <summary>
            Gets or sets an aspect ratio (width divided by height) of the viewport that is showing the 3D scene.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.BaseCamera.ProjectionType">
            <summary>
            Gets type of projection (Perspective or Orthographic)
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.BaseCamera.NearPlaneDistance">
            <summary>
            Gets or sets a value that specifies the distance from the camera of the camera's near clip plane.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.BaseCamera.FarPlaneDistance">
            <summary>
            Gets or sets a value that specifies the distance from the camera of the camera's far clip plane.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Cameras.BaseCamera.DefaultNearPlaneDistance">
            <summary>
            DefaultNearPlaneDistance
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Cameras.BaseCamera.DefaultFarPlaneDistance">
            <summary>
            DefaultFarPlaneDistance
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.BaseCamera.IsRightHandedCoordinateSystem">
            <summary>
            When true than right handed coordinate system is used (as in WPF 3D, XNA and OpenGL), if false than left handed coordinate system are used (as in DirectX). Default value is true.
            </summary>        
        </member>
        <member name="P:Ab3d.DirectX.Cameras.BaseCamera.IsHorizontalFieldOfView">
            <summary>
            Gets or sets a boolean that specifies if horizontal Field of View is used (true = as in WPF 3D) or horizontal Field of view is used (false = as in DirectX). Default value is true.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Cameras.BaseCamera.CameraChanged">
            <summary>
            CameraChanged event is triggered when this camera is changed.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.BaseCamera.#ctor">
            <summary>
            Protected constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.BaseCamera.GetCameraPosition">
            <summary>
            Returns the current position of the camera.
            </summary>
            <returns>the current position of the camera as Vector3</returns>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.BaseCamera.SetCameraMatrices(SharpDX.Matrix@,SharpDX.Matrix@)">
            <summary>
            SetCameraMatrices method is called to change the View and Projection matrix and Camera position after the View and Projection matrices were calculated by the derived class.
            </summary>
            <param name="view">view matrix</param>
            <param name="projection">projection matrix</param>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.BaseCamera.OnCameraChanged">
            <summary>
            OnCameraChanged
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.BaseCamera.Update(System.Boolean)">
            <summary>
            Update method updates the camera matrices when needed (when there were any change in the camera properties) or when forceMatrixUpdate is set to true.
            </summary>
            <param name="forceMatrixUpdate">when true, than camera matrices are recalculated regardless if there were any changes in camera properties or not</param>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.BaseCamera.GetViewProjection">
            <summary>
            Gets a precalculated View * Projection matrix.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.BaseCamera.GetWorldViewProjection(SharpDX.Matrix@)">
            <summary>
            Returns WorldViewProjection matrix.
            Calculating this matrix is faster inside Camera because here we can access matrixes by reference.
            </summary>
            <param name="world">World matrix</param>
            <returns>WorldViewProjection matrix</returns>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.BaseCamera.PerspectiveFovRH(System.Single,System.Single,System.Single,System.Single,SharpDX.Matrix@)">
            <summary>
            PerspectiveFovRH calculates the matrix for the horizontal field of view for right handed coordinate system
            </summary>
            <param name="fov">field of view</param>
            <param name="aspect">aspect</param>
            <param name="znear">znear</param>
            <param name="zfar">zfar</param>
            <param name="result">out Matrix</param>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.BaseCamera.PerspectiveFovLH(System.Single,System.Single,System.Single,System.Single,SharpDX.Matrix@)">
            <summary>
            PerspectiveFovLH calculates the matrix for the horizontal field of view for left handed coordinate system
            </summary>
            <param name="fov">field of view</param>
            <param name="aspect">aspect</param>
            <param name="znear">znear</param>
            <param name="zfar">zfar</param>
            <param name="result">out Matrix</param>
        </member>
        <member name="T:Ab3d.DirectX.Cameras.WpfCamera">
            <summary>
            WpfCamera is a camera that converts the WPF's camera into DXEngine's camera.
            To use the camera on non-UI thread, user needs to call Update method on the UI thread and then this camera data can be accessed on any thread.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Cameras.WpfCamera.Camera">
            <summary>
            Gets or sets a WPF camera
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.WpfCamera.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.WpfCamera.#ctor(System.Windows.Media.Media3D.Camera,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="camera">WPF camera</param>
            <param name="aspectRatio">aspect ratio (width divided by height) of the viewport that is showing the 3D scene</param>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.WpfCamera.Update(System.Boolean)">
            <summary>
            Update method updates the camera matrices when needed (when there were any change in the camera properties) or when forceMatrixUpdate is set to true.
            </summary>
            <param name="forceMatrixUpdate">when true, than camera matrices are recalculated regardless if there were any changes in camera properties or not</param>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.WpfCamera.GetCameraPosition">
            <summary>
            Returns the current position of the camera.
            </summary>
            <returns>the current position of the camera as Vector3</returns>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.WpfCamera.GetCameraLookDirection">
            <summary>
            Returns the camera look direction.
            </summary>
            <returns>camera look direction as Vector3</returns>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.WpfCamera.GetViewMatrix(System.Windows.Media.Media3D.Camera,System.Boolean,SharpDX.Matrix@,SharpDX.Vector3@)">
            <summary>
            GetViewMatrix sets viewMatrix and cameraPosition from the WPF's camera and isUsingRightHandedCoordinateSystem
            </summary>
            <param name="wpfCamera">WPF's camera</param>
            <param name="isUsingRightHandedCoordinateSystem">true if using right handed coordinate system</param>
            <param name="viewMatrix">out Matrix</param>
            <param name="cameraPosition">out Matrix</param>
        </member>
        <member name="M:Ab3d.DirectX.Cameras.WpfCamera.GetProjectionMatrix(System.Windows.Media.Media3D.Camera,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            GetProjectionMatrix returns projection Matrix for the specified camera's properties
            </summary>
            <param name="wpfCamera">WPF camera</param>
            <param name="aspectRatio">aspect ratio</param>
            <param name="zNear">zNear</param>
            <param name="zFar">zFar</param>
            <param name="isHorizontalFieldOfView">isHorizontalFieldOfView</param>
            <param name="isUsingRightHandedCoordinateSystem">true if using right handed coordinate system</param>
            <returns>projection Matrix</returns>
        </member>
        <member name="T:Ab3d.DirectX.Common.DXDeviceResourcesCache">
            <summary>
            DXDeviceResourcesCache is used to store DXEngine's objects (<see cref="T:Ab3d.DirectX.Materials.WpfMaterial"/>, <see cref="T:Ab3d.DirectX.Models.DXMeshGeometry3D"/> and <see cref="T:Ab3d.DirectX.Models.WpfGeometryModel3DNode"/>) that are created from WPF objects.
            This allows reusing DXEngine's objects when one instance of WPF object is used on multiple objects - for example one DiffuseMaterial can be used on many GeometryModel3D objects.
            This class caches objects per DXDevice and is set to the DXDevice's ResourcesCache property.
            </summary>
            <remarks>
            <para>
            DXDeviceResourcesCache is used to store DXEngine's objects that are created from WPF objects.
            </para>
            <para>
            This allows reusing DXEngine's objects when one instance of WPF object is used on multiple objects - for example one DiffuseMaterial can be used on many GeometryModel3D objects.
            </para>
            <para>
            This class caches objects per DXDevice and is set to the DXDevice's ResourcesCache property.
            </para>
            <para>
            To get an instance of the DXDeviceResourcesCache, call the static <see cref="M:Ab3d.DirectX.Common.DXDeviceResourcesCache.GetDXDeviceResourcesCache(Ab3d.DirectX.DXDevice)"/> method.
            It will get the DXDeviceResourcesCache for the specified dxDevice or create a new cache if it was not yet created.
            </para>
            <para>
            The constructor of the class is protected to allow creating a derived classes.
            </para>
            <para>
            This class is not thread safe. When DXEngine objects are created in multiple threads you need to synchronize access to this class with using lock.
            This is already done when this class is used in DXEngine.
            </para>    
            </remarks>
        </member>
        <member name="M:Ab3d.DirectX.Common.DXDeviceResourcesCache.#ctor(Ab3d.DirectX.DXDevice)">
            <summary>
            Protected constructor
            </summary>
            <param name="dxDevice">DXDevice</param>
        </member>
        <member name="M:Ab3d.DirectX.Common.DXDeviceResourcesCache.GetDXDeviceResourcesCache(Ab3d.DirectX.DXDevice)">
            <summary>
            Returns the DXDeviceResourcesCache for the specified dxDevice or create a new cache if it was not yet created for the DXDevice.
            </summary>
            <param name="dxDevice">DXDevice</param>
            <returns>DXDeviceResourcesCache for the specified dxDevice or create a new cache if it was not yet created</returns>
        </member>
        <member name="M:Ab3d.DirectX.Common.DXDeviceResourcesCache.AddDXMaterial(System.Windows.Media.Media3D.Material,Ab3d.DirectX.Material)">
            <summary>
            Adds the DXEngine's dxMaterial that was created from the WPF material to this DXDeviceResourcesCache.
            </summary>
            <param name="material">WPF material</param>
            <param name="dxMaterial">DXEngine's material</param>
        </member>
        <member name="M:Ab3d.DirectX.Common.DXDeviceResourcesCache.TryGetDXMaterial(System.Windows.Media.Media3D.Material,Ab3d.DirectX.Material@)">
            <summary>
            Returns true and sets the dxMaterial parameter when the WPF material was cached in this DXDeviceResourcesCache. Otherwise returns false and sets dxMaterial to null.
            </summary>
            <param name="material">WPF material</param>
            <param name="dxMaterial">out: DXEngine's material</param>
            <returns>true when the WPF material was cached and the dxMaterial is set</returns>
        </member>
        <member name="M:Ab3d.DirectX.Common.DXDeviceResourcesCache.RemoveDXMaterial(System.Windows.Media.Media3D.Material)">
            <summary>
            Removes the cached DXEngine's material for the specified WPF material.
            </summary>
            <param name="material">WPF material</param>
            <returns>true if value was removed from the cache; false if the material was not cached</returns>
        </member>
        <member name="M:Ab3d.DirectX.Common.DXDeviceResourcesCache.AddDXMeshGeometry3D(System.Windows.Media.Media3D.MeshGeometry3D,Ab3d.DirectX.Models.DXMeshGeometry3D)">
            <summary>
            Adds the DXEngine's DXMeshGeometry3D that was created from the WPF MeshGeometry3D to this DXDeviceResourcesCache.
            </summary>
            <param name="meshGeometry3D">WPF material</param>
            <param name="dxMeshGeometry3D">DXEngine's DXMeshGeometry3D</param>
        </member>
        <member name="M:Ab3d.DirectX.Common.DXDeviceResourcesCache.TryGetDXMeshGeometry3D(System.Windows.Media.Media3D.MeshGeometry3D,Ab3d.DirectX.Models.DXMeshGeometry3D@)">
            <summary>
            Returns true and sets the dxMeshGeometry3D parameter when the WPF MeshGeometry3D was cached in this DXDeviceResourcesCache. Otherwise returns false and sets dxMeshGeometry3D to null.
            </summary>
            <param name="meshGeometry3D">WPF material</param>
            <param name="dxMeshGeometry3D">out: DXEngine's DXMeshGeometry3D</param>
            <returns>true when the WPF material was cached and the dxMaterial is set</returns>
        </member>
        <member name="M:Ab3d.DirectX.Common.DXDeviceResourcesCache.RemoveDXMeshGeometry3D(System.Windows.Media.Media3D.MeshGeometry3D)">
            <summary>
            Removes the cached DXEngine's DXMeshGeometry3D for the specified WPF MeshGeometry3D.
            </summary>
            <param name="meshGeometry3D">WPF MeshGeometry3D</param>
            <returns>true if value was removed from the cache; false if the MeshGeometry3D was not cached</returns>
        </member>
        <member name="M:Ab3d.DirectX.Common.DXDeviceResourcesCache.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Common.DXDeviceResourcesCache.Dispose(System.Boolean)">
            <summary>
            OnDispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Common.DXViewSizeChangedEventHandler">
            <summary>
            DXViewSizeChangedEventHandler is a delegate for the <see cref="T:Ab3d.DirectX.Common.DXViewSizeChangedEventArgs"/>.
            </summary>
            <param name="sender">sender</param>
            <param name="e">DXViewSizeChangedEventArgs</param>
        </member>
        <member name="T:Ab3d.DirectX.Common.DXViewSizeChangedEventArgs">
            <summary>
            DXViewSizeChangedEventArgs is used when the size of DXView is changed.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Common.DXViewSizeChangedEventArgs.RenderSize">
            <summary>
            Gets size of shown rendering area in WPF units.
            To get size of shown rendering area in pixels (this size multiplied by dpi scale) see <see cref="P:Ab3d.DirectX.Common.DXViewSizeChangedEventArgs.FinalPixelSize"/>.
            To get size of back buffer that is used by rendering (this size multiplied by dpi scale and super-sampling factor, see the <see cref="P:Ab3d.DirectX.Common.DXViewSizeChangedEventArgs.RenderPixelSize" />
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Common.DXViewSizeChangedEventArgs.RenderPixelSize">
            <summary>
            Gets size in pixels of back buffer that is used to render the 3D scene (<see cref="P:Ab3d.DirectX.Common.DXViewSizeChangedEventArgs.RenderSize"/> is multiplied by DpiScale and with SupersamplingFactor).
            To get size of shown rendering area in pixels (this size multiplied by dpi scale) see <see cref="P:Ab3d.DirectX.Common.DXViewSizeChangedEventArgs.FinalPixelSize"/>.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Common.DXViewSizeChangedEventArgs.FinalPixelSize">
            <summary>
            Gets size of shown rendering area in pixels (<see cref="P:Ab3d.DirectX.Common.DXViewSizeChangedEventArgs.RenderSize"/> is multiplied by DpiScale). In case of super-sampling this value is smaller than <see cref="P:Ab3d.DirectX.Common.DXViewSizeChangedEventArgs.RenderPixelSize"/>.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Common.DXViewSizeChangedEventArgs.#ctor(System.Windows.Size,SharpDX.Size2,SharpDX.Size2)">
            <summary>
            Constructor
            </summary>
            <param name="renderSize">Size of rendering area in WPF units</param>
            <param name="renderPixelSize">Size in pixels of back buffer that is used to render the 3D scene</param>
            <param name="finalPixelSize">size in pixels as shown on the screen</param>
        </member>
        <member name="T:Ab3d.DirectX.Common.EventManager3D.BaseMouse3DEventArgs">
            <summary>
            Provides base data for mouse events on 3D object
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Common.EventManager3D.BaseMouse3DEventArgs.CurrentMousePosition">
            <summary>
            Gets the current mouse position
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Common.EventManager3D.BaseMouse3DEventArgs.HitEventSource3D">
            <summary>
            Gets the hit BaseEventSource3D object
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Common.EventManager3D.BaseMouse3DEventArgs.RayHitResult">
            <summary>
            Gets the result of 3D Ray Hit Test as DXRayHitTestResult
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Common.EventManager3D.BaseMouse3DEventArgs.#ctor(System.Windows.Point,Ab3d.DirectX.Utilities.BaseEventSource3D,Ab3d.DirectX.DXRayHitTestResult)">
            <summary>
            Constructor
            </summary>
            <param name="currentMousePosition">current Mouse Position</param>
            <param name="hitEventSource3D">hitEventSource3D as BaseEventSource3D</param>
            <param name="rayHitResult">rayHitResult as DXRayHitTestResult</param>
        </member>
        <member name="T:Ab3d.DirectX.Common.EventManager3D.Manipulation3DEventHandler`1">
            <summary>
            Represents the method that will handle manipulation events.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
            <typeparam name="T">InputEventArgs</typeparam>
        </member>
        <member name="T:Ab3d.DirectX.Common.EventManager3D.Manipulation3DEventArgs`1">
            <summary>
            Provides base data for manipulation events on 3D object
            </summary>
            <typeparam name="T">InputEventArgs</typeparam>
        </member>
        <member name="P:Ab3d.DirectX.Common.EventManager3D.Manipulation3DEventArgs`1.ManipulationData">
            <summary>
            Get data about the current manipulation event. 
            Can be of type ManipulationStartedEventArgs, ManipulationCompletedEventArgs or ManipulationDeltaEventArgs depending on the actual event handler.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Common.EventManager3D.Manipulation3DEventArgs`1.#ctor(`0,System.Windows.Point,Ab3d.DirectX.Utilities.BaseEventSource3D,Ab3d.DirectX.DXRayHitTestResult)">
            <summary>
            Constructor
            </summary>
            <param name="manipulationData">manipulationData</param>
            <param name="currentMousePosition">currentMousePosition</param>
            <param name="hitEventSource3D">hitEventSource3D</param>
            <param name="rayHitResult">rayHitResult</param>
        </member>
        <member name="T:Ab3d.DirectX.Common.EventManager3D.Mouse3DEventHandler">
            <summary>
            Represents the method that will handle mouse related routed events that do not specifically involve mouse buttons - for example MouseLeave
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Ab3d.DirectX.Common.EventManager3D.Mouse3DEventArgs">
            <summary>
            Provides data for mouse events on 3D object that does not specifically involve mouse buttons - for example MouseLeave
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Common.EventManager3D.Mouse3DEventArgs.MouseData">
            <summary>
            Original 2D mouse data (System.Windows.Input.MouseEventArgs)
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Common.EventManager3D.Mouse3DEventArgs.#ctor(System.Windows.Input.MouseEventArgs,System.Windows.Point,Ab3d.DirectX.Utilities.BaseEventSource3D,Ab3d.DirectX.DXRayHitTestResult)">
            <summary>
            Constructor
            </summary>
            <param name="mouseData">Original 2D mouse data (System.Windows.Input.MouseEventArgs)</param>
            <param name="currentMousePosition">current Mouse Position</param>
            <param name="hitEventSource3D">hitEventSource3D as BaseEventSource3D</param>
            <param name="rayHitResult">rayHitResult as RayMeshGeometry3DHitTestResult</param>
        </member>
        <member name="T:Ab3d.DirectX.Common.EventManager3D.MouseButton3DEventHandler">
            <summary>
            Represents the method that will handle mouse button related events on 3D objects.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Ab3d.DirectX.Common.EventManager3D.MouseButton3DEventArgs">
            <summary>
            Provides data for mouse button related events on 3D objects
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Common.EventManager3D.MouseButton3DEventArgs.MouseData">
            <summary>
            Original 2D mouse data (System.Windows.Input.MouseButtonEventArgs)
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Common.EventManager3D.MouseButton3DEventArgs.#ctor(System.Windows.Input.MouseButtonEventArgs,System.Windows.Point,Ab3d.DirectX.Utilities.BaseEventSource3D,Ab3d.DirectX.DXRayHitTestResult)">
            <summary>
            Constructor
            </summary>
            <param name="mouseData">Original 2D mouse data (System.Windows.Input.MouseButtonEventArgs)</param>
            <param name="currentMousePosition">Gets the current mouse position</param>
            <param name="hitEventSource3D">Gets the hit BaseEventSource3D object</param>
            <param name="rayHitResult">Result of 3D Ray Hit Test as RayMeshGeometry3DHitTestResult</param>
        </member>
        <member name="T:Ab3d.DirectX.Common.EventManager3D.MouseDrag3DEventHandler">
            <summary>
            Represents the method that will handle mouse drag events on 3D objects.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Ab3d.DirectX.Common.EventManager3D.MouseDrag3DEventArgs">
            <summary>
            Provides data for mouse drag events on 3D objects.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Common.EventManager3D.MouseDrag3DEventArgs.HitSurface">
            <summary>
            Gets the BaseEventSource3D object that was marked as IsDragSurface. It was the source to get the StartSurfaceHitPoint and CurrentSurfaceHitPoint.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Common.EventManager3D.MouseDrag3DEventArgs.StartDragMousePosition">
            <summary>
            Gets the 2D mouse position of the point where the drag was started.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Common.EventManager3D.MouseDrag3DEventArgs.StartSurfaceHitPoint">
            <summary>
            Gets the 3D position on the of the HitSurface where the drag was started.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Common.EventManager3D.MouseDrag3DEventArgs.CurrentSurfaceHitPoint">
            <summary>
            Gets the current 3D position on the of the HitSurface.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Common.EventManager3D.MouseDrag3DEventArgs.MouseDiff">
            <summary>
            Gets the 2D Vector that defines the difference from the mouse strat drag position and mouse current position.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Common.EventManager3D.MouseDrag3DEventArgs.SurfaceHitPointDiff">
            <summary>
            Gets the 3D Vector that defines the difference from the mouse strat drag position and mouse current position.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Common.EventManager3D.MouseDrag3DEventArgs.#ctor(System.Windows.Input.MouseEventArgs,System.Windows.Point,Ab3d.DirectX.Utilities.BaseEventSource3D,Ab3d.DirectX.Utilities.BaseEventSource3D,Ab3d.DirectX.DXRayHitTestResult,System.Windows.Point,System.Windows.Media.Media3D.Point3D)">
            <summary>
            Constructor
            </summary>
            <param name="mouseData">Original 2D mouse data (System.Windows.Input.MouseEventArgs)</param>
            <param name="currentMousePosition">current Mouse Position</param>
            <param name="hitEventSource3D">hitEventSource3D as BaseEventSource3D</param>
            <param name="hitSurface">Gets the BaseEventSource3D object that was marked as IsDragSurface. It was the source to get the StartSurfaceHitPoint and CurrentSurfaceHitPoint.</param>
            <param name="rayHitResult">Gets the result of 3D Ray Hit Test as RayMeshGeometry3DHitTestResult.</param>
            <param name="startDragMousePosition">Gets the 2D mouse position of the point where the drag was started.</param>
            <param name="startSurfaceHitPoint">Gets the 3D position on the of the HitSurface where the drag was started.</param>
        </member>
        <member name="T:Ab3d.DirectX.Common.EventManager3D.MouseWheel3DEventHandler">
            <summary>
            Represents the method that will handle mouse wheel events on 3D objects.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Ab3d.DirectX.Common.EventManager3D.MouseWheel3DEventArgs">
            <summary>
            Provides data for mouse wheel events on 3D objects.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Common.EventManager3D.MouseWheel3DEventArgs.MouseData">
            <summary>
            Original 2D mouse data (System.Windows.Input.MouseWheelEventArgs)
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Common.EventManager3D.MouseWheel3DEventArgs.#ctor(System.Windows.Input.MouseWheelEventArgs,System.Windows.Point,Ab3d.DirectX.Utilities.BaseEventSource3D,Ab3d.DirectX.DXRayHitTestResult)">
            <summary>
            Constructor
            </summary>
            <param name="mouseData">Original 2D mouse data (System.Windows.Input.MouseWheelEventArgs)</param>
            <param name="currentMousePosition">Gets the current mouse position</param>
            <param name="hitEventSource3D">Gets the hit BaseEventSource3D object</param>
            <param name="rayHitResult">Result of 3D Ray Hit Test as RayMeshGeometry3DHitTestResult</param>
        </member>
        <member name="T:Ab3d.DirectX.Common.EventManager3D.Touch3DEventHandler">
            <summary>
            Represents the method that will handle touch related routed events.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Ab3d.DirectX.Common.EventManager3D.Touch3DEventArgs">
            <summary>
            Provides base data for touch events on 3D object
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Common.EventManager3D.Touch3DEventArgs.TouchData">
            <summary>
            Original 2D touch data (System.Windows.Input.TouchEventArgs)
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Common.EventManager3D.Touch3DEventArgs.#ctor(System.Windows.Input.TouchEventArgs,System.Windows.Point,Ab3d.DirectX.Utilities.BaseEventSource3D,Ab3d.DirectX.DXRayHitTestResult)">
            <summary>
            Constructor
            </summary>
            <param name="touchData">Original 2D touch data (System.Windows.Input.TouchEventArgs)</param>
            <param name="currentMousePosition">current Mouse Position</param>
            <param name="hitEventSource3D">hitEventSource3D as BaseEventSource3D</param>
            <param name="rayHitResult">rayHitResult as RayMeshGeometry3DHitTestResult</param>
        </member>
        <member name="T:Ab3d.DirectX.Common.IDXAttributeChangedHandler">
            <summary>
            IDXAttributeChangedHandler interface needs to be implemented by a class that wants to subscribe to DXAttributes changes.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Common.IDXAttributeChangedHandler.OnDXAttributeChanged(Ab3d.DirectX.DXAttributeType)">
            <summary>
            OnDXAttributeChanged is called from DXAttributeCollection the the attributeType is added, deleted or changed. 
            </summary>
            <param name="attributeType">DXAttributeType</param>
        </member>
        <member name="M:Ab3d.DirectX.Common.ImagesHelper.FlipBitmapXY(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Flip 32 bit bitmap byte array vertically and horizonatlly
            </summary>
            <param name="bitmapBytes">byte array of the original bitmap</param>
            <param name="pixelWidth">width of the bitmap</param>
            <param name="pixelHeight">height of the bitmap</param>
            <returns>byte array of the flipped bitmap</returns>
        </member>
        <member name="M:Ab3d.DirectX.Common.ImagesHelper.FlipBitmapY(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Flip 32 bit bitmap byte array vertically
            </summary>
            <param name="bitmapBytes">byte array of the original bitmap</param>
            <param name="pixelWidth">width of the bitmap</param>
            <param name="pixelHeight">height of the bitmap</param>
            <returns>byte array of the flipped bitmap</returns>
        </member>
        <member name="M:Ab3d.DirectX.Common.ImagesHelper.FlipBitmapX(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Flip 32 bit bitmap byte array horizontally
            </summary>
            <param name="bitmapBytes">byte array of the original bitmap</param>
            <param name="pixelWidth">width of the bitmap</param>
            <param name="pixelHeight">height of the bitmap</param>
            <returns>byte array of the flipped bitmap</returns>
        </member>
        <member name="M:Ab3d.DirectX.Common.ImagesHelper.SaveBitmap(System.Windows.Media.Imaging.BitmapSource,System.String)">
            <summary>
            Saves the BitmapSource into png file with resultImageFileName
            </summary>
            <param name="image">BitmapSource</param>
            <param name="resultImageFileName">file name</param>
        </member>
        <member name="M:Ab3d.DirectX.Common.ImagesHelper.SaveBitmapToStream(System.Windows.Media.Imaging.BitmapSource,System.IO.Stream)">
            <summary>
            Saves the BitmapSource into imageStream with using png file encoder.
            </summary>
            <param name="image">BitmapSource</param>
            <param name="imageStream">Stream</param>
        </member>
        <member name="M:Ab3d.DirectX.Common.ImagesHelper.CombineBrushes(System.Windows.Media.Brush[])">
            <summary>
            Renders all brushes into one RenderTargetBitmap
            </summary>
            <param name="brushes">array of Brushes</param>
            <returns>RenderTargetBitmap</returns>
        </member>
        <member name="T:Ab3d.DirectX.Common.Line3DInfo.OriginalLine3DInfo">
            <summary>
            LineInfo holds line information and can be set as a Tag to GeometryModel3D that represents 3D line.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Common.Line3DInfo.OriginalLine3DInfo.LineColor">
            <summary>
            LineColor
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Common.Line3DInfo.OriginalLine3DInfo.LineThickness">
            <summary>
            LineThickness
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Common.Line3DInfo.OriginalLine3DInfo.IsLineStrip">
            <summary>
            IsLineStrip
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Common.Line3DInfo.OriginalLine3DInfo.IsLineClosed">
            <summary>
            IsLineClosed
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Common.Line3DInfo.OriginalLine3DInfo.StartLineCap">
            <summary>
            StartLineCap
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Common.Line3DInfo.OriginalLine3DInfo.EndLineCap">
            <summary>
            EndLineCap
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Common.Line3DInfo.OriginalLine3DInfo.MiterLimit">
            <summary>
            MiterLimit
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Common.Line3DInfo.OriginalLine3DInfo.IsBoundingBoxSet">
            <summary>
            True if bounds are set
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Common.Line3DInfo.OriginalLine3DInfo.BoundsX1">
            <summary>
            BoundsX1
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Common.Line3DInfo.OriginalLine3DInfo.BoundsY1">
            <summary>
            BoundsY1
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Common.Line3DInfo.OriginalLine3DInfo.BoundsZ1">
            <summary>
            BoundsZ1
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Common.Line3DInfo.OriginalLine3DInfo.BoundsX2">
            <summary>
            BoundsX2
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Common.Line3DInfo.OriginalLine3DInfo.BoundsY2">
            <summary>
            BoundsY2
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Common.Line3DInfo.OriginalLine3DInfo.BoundsZ2">
            <summary>
            BoundsZ2
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Common.Line3DInfo.OriginalLine3DInfo.ColorToUint(System.Windows.Media.Color)">
            <summary>
            Converts WPF Color to uint
            </summary>
            <param name="color">WPF Color</param>
            <returns>uint</returns>
        </member>
        <member name="P:Ab3d.DirectX.Common.Line3DInfo.IsValid">
            <summary>
            If false than the Tag property was not set to correct Line3DInfo
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Common.MathUtils">
            <summary>
            MathUtils contains some math utility methods.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Common.MathUtils.IsOne(System.Double)">
            <summary>
            Returns true if the value is close to one (taking double precision errors into account).
            </summary>
            <param name="value">value</param>
            <returns>true if the value is close to one</returns>
        </member>
        <member name="M:Ab3d.DirectX.Common.MathUtils.IsZero(System.Double)">
            <summary>
            Returns true if the value is close to zero (taking double precision errors into account).
            </summary>
            <param name="value">value</param>
            <returns>true if the value is close to zero</returns>
        </member>
        <member name="M:Ab3d.DirectX.Common.MathUtils.IsZeroOrBigger(System.Double)">
            <summary>
            Returns true if the value is close to zero or bigger (taking double precision errors into account).
            </summary>
            <param name="value">value</param>
            <returns>true if the value is close to zero or bigger</returns>
        </member>
        <member name="M:Ab3d.DirectX.Common.MathUtils.IsZeroOrSmaller(System.Double)">
            <summary>
            Returns true if the value is close to zero or smaller (taking double precision errors into account).
            </summary>
            <param name="value">value</param>
            <returns>true if the value is close to zero or smaller</returns>
        </member>
        <member name="M:Ab3d.DirectX.Common.MathUtils.IsSame(System.Double,System.Double)">
            <summary>
            Returns true if value1 is same as value2 (taking double precision errors into account).
            </summary>
            <param name="value1">first value</param>
            <param name="value2">second value</param>
            <returns>true if value1 is same as value2</returns>
        </member>
        <member name="M:Ab3d.DirectX.Common.MathUtils.IsSame(SharpDX.Vector3,SharpDX.Vector3)">
            <summary>
            Returns true if vector1 is same as vector2 (taking double precision errors into account).
            </summary>
            <param name="vector1">first Vector3</param>
            <param name="vector2">second Vector3</param>
            <returns>true if vector1 is same as vector2</returns>
        </member>
        <member name="F:Ab3d.DirectX.Common.PropertyChangeNotifier.ValueProperty">
            <summary>
            Identifies the <see cref="P:Ab3d.DirectX.Common.PropertyChangeNotifier.Value"/> dependency property
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Common.PropertyChangeNotifier.Value">
            <summary>
            Returns/sets the value of the property
            </summary>
            <seealso cref="F:Ab3d.DirectX.Common.PropertyChangeNotifier.ValueProperty"/>
        </member>
        <member name="T:Ab3d.DirectX.Common.ModelsHelper.ModelVisual3DIteratorDelegate">
            <summary>
            ModelVisual3DIteratorDelegate defines ModelVisual3D and parent transform as parameters.
            </summary>
            <param name="modelVisual3D">ModelVisual3D</param>
            <param name="parentTransform3D">parent transform for the current modelVisual3D</param>
        </member>
        <member name="T:Ab3d.DirectX.Common.ModelsHelper.GeometryModel3DIteratorDelegate">
            <summary>
            GeometryModel3DIteratorDelegate defines GeometryModel3D and parent transform as parameters.
            </summary>
            <param name="geometryModel3D">GeometryModel3D</param>
            <param name="parentTransform3D">parent transform for the current geometryModel3D</param>
        </member>
        <member name="M:Ab3d.DirectX.Common.ModelsHelper.IterateGeometryModel3DObjects(System.Windows.Media.Media3D.ModelVisual3D,Ab3d.DirectX.Common.ModelsHelper.GeometryModel3DIteratorDelegate)">
            <summary>
            IterateGeometryModel3DObjects calls the callback delegate for each GeometryModel3D inside rootVisual and its children
            </summary>
            <param name="rootVisual">ModelVisual3D</param>
            <param name="callback">callback delegate that is called for each GeometryModel3D</param>
        </member>
        <member name="M:Ab3d.DirectX.Common.ModelsHelper.IterateModelVisualsObjects(System.Windows.Media.Media3D.ModelVisual3D,Ab3d.DirectX.Common.ModelsHelper.ModelVisual3DIteratorDelegate)">
            <summary>
            IterateModelVisualsObjects calls the callback delegate for each ModelVisual3D inside rootVisual and its children
            </summary>
            <param name="rootVisual">ModelVisual3D</param>
            <param name="callback">callback delegate that is called for each ModelVisual3D</param>
        </member>
        <member name="M:Ab3d.DirectX.Common.ModelsHelper.IterateGeometryModel3DObjects(System.Collections.Generic.IList{System.Windows.Media.Media3D.Visual3D},System.Windows.Media.Media3D.Transform3D,Ab3d.DirectX.Common.ModelsHelper.GeometryModel3DIteratorDelegate)">
            <summary>
            IterateGeometryModel3DObjects calls the callback delegate for each GeometryModel3D inside visuals and its children.
            </summary>
            <param name="visuals">IList of Visual3D objects</param>
            <param name="parentTransform3D">start transform</param>
            <param name="callback">callback delegate that is called for each GeometryModel3D</param>
        </member>
        <member name="M:Ab3d.DirectX.Common.ModelsHelper.IterateGeometryModel3DObjects(System.Windows.Media.Media3D.Model3D,System.Windows.Media.Media3D.Transform3D,Ab3d.DirectX.Common.ModelsHelper.GeometryModel3DIteratorDelegate)">
            <summary>
            IterateGeometryModel3DObjects calls the callback delegate for each GeometryModel3D inside model3D and its children
            </summary>
            <param name="model3D">root Model3D</param>
            <param name="parentTransform3D">start transform</param>
            <param name="callback">callback delegate that is called for each GeometryModel3D</param>
        </member>
        <member name="M:Ab3d.DirectX.Common.ModelsHelper.IterateModelVisualsObjects(System.Collections.Generic.IList{System.Windows.Media.Media3D.Visual3D},System.Windows.Media.Media3D.Transform3D,Ab3d.DirectX.Common.ModelsHelper.ModelVisual3DIteratorDelegate)">
            <summary>
            IterateModelVisualsObjects calls the callback delegate for each ModelVisual3D inside visuals and its children
            </summary>
            <param name="visuals">IList of Visual3D objects</param>
            <param name="parentTransform3D">start transform</param>
            <param name="callback">callback delegate that is called for each ModelVisual3D</param>
        </member>
        <member name="F:Ab3d.DirectX.Common.ComparedObjectState.NotUsed">
            <summary>
            This array item is not used
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Common.CollectionComparer`2.#ctor(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1})">
            <summary>
            Initializes a new instance of the CollectionComparer class.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Common.CollectionComparer`2.GetChanges(System.Collections.Generic.IList{`0},System.Int32@)">
            <summary>
            Checks for changes in collection. Returns index of first changed object (-1 if no changes). If there are any changes, than ObjectStates, OriginalObjects and DerivedObjects are updated.
            </summary>
            <param name="newCollection"></param>
            <param name="firstDifferentObject">index of first changed object (-1 if no changes)</param>
            <returns>all ComparedObjectState that occured - can contain more than one state - for example: Add | Move</returns>
        </member>
        <member name="T:Ab3d.DirectX.Common.MeshUtils">
            <summary>
            MeshUtils class contains static methods that work on MeshGeometry3D.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Common.MeshUtils.CalculateNormals(System.Windows.Media.Media3D.MeshGeometry3D)">
            <summary>
            Calculates normals for the meshGeometry. The normals are normalized.
            </summary>
            <param name="meshGeometry">MeshGeometry3D that is used to calculate normals</param>
            <returns>normals as Vector3DCollection</returns>
        </member>
        <member name="M:Ab3d.DirectX.Common.MeshUtils.CalculateNormals(System.Windows.Media.Media3D.MeshGeometry3D,System.Boolean)">
            <summary>
            Calculates normals for the meshGeometry.
            </summary>
            <param name="meshGeometry">MeshGeometry3D that is used to calculate normals</param>
            <param name="normalize">if true the calculated normals are normalized</param>        
            <returns>normals as Vector3DCollection</returns>
        </member>
        <member name="T:Ab3d.DirectX.DXAttribute">
            <summary>
            DXAttribute is a single DXEngine attribute that can be attached to a WPF object.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXAttribute.Type">
            <summary>
            Type of attribute
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXAttribute.Value">
            <summary>
            Attribute's value
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXAttribute.#ctor(Ab3d.DirectX.DXAttributeType,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="type">Type of attribute</param>
            <param name="value">Attribute's value</param>
        </member>
        <member name="M:Ab3d.DirectX.DXAttribute.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="T:Ab3d.DirectX.DXAttributeCollection">
            <summary>
            DXAttributeCollection contains one or more DXEngine's attributes (<see cref="T:Ab3d.DirectX.DXAttribute"/>) that can be attached to WPF object.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXAttributeCollection.AttributesCount">
            <summary>
            Gets the number of attributes in this collection.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXAttributeCollection.Item(Ab3d.DirectX.DXAttributeType)">
            <summary>
            Gets or sets the attribute with specified type.
            </summary>
            <param name="attributeType">attribute type</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">KeyNotFoundException is thrown if this collection does not contain the specified type</exception>
            <returns>value of the attribute</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXAttributeCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXAttributeCollection.SetValue(Ab3d.DirectX.DXAttributeType,System.Object)">
            <summary>
            Sets the value to the attribute with specified attributeType.
            </summary>
            <param name="attributeType">type of attribute as DXAttributeType</param>
            <param name="value">value as object</param>
            <exception cref="T:Ab3d.DirectX.DXAttributeException">DXAttributeException is thrown is the specified value cannot be assigned to the specified type</exception>
        </member>
        <member name="M:Ab3d.DirectX.DXAttributeCollection.IsValueSet(Ab3d.DirectX.DXAttributeType)">
            <summary>
            Returns true if the specified attributeType was set (result is true even if the value is null).
            </summary>
            <param name="attributeType">type of attribute as DXAttributeType</param>
            <returns>true if the specified attributeType was set (result is true even if the value is null)</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXAttributeCollection.GetAllAttributes">
            <summary>
            Returns a copy of this collection as array of DXAttribute
            </summary>
            <returns>array of DXAttribute</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXAttributeCollection.GetValue(Ab3d.DirectX.DXAttributeType)">
            <summary>
            Gets the value of the specified DXAttributeType or throws an exception if the DXAttributeType was not set.
            Use <see cref="M:Ab3d.DirectX.DXAttributeCollection.GetValueOrDefault(Ab3d.DirectX.DXAttributeType)"/>, <see cref="M:Ab3d.DirectX.DXAttributeCollection.GetValueOrDefault``1(Ab3d.DirectX.DXAttributeType)"/> or <see cref="M:Ab3d.DirectX.DXAttributeCollection.GetValueOrDefault``1(Ab3d.DirectX.DXAttributeType,``0)"/> to prevent throwing exception when the value is not set.
            </summary>
            <param name="attributeType">type of attribute as DXAttributeType</param>
            <returns>value of the specified attributeType</returns>
            <exception cref="T:Ab3d.DirectX.DXAttributeType">DXAttributeType is thrown if the attributeType was not set.</exception>
        </member>
        <member name="M:Ab3d.DirectX.DXAttributeCollection.GetValueOrDefault(Ab3d.DirectX.DXAttributeType)">
            <summary>
            Gets the value of the specified attributeType as object or null if the specified attributeType is not set.
            </summary>
            <param name="attributeType">type of attribute as DXAttributeType</param>
            <returns>value of the specified attributeType or null if not defined</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXAttributeCollection.GetValueOrDefault``1(Ab3d.DirectX.DXAttributeType)">
            <summary>
            Gets the value of the specified attributeType or a default value if the specified type T if the attributeType was not set.
            </summary>
            <param name="attributeType">type of attribute as DXAttributeType</param>
            <returns>value of the specified attributeType</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXAttributeCollection.GetValueOrDefault``1(Ab3d.DirectX.DXAttributeType,``0)">
            <summary>
            Gets the value of the specified attributeType or a defaultValue if the specified type T if the attributeType was not set.
            </summary>
            <param name="attributeType">type of attribute as DXAttributeType</param>
            <param name="defaultValue">value that is returned in case the specified attributeType is not set</param>
            <returns>value of the specified attributeType</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXAttributeCollection.ClearValue(Ab3d.DirectX.DXAttributeType)">
            <summary>
            Clears the value from DXAttributeType so that <see cref="M:Ab3d.DirectX.DXAttributeCollection.IsValueSet(Ab3d.DirectX.DXAttributeType)"/> method returns false for that DXAttributeType.
            </summary>
            <param name="attributeType">type of attribute as DXAttributeType</param>
        </member>
        <member name="M:Ab3d.DirectX.DXAttributeCollection.ClearAllAttributes">
            <summary>
            Clears all DXAttributeType in this collection.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXAttributeCollection.SubscribeAttributeChanged(Ab3d.DirectX.Common.IDXAttributeChangedHandler)">
            <summary>
            SubscribeAttributeChanged subscribes specified dxAttributeChangedHandler to be notified when any attribute in this DXAttributeCollection is changed.
            This method uses WeakReference to store the dxAttributeChangedHandler.
            If dxAttributeChangedHandler is already subscribed to changes, then it will not be subscribed again.
            </summary>
            <param name="dxAttributeChangedHandler">IDXAttributeChangedHandler</param>
        </member>
        <member name="M:Ab3d.DirectX.DXAttributeCollection.UnsubscribeAttributeChanged(Ab3d.DirectX.Common.IDXAttributeChangedHandler)">
            <summary>
            UnsubscribeAttributeChanged unsubscribes the specified dxAttributeChangedHandler from being notified about attribute changes.
            </summary>
            <param name="dxAttributeChangedHandler">IDXAttributeChangedHandler</param>
        </member>
        <member name="M:Ab3d.DirectX.DXAttributeCollection.OnAttributeChanged(Ab3d.DirectX.DXAttributeType)">
            <summary>
            OnAttributeChanged is called on each attribute change.
            </summary>
            <param name="attributeType">DXAttributeType</param>
        </member>
        <member name="M:Ab3d.DirectX.DXAttributeCollection.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Ab3d.DirectX.DXAttributeException">
            <summary>
            DXAttributeException is an exception that signals that there is a problem with using a DXAttribute.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.DXAttributeException.DXAttributeType">
            <summary>
            Gets the DXAttributeType.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXAttributeException.#ctor(Ab3d.DirectX.DXAttributeType,System.String)">
            <summary>
            DXAttributeException constructor
            </summary>
            <param name="dxAttributeType">DXAttributeType</param>
            <param name="message">message</param>
        </member>
        <member name="M:Ab3d.DirectX.DXAttributeException.#ctor(Ab3d.DirectX.DXAttributeType,System.String,System.Exception)">
            <summary>
            DXAttributeException constructor
            </summary>
            <param name="dxAttributeType">dxAttributeType</param>
            <param name="message">message</param>
            <param name="innerException">innerException</param>
        </member>
        <member name="M:Ab3d.DirectX.DXAttributeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.DXAttributeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:Ab3d.DirectX.DXAttributeType">
            <summary>
            DXAttributeType enum defines possible types of DXAttributes that can be used to annotate WPF objects with DXEngine's properties.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXAttributeType.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXAttributeType.Material_EnvironmentMap">
            <summary>
            The attribute can be set to a WPF's Material and represents an environment map (as SharpDX.Direct3D11.ShaderResourceView or as Ab3d.DirectX.Materials.DXCubeMap).
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXAttributeType.Material_ReflectionFactor">
            <summary>
            The attribute Color3, float or double can be set to a WPF's Material and represents the percentage (from 0 to 1) of how much the environment map will be visible on top of diffuse material.
            When Color3 is used the color components represent reflection factor for that color.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXAttributeType.Material_ReflectionMap">
            <summary>
            The attribute can be set to a WPF's Material and represents a reflection map where white color represents full reflection and black no reflection (full diffuse color).
            The value type can be BitmapSource or ShaderResourceView.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXAttributeType.Texture_AlphaClipThreshold">
            <summary>
            This attribute can be set to a WPF's Material. Its float value can be between 0 and 1.
            When set to a float value that is bigger then 0, then alpha clipping is enabled.
            This means that pixels with alpha color values below this value will be clipped (not rendered and their depth will not be written to depth buffer).
            When alpha clipping is disabled (this attribute is not set or is set to 0) this means that also pixels with alpha value 0 are fully processed (they are not visible but its depth value is still written so objects that are rendered afterwards and are behind the pixel will not be visible).
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXAttributeType.Texture_UseAlphaToCoverage">
            <summary>
            This attribute can be set to a WPF's Material. When set to true, then the texture is rendered with using <see cref="P:Ab3d.DirectX.CommonStates.AlphaToCoverage"/> blend state that can be used to render
            textures with transparent and semi-transparent pixels and does not require objects to be sorted by their camera distance. See remarks for more information.
            </summary>
            <remarks>
            <para>
            When using alpha-to-coverage then the graphics card determines if the pixel is transparent or opaque based on the color's alpha value
            (when alpha is less the 0.5 then pixel is considered to be fully transparent; otherwise the pixel is considered to be fully opaque).
            </para>
            <para>
            What is more, when using MSAA (multi-sample anti-aliasing) then the level of transparency can be defined more accurately with making some sub-pixel samples transparent and some opaque
            (for example when using 8 x MSAA then each pixel's color is calculated with combining 8 sub-pixel samples; when alpha-to-coverage is enabled and alpha value is 0.25 (=2/8) then 2 of the samples will be transparent and 6 will be opaque).
            This way it is possible to create smoother transitions from fully transparent to fully opaque regions.
            This technique does not produce as accurate results as standard alpha blending, but a big advantage is that it does not require objects to be sorted (and rendered) from those that are farthest away to those that are closest to the camera (and the results are still very good for some use cases - especially when the textures has small transitions from transparent to opaque).
            </para>
            </remarks>
        </member>
        <member name="F:Ab3d.DirectX.DXAttributeType.UseSolidColorEffect">
            <summary>
            UseSolidColorEffect can be set to any WPF's Material. The value must be set before the DXEngine's material is initialized (changes after that does not have any effect).
            When true, then the material is rendered by a SolidColorEffect - this means that the material is not affected by lighting calculations and is always fully illuminated even if it is not facing the light.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXAttributeType.LineDepthBias">
            <summary>
            LineDepthBias attribute can be set to any object derived from BaseLineVisual3D type or to WireframeVisual3D class.
            Depth bias is a float value that specifies the depth offset for 3D lines. This can prevent drawing the 3D line and solid object at the same depth (causing z-fighting).
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXAttributeType.LinePattern">
            <summary>
            LinePattern attribute can be set to any object derived from BaseLineVisual3D type or to WireframeVisual3D class.
            LinePattern is an int value that defines the 16 bit int value that defines the line pattern - if bit is 1 then line is drawn, when 0 line is not drawn.
            For example value 0xFFFF means full line without any dots or dashes. Value 0x5555 means line with dots - one full dot follows one empty dot.
            Note that the lowest bit is rendered first so the patten value needs to be read from right to left. For example, line with pattern 0xF0F0 will starts with empty part (4 empty bits) and then 4 full parts will be rendered.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXAttributeType.LinePatternScale">
            <summary>
            LinePatternScale attribute can be set to any object derived from BaseLineVisual3D type or to WireframeVisual3D class.
            LinePatternScale is a float value that sets the pattern scale factor. Value 1 does not scale the pattern. Values bigger then 1 increase the pattern length; values smaller then 1 decrease the pattern length (making it more dense).
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXAttributeType.LinePatternOffset">
            <summary>
            LinePatternOffset attribute can be set to any object derived from BaseLineVisual3D type or to WireframeVisual3D class.
            LinePatternOffset is a float value that sets a pattern offset. This value is usually between 0 and 1 - 0 value means no offset, 1 means offset for the whole patter which is the same as no offset. Value 0.1 means that the line will begin with the pattern advanced by 10%, 1/16 means that the pattern is offset by one bit.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXAttributeType.UseGeometryShaderFor3DLines">
            <summary>
            UseGeometryShaderFor3DLines attribute can be set to any object derived from BaseLineVisual3D type or to WireframeVisual3D class.
            When UseGeometryShaderFor3DLines is set, then this overrides the <see cref="P:Ab3d.DirectX.DXScene.UseGeometryShaderFor3DLines"/> setting in DXScene object.
            If set to false and also the <see cref="F:Ab3d.DirectX.DXAttributeType.RenderAntialiased3DLines"/> is set to false, then the lines are always rendered as 1 pixel thick lines.
            Note that when using super-sampling the line rendered with that DXAttribute become dimmer because the super-sampled image is still rendered with 1 pixel thick line and that is then down-sampled to final image.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXAttributeType.RenderAntialiased3DLines">
            <summary>
            RenderAntialiased3DLines attribute can be set to any object derived from BaseLineVisual3D type or to WireframeVisual3D class.
            When RenderAntialiased3DLines is set, then this overrides the <see cref="P:Ab3d.DirectX.DXScene.RenderAntialiased3DLines"/> setting in DXScene object.
            This setting can be used only when <see cref="F:Ab3d.DirectX.DXAttributeType.UseGeometryShaderFor3DLines"/> is set to false.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXAttributeType.ReadZBuffer">
            <summary>
            ReadZBuffer attribute can be set to any object derived from BaseLineVisual3D type or to WireframeVisual3D.
            ReadZBuffer is a Boolean that specifies if the 3D lines are rendered with (true) or without (false) reading depth buffer values. This allows rendering 3D lines that appear inside 3D objects.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXAttributeType.IsReceivingShadow">
            <summary>
            IsReceivingShadow attribute can be set to a GeometryModel3D object.
            Boolean values that specifies if the object is receiving shadow. Note that not all objects support this attribute.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXAttributeType.IsCastingShadow">
            <summary>
            IsCastingShadow attribute can be set to a GeometryModel3D object.
            Boolean values that specifies if the light or object is casting shadow. Before shadows can be rendered, they need to be initialized with <see cref="M:Ab3d.DirectX.DXScene.InitializeShadowRendering(Ab3d.DirectX.ShadowRenderingProviderBase)"/> method.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXAttributeType.CustomRenderingQueue">
            <summary>
            CustomRenderingQueue attribute can be set to a WPF 3D object.
            The attribute can be used on GeometryModel3D or Visual3D and specifies the <see cref="T:Ab3d.DirectX.RenderingQueue"/> that will be used to render the DXEngine's object created from the WPF object . the value can be an instance of RenderingQueue (as RenderingQueue) or name of the RenderingQueue (as string).
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXAttributeType.CachedBitmapSize">
            <summary>
            The CachedBitmapSize attribute can be used on WPF's Material object to specify the size of the bitmap that will be rendered in case of using VisualBrush, GradientBrush or DrawingImage.
            The value of this attribute can be specified with the following types: 
            SharpDX.Size2, Size, Int32, double, float
            (in case of double, float and int the Width and Height are both set to the same value).
            It is recommended that the size is a power or 2 (64, 128, 256, etc.)
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXAttributeType.MeshTangentArray">
            <summary>
            When MeshTangentArray DXAttribute is set to a MeshGeometry3D, it specifies an array of Vector3 values that represents the tangent values for each position defined by this MeshGeometry3D.
            This DXAttribute must be set before the MeshGeometry3D is initialized in DXEngine. If the tangents are changed, a new MeshGeometry3D must be created.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXAttributeType.OnDXResourcesInitializedAction">
            <summary>
            OnDXResourcesInitializedAction attribute can be set to a WPF 3D object.
            Its value is a callback method defined as Action&lt;object&gt;.
            The callback method is called after the specified DXEngine's resource is initialized and DirectX resource objects are created (after OnInitializeResources is called).
            For example when this method is set to Ab3d.Visuals.LineVisual3D object, the Action&lt;object&gt; is called after with WpfModelVisual3DNode that is created from the LineVisual3D object (ScreenSpaceLineNode with LineMaterial is created as the first child of the WpfModelVisual3DNode).
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXAttributeType.OnSceneNodeCreatedAction">
            <summary>
            OnDXResourcesInitializedAction attribute can be set to a WPF 3D object.
            Its value is a callback method defined as Action&lt;SceneNode&gt;.        
            The callback method is called after a SceneNode is created from the WPF object.
            To get a callback after the DirectX resources and child SceneNodes are already initialized use the <see cref="F:Ab3d.DirectX.DXAttributeType.OnDXResourcesInitializedAction"/> instead.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXAttributeType.LastUsedEnumValue">
            <summary>
            Last used official enum value. User may use bigger values for its own data types. If value is bigger than this value, it will not be replaced by any official enum value in the future version of Ab3d.DXEngine.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.DXRayHitTestWpfModel3DResult">
            <summary>
             DXRayHitTestWpfModel3DResult class provides result of a ray hit test with a WPF's GeometryModel3D.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.DXRayHitTestWpfModel3DResult.HitGeometryModel3D">
            <summary>
            Hit GeometryModel3D
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXRayHitTestWpfModel3DResult.#ctor(SharpDX.Vector3,Ab3d.DirectX.SceneNode,System.Single,System.Windows.Media.Media3D.GeometryModel3D)">
            <summary>
            Constructor
            </summary>
            <param name="hitPosition">Vector3 that specifies hit position</param>
            <param name="hitSceneNode">hit SceneNode</param>
            <param name="distanceToRayOrigin">Distance to the ray's origin</param>
            <param name="hitGeometryModel3D">hit GeometryModel3D</param>
        </member>
        <member name="M:Ab3d.DirectX.DXRayHitTestWpfModel3DResult.#ctor(Ab3d.DirectX.DXRayHitTestResult,System.Windows.Media.Media3D.GeometryModel3D)">
            <summary>
            Constructor
            </summary>
            <param name="dxRayHitTestResult">DXRayHitTestResult</param>
            <param name="hitGeometryModel3D">hit GeometryModel3D</param>
        </member>
        <member name="T:Ab3d.DirectX.DXSceneInitializationException">
            <summary>
            DXSceneInitializationException is thrown by DXView when no GraphicsProfile can be initialized.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXSceneInitializationException.#ctor">
            <summary>
            Initializes a new instance of the DXSceneInitializationException class.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXSceneInitializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DXSceneInitializationException class with a specified error message.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:Ab3d.DirectX.DXSceneInitializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DXSceneInitializationException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="T:Ab3d.DirectX.Utilities.BaseEventSource3D">
            <summary>
            Base class for all EventSource3D classes.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Utilities.BaseEventSource3D.MouseDown">
            <summary>
            Occurs when the mouse pointer is over the subscribed EventSource3D and a mouse button is pressed.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Utilities.BaseEventSource3D.MouseUp">
            <summary>
            Occurs when the mouse pointer is over the subscribed EventSource3D and a mouse button is released.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Utilities.BaseEventSource3D.MouseClick">
            <summary>
            Occurs when the user clicks on the subscribed EventSource3D.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Utilities.BaseEventSource3D.MouseDoubleClick">
            <summary>
            Occurs when the user double-clicks on the subscribed EventSource3D.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Utilities.BaseEventSource3D.MouseWheel">
            <summary>
            Occurs when the mouse wheel is used on the subscribed EventSource3D.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Utilities.BaseEventSource3D.BeginMouseDrag">
            <summary>
            Occurs when the user begins to drag the subscribed EventSource3D.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Utilities.BaseEventSource3D.EndMouseDrag">
            <summary>
            Occurs when the user ends dragging the subscribed EventSource3D.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Utilities.BaseEventSource3D.MouseDrag">
            <summary>
            Occurs when the user is dragging the subscribed EventSource3D.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Utilities.BaseEventSource3D.MouseEnter">
            <summary>
            Occurs when the mouse pointer enters the subscribed EventSource3D.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Utilities.BaseEventSource3D.MouseLeave">
            <summary>
            Occurs when the mouse pointer leaves the subscribed EventSource3D.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Utilities.BaseEventSource3D.MouseMove">
            <summary>
            Occurs when the mouse pointer moves on the subscribed EventSource3D.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Utilities.BaseEventSource3D.TouchEnter">
            <summary>
            Occurs when the touch device moves on the subscribed EventSource3D.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Utilities.BaseEventSource3D.TouchDown">
            <summary>
            Occurs when the touch device touches the subscribed EventSource3D.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Utilities.BaseEventSource3D.TouchMove">
            <summary>
            Occurs when the touch device moves on the subscribed EventSource3D.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Utilities.BaseEventSource3D.TouchUp">
            <summary>
            Occurs when the touch device releases touch on the subscribed EventSource3D.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Utilities.BaseEventSource3D.TouchLeave">
            <summary>
            Occurs when the touch device leaves the subscribed EventSource3D.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Utilities.BaseEventSource3D.ManipulationStarted">
            <summary>
            Occurs when the manipulation on the subscribed EventSource3D has started.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Utilities.BaseEventSource3D.ManipulationCompleted">
            <summary>
            Occurs when the manipulation on the subscribed EventSource3D has completed.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Utilities.BaseEventSource3D.ManipulationDelta">
            <summary>
            Provides data regarding changes to a currently occurring manipulation.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Utilities.BaseEventSource3D.CustomData">
            <summary>
            Gets or sets any custom data that can be used in event handlers.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Utilities.BaseEventSource3D.Name">
            <summary>
            Gets or sets the optional name of the EventSource3D.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Utilities.BaseEventSource3D.IsMySceneNode(Ab3d.DirectX.SceneNode)">
            <summary>
            Method that is called from DXEventManager3D to check if this EventSource3D contains hitSceneNode
            </summary>
            <param name="hitSceneNode">hitSceneNode as SceneNode</param>
            <returns>true if this EventSource3D contains hitSceneNode</returns>
        </member>
        <member name="T:Ab3d.DirectX.Utilities.DXEventManager3D">
            <summary>
            DXEventManager3D class is a enables subscribing to mouse and touch events on 3D objects rendered with DXEngine.
            The class is using Hit testing provided by DXEngine and not WPF's hit testing that is used by the EventManager3D provided by the Ab3d.PowerToys library.
            </summary>
            <remarks>
            <para>
            DXEventManager3D class is a enables subscribing to mouse and touch events on 3D objects rendered with DXEngine.
            The class is using Hit testing provided by DXEngine and not WPF's hit testing that is used by the EventManager3D provided by the Ab3d.PowerToys library.
            </para>
            <para>
            The following mouse events are supported:<br/>
            MouseEnter<br/>
            MouseLeave,<br/>
            MouseMove,<br/>
            MouseDown,<br/>
            MouseUp,<br/>
            MouseClick,<br/>
            MouseDoubleClick,<br/>
            MouseWheel,<br/>
            BeginMouseDrag,<br/>
            MouseDrag,<br/>
            EndMouseDrag.<br/>
            TouchEnter,<br/>
            TouchDown,<br/>
            TouchMove,<br/>
            TouchUp,<br/>
            TouchLeave.<br/>
            </para>
            <para>
            It is also possible to exclude some Visual3D objects from hit testing with <see cref="M:Ab3d.DirectX.Utilities.DXEventManager3D.RegisterExcludedVisual3D(System.Windows.Media.Media3D.Visual3D)"/> method.
            This means that when the ray from the mouse will hit the excluded Visual3D, it will not produce a hit test but will continue with checking if there are any objects behind.
            To remove the Visual3D form exclusion list, call the <see cref="M:Ab3d.DirectX.Utilities.DXEventManager3D.RemoveExcludedVisual3D(System.Windows.Media.Media3D.Visual3D)"/> method (exclusion list is also cleared when called <see cref="M:Ab3d.DirectX.Utilities.DXEventManager3D.ResetEventSources3D"/> method).
            </para>
            <para>
            This can be very useful for example when we are drawing an object or 3D line at the position of mouse hit. 
            Without an option to exclude the drawn object or 3d line, we would get many MouseEnter and MouseLeave events because mouse will sometimes hit the back object and sometimes the drawn object or 3D line.
            </para>
            <para>
            <b>Important:</b><br/>
            It is highly recommended not to have more than one EventManager3D object per Viewport3D. 
            Having multiple EventManager3D object can greatly reduce the performance because each time the Viewport3D camera is changed, 
            each EventManager3D must perform a full 3D hit testing from the current mouse position. 
            This operation is very CPU intensive and can affect performance when there are many 3D objects in the scene.
            When multiple EventManager3D object are defined, then the 3D hit testing is performed multiple times.
            Therefore it is recommended to have only one EventManager3D object per Viewport3D.
            </para>
            <para>
            It is also recommended to remove registered event sources after they are not used any more.
            This can be done with <see cref="M:Ab3d.DirectX.Utilities.DXEventManager3D.RemoveEventSource3D(Ab3d.DirectX.Utilities.BaseEventSource3D)"/> method. 
            </para>
            </remarks>
        </member>
        <member name="F:Ab3d.DirectX.Utilities.DXEventManager3D.registeredEventSources">
            <summary>
            List of BaseEventSource3D that were registered with RegisterEventSource3D
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Utilities.DXEventManager3D.lastRayHitResult">
            <summary>
            RayMeshGeometry3DHitTestResult of the last hit EventSource3D 
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Utilities.DXEventManager3D.lastHitEventSource3D">
            <summary>
            Last hit EventSource3D
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Utilities.DXEventManager3D.DragMouseDistance">
            <summary>
            Gets or sets the distance mouse must make when the move is considered as mouse drag. The default value is 5.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Utilities.DXEventManager3D.CustomEventsSourceElement">
            <summary>
            Gets or sets a FrameworkElement that can be used instead of TargetViewport3D to get the mouse events (MouseMove, MouseEnter, MouseLeave). If null (default) than TargetViewport3D is used as event source.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Utilities.DXEventManager3D.IsEnabled">
            <summary>
            Gets or sets a boolean value that specifies if the EventManager3D is enabled.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Utilities.DXEventManager3D.IsManipulationEnabled">
            <summary>
            Gets or sets a boolean that specifies if Manipulation (touch based) events are enabled by this EventManager3D (this works only when .Net 4 or higher version of the library is used). Default valus is false.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Utilities.DXEventManager3D.UsePreviewEvents">
            <summary>
            Gets or sets a boolean that specifies if EventManager3D subscribed to Preview moouse and touch events instead of standard events - for example PreviewMouseUp event instead of MouseUp event.
            Default value is false;
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Utilities.DXEventManager3D.DXView">
            <summary>
            Parent DXView that is used to do the hit testing.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Utilities.DXEventManager3D.#ctor(Ab3d.DirectX.Controls.DXView)">
            <summary>
            Constructor
            </summary>
            <param name="dxView">DXScene</param>
        </member>
        <member name="M:Ab3d.DirectX.Utilities.DXEventManager3D.RegisterEventSource3D(Ab3d.DirectX.Utilities.BaseEventSource3D)">
            <summary>
            Registers the eventSource to the EventManager3D
            </summary>
            <param name="eventSource">EventSource3D to be registered</param>
        </member>
        <member name="M:Ab3d.DirectX.Utilities.DXEventManager3D.RemoveEventSource3D(Ab3d.DirectX.Utilities.BaseEventSource3D)">
            <summary>
            Removes the eventSource from the EventManager3D
            </summary>
            <param name="eventSource">EventSource3D to be removed</param>
        </member>
        <member name="M:Ab3d.DirectX.Utilities.DXEventManager3D.ResetEventSources3D">
            <summary>
            Clears all the registered EventSource3D objects. This also removes all registered Visuals that are not hit visible.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Utilities.DXEventManager3D.UpdateHitObjects">
            <summary>
            UpdateHitObjects method can be called to manually update the 3D objects that are behind the current mouse position.
            This is useful when the camera is changed without moving the mouse. 
            In this case the 3D objects behind the mouse position can change. 
            If this happens the MouseEnter, MouseLeave and other event handlers will be called from the UpdateHitObjects method.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Utilities.DXEventManager3D.RegisterExcludedVisual3D(System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Registers a visual3D that will be excluded from hit testing - the ray from the mouse will "travel" through that Visual and will hit the objects behind.
            </summary>
            <param name="visual3D">visual3D that will be excluded from hit testing</param>
        </member>
        <member name="M:Ab3d.DirectX.Utilities.DXEventManager3D.RemoveExcludedVisual3D(System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Removed the visual3D from the excluded visuals list. To remove all excluded visuals it is also possible to call <see cref="M:Ab3d.DirectX.Utilities.DXEventManager3D.ResetEventSources3D"/> method.
            </summary>
            <param name="visual3D">visual3D that will be removed from excluded list.</param>
        </member>
        <member name="M:Ab3d.DirectX.Utilities.DXEventManager3D.RegisterExcludedSceneNode(Ab3d.DirectX.SceneNode)">
            <summary>
            Registers a SceneNode that will be excluded from hit testing - the ray from the mouse will "travel" through that SceneNode and will hit the objects behind.
            </summary>
            <param name="sceneNode">SceneNode that will be excluded from hit testing</param>
        </member>
        <member name="M:Ab3d.DirectX.Utilities.DXEventManager3D.RemoveExcludedSceneNode(Ab3d.DirectX.SceneNode)">
            <summary>
            Remove the SceneNode from the list of excluded scene nodes. To remove all excluded SceneNode it is also possible to call <see cref="M:Ab3d.DirectX.Utilities.DXEventManager3D.ResetEventSources3D"/> method.
            </summary>
            <param name="sceneNode">SceneNode that will be removed from the excluded list.</param>
        </member>
        <member name="M:Ab3d.DirectX.Utilities.DXEventManager3D.CheckMouseOverElement(SharpDX.Ray)">
            <summary>
            Protected CheckMouseOverElement calls the DXView.DXScene.GetClosestHitObject method
            and sets the lastRayHitResult and lastHitEventSource3D fields based on the specified ray.
            The method can be overriden to provide custom hit testing logic.
            </summary>
            <param name="ray">Ray</param>
        </member>
        <member name="T:Ab3d.DirectX.Utilities.MeshUtils">
            <summary>
            MeshUtils provides static helper methods for working with 3D meshes.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Utilities.MeshUtils.CalculateTangentVectors(System.Windows.Media.Media3D.MeshGeometry3D)">
            <summary>
            CalculateTangentVectors returns a Vector3 array that represents tangent vectors calculated from MeshGeometry3D.
            </summary>
            <param name="meshGeometry3D">MeshGeometry3D</param>
            <returns>Vector3 array that represents tangent vectors</returns>
        </member>
        <member name="M:Ab3d.DirectX.Utilities.MeshUtils.CalculateTangentVectors(SharpDX.Vector3[],SharpDX.Vector3[],SharpDX.Vector2[],System.Int32[])">
            <summary>
            CalculateTangentVectors returns a Vector3 array that represents tangent vectors calculated from specified mesh data.
            </summary>
            <param name="positions">positions as Vector3[]</param>
            <param name="normals">normals as Vector3[]</param>
            <param name="textureCoordinates">textureCoordinates as Vector2[]</param>
            <param name="triangleIndices">triangleIndices as int[]</param>
            <returns>Vector3 array that represents tangent vectors</returns>
        </member>
        <member name="T:Ab3d.DirectX.Utilities.ModelEventSource3D">
            <summary>
            ModelEventSource3D class is used to register a Model3D object to the <see cref="T:Ab3d.DirectX.Utilities.DXEventManager3D"/>. 
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Utilities.ModelEventSource3D.TargetModel3D">
            <summary>
            Gets or sets the Model3D that is used as the source of the mouse events.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Utilities.ModelEventSource3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Utilities.ModelEventSource3D.#ctor(System.Windows.Media.Media3D.Model3D)">
            <summary>
            Constructor
            </summary>
            <param name="targetObject">targetObject</param>
        </member>
        <member name="M:Ab3d.DirectX.Utilities.ModelEventSource3D.IsMySceneNode(Ab3d.DirectX.SceneNode)">
            <summary>
            Method that is called from DXEventManager3D to check if this EventSource3D contains hitSceneNode
            </summary>
            <param name="hitSceneNode">hitSceneNode as SceneNode</param>
            <returns>true if this EventSource3D contains hitSceneNode</returns>
        </member>
        <member name="T:Ab3d.DirectX.Utilities.SceneNodeEventSource3D">
            <summary>
            SceneNodeEventSource3D class is used to register a SceneNode object to the <see cref="T:Ab3d.DirectX.Utilities.DXEventManager3D"/>.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Utilities.SceneNodeEventSource3D.SceneNode">
            <summary>
            Gets or sets the SceneNode that is used as the source of the mouse events.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Utilities.SceneNodeEventSource3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Utilities.SceneNodeEventSource3D.#ctor(Ab3d.DirectX.SceneNode)">
            <summary>
            Constructor
            </summary>
            <param name="sceneNode">SceneNode</param>
        </member>
        <member name="M:Ab3d.DirectX.Utilities.SceneNodeEventSource3D.IsMySceneNode(Ab3d.DirectX.SceneNode)">
            <summary>
            Method that is called from DXEventManager3D to check if this EventSource3D contains hitSceneNode
            </summary>
            <param name="hitSceneNode">hitSceneNode as SceneNode</param>
            <returns>true if this EventSource3D contains hitSceneNode</returns>
        </member>
        <member name="T:Ab3d.DirectX.Utilities.VisualEventSource3D">
            <summary>
            VisualEventSource3D class is used to register a Visual3D object to the <see cref="T:Ab3d.DirectX.Utilities.DXEventManager3D"/>.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Utilities.VisualEventSource3D.TargetVisual3D">
            <summary>
            Gets or sets the Visual3D that is used as the source of the mouse events.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Utilities.VisualEventSource3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Utilities.VisualEventSource3D.#ctor(System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Constructor
            </summary>
            <param name="targetVisual3D">targetVisual3D</param>
        </member>
        <member name="M:Ab3d.DirectX.Utilities.VisualEventSource3D.IsMySceneNode(Ab3d.DirectX.SceneNode)">
            <summary>
            Method that is called from DXEventManager3D to check if this EventSource3D contains hitSceneNode
            </summary>
            <param name="hitSceneNode">hitSceneNode as SceneNode</param>
            <returns>true if this EventSource3D contains hitSceneNode</returns>
        </member>
        <member name="T:Ab3d.DirectX.GraphicsProfile">
            <summary>
            GraphicsProfile specifies the settings that are used to initialize DXDevice with DirectX 11 device and DXSceneView.
            </summary>
            <remarks>
            <para>
            <b>GraphicsProfile</b> specifies the settings that are used to initialize <see cref="T:Ab3d.DirectX.DXDevice"/> with DirectX 11 device and <see cref="T:Ab3d.DirectX.Controls.DXView"/>.
            </para>
            <para>
            GraphicsProfile is used when creating the <see cref="T:Ab3d.DirectX.Controls.DXView"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Ab3d.DirectX.GraphicsProfile.DriverTypes">
            <summary>
            DriverTypes enum defined the driver types that can be used by DXSceneView
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.GraphicsProfile.DriverTypes.DirectXHardware">
            <summary>
            DirectX Hardware rendering
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.GraphicsProfile.DriverTypes.DirectXSoftware">
            <summary>
            DirectX Software rendering - using Warp DirectX driver
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.GraphicsProfile.DriverTypes.Wpf3D">
            <summary>
            WPF 3D rendering
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.GraphicsProfile.Name">
            <summary>
            Gets name of this GraphicsProfile.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.GraphicsProfile.DisplayName">
            <summary>
            Gets or sets a nicely formated name of this GraphicsProfile.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.GraphicsProfile.SupersamplingCount">
            <summary>
            Gets or sets the super-sampling count that describes how much more pixels are rendered for each final pixel.
            The rendering is done on a scaled texture that is bigger for the amount specified by SupersamplingCount.
            At the end of rendering this texture is down-sampled into the texture with the final size.
            Valid values are 1 (no super-sampling), 4, 16 and 64. Value 4 means that width and height are multiplied by 2 and this produces a texture with 4 times as much pixels.
            </summary>
            <remarks>
            <para>
            Gets or sets the super-sampling count that describes how much more pixels are rendered for each final pixel.
            </para>
            <para>
            The rendering is done on a scaled texture that is bigger for the amount specified by SupersamplingCount.
            At the end of rendering this texture is down-sampled into the texture with the final size.
            </para>
            <para>
            Valid values are 1 (no super-sampling), 4, 16 and 64. Value 4 means that width and height are multiplied by 2 and this produces a texture with 4 times as much pixels.
            </para>
            <para>
            Because texture dimensions in DirectX 11 are limited to 16384 x 16384, this limit can be exceeded when using higher values of SupersamplingCount.
            If this happens then used texture width and height are divided by 2 until the final size is below the limit.
            </para>
            <para>
            When down-sampling a super-sampled texture different filters are used based on the SupersamplingCount value.
            The used filters are chosen by the engine but if you want you can change their values with changing properties in the <see cref="T:Ab3d.DirectX.ResolveBackBufferRenderingStep"/> object.
            </para>
            </remarks>
            <seealso cref="P:Ab3d.DirectX.GraphicsProfile.SupersamplingCount"/>
        </member>
        <member name="P:Ab3d.DirectX.GraphicsProfile.PreferedMultisampleCount">
            <summary>
            Gets or sets an integer that specifies the multisampling count that should be used by the graphics card. 
            If specified multisamplig count is not supported, than the highest supported multisamplig count will be used.
            Possible values are: 0 (disabled), 2, 4, 8, 16.
            Increasing multisampling count improve image quality by reducing pixel aliasing but can greatly reduce performance.
            NOTE: Changing this property after the DXDevice is initialized will have no effect.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.GraphicsProfile.ShaderQuality">
            <summary>
            Gets or sets a quality settings that specifies the type of shader that should be used to render the scene. Default value is Normal.
            </summary>
            <remarks>
            <para>
            <b>ShaderQuality</b> gets or sets a quality settings that specifies the type of shader that should be used to render the scene.
            </para>
            <para>
            When the GraphicsProfile is accepted by DXScene, the value of this property is set to the <see cref="P:Ab3d.DirectX.DXScene.ShaderQuality"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.DirectX.GraphicsProfile.ExecutePixelShaderPerSample">
            <summary>
            ExecutePixelShaderPerSample is obsolete. Use <see cref="P:Ab3d.DirectX.GraphicsProfile.SupersamplingCount"/> instead.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.GraphicsProfile.TextureFiltering">
            <summary>
            Gets or sets the texture filtering technique that will be used to sample colors from textures.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.GraphicsProfile.DriverType">
            <summary>
            Gets a type of driver that will be used for rendering.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.GraphicsProfile.DefaultAdapter">
            <summary>
            Gets or sets an adapter (graphics card) that will be used to create DirectX device. When null (by default) the default adapter is used.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.GraphicsProfile.DefaultAdapterDescription">
            <summary>
            Gets a string that represents the desciption of the default adapter.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.GraphicsProfile.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name of this GraphicsProfile</param>
        </member>
        <member name="M:Ab3d.DirectX.GraphicsProfile.#ctor(Ab3d.DirectX.GraphicsProfile,SharpDX.DXGI.Adapter1)">
            <summary>
            Constructor
            </summary>
            <param name="graphicsProfile">graphicsProfile</param>
            <param name="defaultAdapter">Adapter (or null to use default adapter)</param>
        </member>
        <member name="M:Ab3d.DirectX.GraphicsProfile.#ctor(System.String,Ab3d.DirectX.GraphicsProfile.DriverTypes,Ab3d.DirectX.ShaderQuality,System.Int32,Ab3d.DirectX.TextureFilteringTypes,SharpDX.DXGI.Adapter1)">
            <summary>
            Constructor
            </summary>
            <param name="name">name of this GraphicsProfile</param>
            <param name="driverType">driverType</param>
            <param name="shaderQuality">shaderQuality</param>
            <param name="preferedMultisampleCount">required multisample count</param>
            <param name="textureFiltering">texture filtering type</param>
            <param name="defaultAdapter">Adapter (or null to use default adapter)</param>
        </member>
        <member name="M:Ab3d.DirectX.GraphicsProfile.#ctor(System.String,Ab3d.DirectX.GraphicsProfile.DriverTypes,Ab3d.DirectX.ShaderQuality,System.Int32,Ab3d.DirectX.TextureFilteringTypes,SharpDX.DXGI.Adapter1,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="name">name of this GraphicsProfile</param>
            <param name="driverType">driverType</param>
            <param name="shaderQuality">shaderQuality</param>
            <param name="preferedMultisampleCount">required multisample count</param>
            <param name="textureFiltering">texture filtering type</param>
            <param name="defaultAdapter">Adapter</param>
            <param name="executePixelShaderPerSample">Use supersampling instead of multisampling</param>
        </member>
        <member name="M:Ab3d.DirectX.GraphicsProfile.#ctor(System.String,Ab3d.DirectX.GraphicsProfile.DriverTypes,Ab3d.DirectX.ShaderQuality,System.Int32,System.Int32,Ab3d.DirectX.TextureFilteringTypes,SharpDX.DXGI.Adapter1)">
            <summary>
            Constructor
            </summary>
            <param name="name">name of this GraphicsProfile</param>
            <param name="driverType">driverType</param>
            <param name="shaderQuality">shaderQuality</param>
            <param name="preferedMultisampleCount">required multisample count</param>
            <param name="supersamplingCount">super-sampling count (allowed values: 1 for no super-sampling, 4, 16, 64)</param>
            <param name="textureFiltering">texture filtering type</param>
            <param name="defaultAdapter">Adapter (or null to use default adapter)</param>
        </member>
        <member name="M:Ab3d.DirectX.GraphicsProfile.GetDXDeviceConfiguration">
            <summary>
            Gets a DXDeviceConfiguration created from this GraphicsProfile
            </summary>
            <returns>DXDeviceConfiguration</returns>
        </member>
        <member name="M:Ab3d.DirectX.GraphicsProfile.Clone">
            <summary>
            Clones this GraphicsProfile into a new GraphicsProfile.
            </summary>
            <returns>cloned GraphicsProfile</returns>
        </member>
        <member name="M:Ab3d.DirectX.GraphicsProfile.Clone(System.String)">
            <summary>
            Clones this GraphicsProfile into a new GraphicsProfile.
            </summary>
            <param name="name">name of the closed GraphicsProfile</param>
            <returns>cloned GraphicsProfile</returns>
        </member>
        <member name="M:Ab3d.DirectX.GraphicsProfile.GetDisplayName">
            <summary>
            Returns the string that represents the DisplayName of this GraphicsProfile.
            This method is called from DisplayName getter if the DisplayName is not manually set.
            </summary>
            <returns>string that represents the DisplayName of this GraphicsProfile</returns>
        </member>
        <member name="M:Ab3d.DirectX.GraphicsProfile.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="F:Ab3d.DirectX.GraphicsProfile.UltraQualityHardwareRendering">
            <summary>
            UltraQualityHardwareRendering is using ultra quality settings with hardware DirectX 11 rendering (using graphic card). This settings uses per-pixel lighting and 16 times supersampling with 2 times multi-sampling (16xSSAA + 2xMSAA).
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.GraphicsProfile.HighQualityHardwareRendering">
            <summary>
            HighQualityHardwareRendering is using high quality settings with hardware DirectX 11 rendering (using graphic card). This settings uses per-pixel lighting and 4 times supersampling with 4 times multi-sampling (4xSSAA + 4xMSAA).
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.GraphicsProfile.NormalQualityHardwareRendering">
            <summary>
            NormalQualityHardwareRendering is using normal quality settings with hardware DirectX 11 rendering (using graphic card). This settings uses per-pixel lighting (better then WPF 3D) and 4-times multi-sampling (4xMSAA).
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.GraphicsProfile.LowQualityHardwareRendering">
            <summary>
            HighQualityHardwareRendering is using low quality and high performance settings with hardware DirectX 11 rendering (using graphic card). This settings uses per-vertex lighting (same as WPF 3D) and no anti-aliasing.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.GraphicsProfile.HighSpeedNormalQualityHardwareRendering">
            <summary>
            HighSpeedNormalQualityHardwareRendering is using low quality shaders (per-vertex lighting) with 4-times antialiasing and anisotropic texture sampling for faster rendering and not low quality graphics.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.GraphicsProfile.HighQualitySoftwareRendering">
            <summary>
            HighQualitySoftwareRendering is using high quality setting with software DirectX 11 rendering. Software rendering can produce the same effects as hardware rendering but is much slower because the rendering is done with the CPU. This settings uses per-pixel lighting and 4-times antialiasing.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.GraphicsProfile.NormalQualitySoftwareRendering">
            <summary>
            NormalQualitySoftwareRendering is using normal quality setting with software DirectX 11 rendering. Software rendering can produce the same effects as hardware rendering but is much slower because the rendering is done with the CPU. This settings uses per-pixel lighting and 2-times antialiasing.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.GraphicsProfile.LowQualitySoftwareRendering">
            <summary>
            LowQualitySoftwareRendering is using low quality setting with software DirectX 11 rendering. Software rendering can produce the same effects as hardware rendering but is much slower because the rendering is done with the CPU. This settings uses per-vertex lighting and no antialiasing.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.GraphicsProfile.Wpf3D">
            <summary>
            Wpf3D is using WPF to render 3D graphics.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.GraphicsProfile.StandardGraphicsProfiles">
            <summary>
            StandardGraphicsProfiles is a array of all standard GraphicsProfiles
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.GraphicsProfile.GetStandardGraphicsProfile(System.String)">
            <summary>
            GetStandardGraphicsProfile returns GraphicsProfile with specified name
            </summary>
            <param name="graphicsProfileName">graphicsProfile name</param>
            <returns>GraphicsProfile or null if GraphicsProfile with specifed name is not found</returns>
        </member>
        <member name="T:Ab3d.DirectX.GraphicsProfileRejectedEventArgs">
            <summary>
            GraphicsProfileRejectedEventArgs is used for <see cref="E:Ab3d.DirectX.Controls.DXView.GraphicsProfileRejected"/> event and specifes the reasons why the GraphicsProfile was rejected.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.GraphicsProfileRejectedEventArgs.RejectedGraphicsProfile">
            <summary>
            Rejected GraphicsProfile
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.GraphicsProfileRejectedEventArgs.RejectedReason">
            <summary>
            Rejected Reason
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.GraphicsProfileRejectedEventArgs.Exception">
            <summary>
            Exception in case when the GraphicsProfile was rejected because of an exception.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.GraphicsProfileRejectedEventArgs.#ctor(Ab3d.DirectX.GraphicsProfile,Ab3d.DirectX.GraphicsProfileRejectedReason,System.Exception)">
            <summary>
            Initializes a new instance of the GraphicsProfileRejectedEventArgs class.
            </summary>
            <param name="rejectedGraphicsProfile">rejected GraphicsProfile</param>
            <param name="rejectedReason">GraphicsProfileRejectedReasons</param>
            <param name="exception">Exception</param>
        </member>
        <member name="T:Ab3d.DirectX.GraphicsProfileRejectedReason">
            <summary>
            GraphicsProfileRejectedReason defines reasons that describe why the GraphicsProfile is rejected.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.GraphicsProfileRejectedReason.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.GraphicsProfileRejectedReason.NotSupportedOperatingSystem">
            <summary>
            This operating system does not support DirectX 11. This happens on operating systems prior to Windows Vista (e.g. Windows XP).
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.GraphicsProfileRejectedReason.RequiredFeatureLevelNotSupported">
            <summary>
            Graphics card does not support the required feature level.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.GraphicsProfileRejectedReason.ExceptionWhenCreatingDevice">
            <summary>
            Exception occured when creating DirectX device.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.GraphicsProfileRejectedReason.ExceptionWhenInitializingResources">
            <summary>
            DirectX device was created successfully but an exception has occured when the device resources (buffers, states, etc.) were initialized.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.InstanceData">
            <summary>
            InstanceData contains World and Color data that describe the world transformation and color of one geometry instance.
            After each change of InstancesData user must call Update method in InstancedGeometryVisual3D.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.InstanceData.World">
            <summary>
            World transformation
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.InstanceData.DiffuseColor">
            <summary>
            Color used for diffuse material
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.InstanceData.SizeInBytes">
            <summary>
            Size of this struct in bytes
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.InstanceData.#ctor(SharpDX.Color4)">
            <summary>
            Constructor
            </summary>
            <param name="duffuseColor">Color4</param>
        </member>
        <member name="M:Ab3d.DirectX.InstanceData.#ctor(System.Windows.Media.Color)">
            <summary>
            Constructor
            </summary>
            <param name="diffuseColor">Color</param>
        </member>
        <member name="M:Ab3d.DirectX.InstanceData.#ctor(SharpDX.Matrix,SharpDX.Color4)">
            <summary>
            Constructor
            </summary>
            <param name="world">Matrix</param>
            <param name="diffuseColor">Color4</param>
        </member>
        <member name="M:Ab3d.DirectX.InstanceData.#ctor(SharpDX.Matrix@,SharpDX.Color4)">
            <summary>
            Constructor
            </summary>
            <param name="world">Matrix</param>
            <param name="diffuseColor">Color4</param>
        </member>
        <member name="M:Ab3d.DirectX.InstanceData.#ctor(System.Windows.Media.Media3D.Matrix3D,System.Windows.Media.Color)">
            <summary>
            Constructor
            </summary>
            <param name="world">Matrix3D</param>
            <param name="diffuseColor">Color</param>
        </member>
        <member name="M:Ab3d.DirectX.InstanceData.#ctor(System.Windows.Media.Media3D.Matrix3D@,System.Windows.Media.Color)">
            <summary>
            Constructor
            </summary>
            <param name="world">Matrix3D</param>
            <param name="diffuseColor">Color</param>
        </member>
        <member name="M:Ab3d.DirectX.InstanceData.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Color)">
            <summary>
            Constructor
            </summary>
            <param name="position">Point3D</param>
            <param name="diffuseColor">Color</param>
        </member>
        <member name="M:Ab3d.DirectX.InstanceData.#ctor(System.Windows.Media.Media3D.Point3D)">
            <summary>
            Constructor
            </summary>
            <param name="position">Point3D</param>
        </member>
        <member name="M:Ab3d.DirectX.InstanceData.#ctor(SharpDX.Vector3,SharpDX.Color4)">
            <summary>
            Constructor
            </summary>
            <param name="position">Vector3</param>
            <param name="diffuseColor">Color4</param>
        </member>
        <member name="M:Ab3d.DirectX.InstanceData.#ctor(SharpDX.Vector3)">
            <summary>
            Constructor
            </summary>
            <param name="position">Vector3</param>
        </member>
        <member name="M:Ab3d.DirectX.InstanceData.SetPosition(System.Windows.Media.Media3D.Point3D)">
            <summary>
            Sets position for this instance
            </summary>
            <param name="position">Point3D</param>
        </member>
        <member name="M:Ab3d.DirectX.InstanceData.SetPosition(SharpDX.Vector3)">
            <summary>
            Sets position for this instance
            </summary>
            <param name="position">Vector3</param>
        </member>
        <member name="M:Ab3d.DirectX.InstanceData.SetPosition(System.Single,System.Single,System.Single)">
            <summary>
            Sets position for this instance
            </summary>
            <param name="x">x</param>
            <param name="y">y</param>
            <param name="z">z</param>
        </member>
        <member name="M:Ab3d.DirectX.InstanceData.SetScale(System.Single,System.Single,System.Single)">
            <summary>
            Sets scale for this instance
            </summary>
            <param name="scaleX">scaleX</param>
            <param name="scaleY">scaleY</param>
            <param name="scaleZ">scaleZ</param>
        </member>
        <member name="M:Ab3d.DirectX.InstanceData.SetScale(System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Sets scale for this instance
            </summary>
            <param name="scale">Vector3D</param>
        </member>
        <member name="M:Ab3d.DirectX.InstanceData.SetScale(SharpDX.Vector3)">
            <summary>
            Sets scale for this instance
            </summary>
            <param name="scale">Vector3</param>
        </member>
        <member name="M:Ab3d.DirectX.InstanceData.GetHitInstanceIndex(System.Windows.Media.Media3D.Rect3D,System.Windows.Media.Media3D.Rect3D,Ab3d.DirectX.InstanceData[],System.Boolean)">
            <summary>
            GetHitInstanceIndex returns index of the instance that was hit in hit testing (defined by hitBounds). 
            The method retuns -1 if hitBounds is not found (was not hit).
            </summary>
            <remarks>
            <para>
            The following code shows a method that changes the color of the instance with mouse over it.
            The following method is called from Ab3d.Utilities.EventManager3D after is is subscribed to MouseMove event.
            </para>
            <example>
            private void VisualEventSource3DOnMouseMove(object sender, Mouse3DEventArgs e)
            {
                if (e.RayHitResult == null || e.RayHitResult.ModelHit == null)
                    return; // This should not happen, but it is safer to have this check anyway
            
                // Check if this model was already selected
                if (ReferenceEquals(e.RayHitResult.ModelHit, _lastHitModel))
                    return; 
            
                var hitBounds = e.RayHitResult.ModelHit.Bounds;
            
                    var hitInstanceIndex = InstanceData.GetHitInstanceIndex(hitBounds, _instanceMeshGeometry3D.Bounds, _instancedData, useOnlyMatrixTranslation: true);
            
                if (hitInstanceIndex == -1)
                    return; // We did not find the instance index
            
                // Set color of hit object to Red
                _instancedData[hitInstanceIndex].DiffuseColor = Colors.Red.ToColor4();
            
                // After each change of instaceData we need to call Update method on InstancedMeshGeometryVisual3D
                _instancedMeshGeometryVisual3D.Update();
            }
            </example>
            </remarks>
            <param name="hitBounds">Rect3D that defines the bounds of the hit model</param>
            <param name="instancedMeshBounds">Rect3D that defines the bounds of the MeshGeometry3D that was used in object instancing</param>
            <param name="instanceData">array of InstanceData</param>
            <param name="useOnlyMatrixTranslation">true if World matrices in instanceData define only translation (OffsetX, OffsetY, OffsetZ) and no scale or rotation (in this case a faster code path can be taken); if false (by default) a full matrix transformation is executed on each position</param>
            <returns>index of the instance that was hit or -1 if no instance is hit</returns>
        </member>
        <member name="T:Ab3d.DirectX.Controls.D3D11ImageSource">
            <summary>
            A D3D11ImageSource class can be used as Image's Source and can displays Direct3D 11 content. 
            Note that the part of the window that is assigned to D3D11ImageSource can be used only for DirectX and cannot show any WPF content over the control.
            If you want to show WPF content on top of DirectX content, than DXImage or D3D11ImageSource should be used.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Controls.D3D11ImageSource.TryLockDuration">
            <summary>
            Duration for how long the D3DImage waits to acquire a lock on the D3DImage's back buffer.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Controls.D3D11ImageSource.DpiX">
            <summary>
            DpiX
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Controls.D3D11ImageSource.DpiY">
            <summary>
            DpiY
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.D3D11ImageSource.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.D3D11ImageSource.#ctor(System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="dpiX">dpiX</param>
            <param name="dpiY">dpiY</param>
        </member>
        <member name="M:Ab3d.DirectX.Controls.D3D11ImageSource.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="dpiX">dpiX</param>
            <param name="dpiY">dpiY</param>
            <param name="enableSoftwareFallback">Specifies the value that is used for enableSoftwareFallback parameter in the call to the D3DImage.SetBackBuffer method.</param>
        </member>
        <member name="M:Ab3d.DirectX.Controls.D3D11ImageSource.InvalidateBackBuffer">
            <summary>
            InvalidateBackBuffer marks the back buffer as dirty and sends it to WPF.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.D3D11ImageSource.InitializeBackBuffer(SharpDX.Direct3D11.Texture2D,System.Int32,System.Int32)">
            <summary>
            InitializeBackBuffer uses the DirectX 11 back buffer and creates a DirectX 9 SharedResource from it.
            The SharedResources can than be used in the InvalidateBackBuffer method to pass the DirectX 11 back buffer to WPF.
            </summary>
            <param name="dx11BackBuffer">DirectX 11 back buffer</param>
            <param name="width">width of the back buffer</param>
            <param name="height">height of the back buffer</param>
        </member>
        <member name="M:Ab3d.DirectX.Controls.D3D11ImageSource.ClearBackBuffer">
            <summary>
            ClearBackBuffer clears the D3DImage's BackBuffer
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.D3D11ImageSource.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.D3D11ImageSource.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Controls.D3DHost">
            <summary>
            D3DHost is a control that is used to show the 3D scene with when the <see cref="F:Ab3d.DirectX.Controls.DXView.PresentationTypes.DirectXOverlay"/> is used for the <see cref="P:Ab3d.DirectX.Controls.DXView.PresentationType"/> property.
            The control is derived from System.Windows.Interop.HwndHost and provides a windows handle based area that can be used to display the 3D scene with using the DirectX SwapChain.
            The area occupied with D3DHost cannot be used by any other WPF element (this is possible when using <see cref="T:Ab3d.DirectX.Controls.DXImage"/> control.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Controls.D3DHost.RenderAsManyFramesAsPossible">
            <summary>
            Gets or sets a static Boolean that specifies if rendering is not bound to WPF's frame rate but is rendering as many frames as possible (when set to true).
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Controls.D3DHost.IsInitiallyPainted">
            <summary>
            Gets a boolean that specifies if the created window is initially painted
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Controls.D3DHost.ClientWindowSize">
            <summary>
            Gets the Size2 (width and heigh as int) of the created window.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Controls.D3DHost.HandleCreated">
            <summary>
            Called when Window handle is created automatically inside BuildWindowCore - when Window handle is created manually with calling CreateWindow method, this event is not called.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Controls.D3DHost.Painting">
            <summary>
            Called when WM_PAINT message is passed to D3DHost WndProc
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Controls.D3DHost.SizeChanging">
            <summary>
            Called when WM_SIZE message is passed to D3DHost WndProc
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.D3DHost.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.D3DHost.BuildWindowCore(System.Runtime.InteropServices.HandleRef)">
            <summary>
            BuildWindowCore
            </summary>
            <param name="hwndParent">hwndParent</param>
            <returns>HandleRef</returns>
        </member>
        <member name="M:Ab3d.DirectX.Controls.D3DHost.WndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            WndProc
            </summary>
            <param name="hwnd">hwnd</param>
            <param name="msg">msg</param>
            <param name="wParam">wParam</param>
            <param name="lParam">lParam</param>
            <param name="handled">handled</param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:Ab3d.DirectX.Controls.D3DHost.DestroyWindowCore(System.Runtime.InteropServices.HandleRef)">
            <summary>
            DestroyWindowCore
            </summary>
            <param name="hwnd">hwnd</param>
        </member>
        <member name="M:Ab3d.DirectX.Controls.D3DHost.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            OnRender
            </summary>
            <param name="drawingContext">drawingContext</param>
        </member>
        <member name="M:Ab3d.DirectX.Controls.D3DHost.OnPainting">
            <summary>
            OnPainting
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.D3DHost.OnSizeChanging">
            <summary>
            OnSizeChanging
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.D3DHost.GetHWnd">
            <summary>
            Returns a handle to used window.
            </summary>
            <returns>a handle to used window</returns>
        </member>
        <member name="M:Ab3d.DirectX.Controls.D3DHost.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Controls.DXImage">
            <summary>
            DXImage is a control that is used to show the 3D scene with when the <see cref="F:Ab3d.DirectX.Controls.DXView.PresentationTypes.DirectXImage"/> is used for the <see cref="P:Ab3d.DirectX.Controls.DXView.PresentationType"/> property.
            The DXImage content can be mixed with other WPF elements (this is not possible when using <see cref="T:Ab3d.DirectX.Controls.D3DHost"/> control.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Controls.DXImage.IsUsingD3DImage">
            <summary>
            Gets a boolean that specifies if a D3DImage is used to show the content of this control. 
            In this case the scene rendered with DirectX 11 stays in the GPU memory and is shared with WPF composition engine.
            When IsUsingD3DImage is false, the rendered DirectX 11 image is copied into main CPU memory and converted into a WritableBitmap.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Controls.DXImage.IsUsingWritableBitmap">
            <summary>
            Gets a boolean that specifies if a WritableBitmap is used to show the content of this control. 
            In this case the rendered DirectX 11 image is copied into main CPU memory and converted into a WritableBitmap.
            When IsUsingWritableBitmap is false, a D3DImage is used to show the image that is already stored in the GPU memory.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Controls.DXImage.EnableSoftwareFallback">
            <summary>
            EnableSoftwareFallback specifies the value that is used for enableSoftwareFallback parameter in the call to the D3DImage.SetBackBuffer method.
            When it is set to true (by default) and .Net 4.5 version of DXEngine is used, then this allows using DXEngine with PresentationType set to DirectXImage over Remote Desktop.
            This property must be set before the back buffer in the D3D11ImageSource is created (usually before Loaded event).
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXImage.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXImage.InitializeDXScene(Ab3d.DirectX.DXScene)">
            <summary>
            InitializeDXScene method must be called to connect the DXImage control to the DXScene that will render the DirectX scene.
            The method must be called after the DXScene is initialized and before the scene is rendered.
            </summary>
            <param name="dxScene">DXScene that will render the DirectX scene (must be initialized)</param>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXImage.SetDpiScale(System.Double,System.Double)">
            <summary>
            Sets the Dpi scale that will be used by this DXImage
            </summary>
            <param name="dpiScaleX">dpiScaleX</param>
            <param name="dpiScaleY">dpiScaleY</param>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXImage.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            OnRenderSizeChanged
            </summary>
            <param name="sizeInfo">sizeInfo</param>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXImage.InvalidateD3DImage">
            <summary>
            Refresh method updates the underlying D3D11ImageSource with marking it dirty so WPF will update it.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXImage.ArrangeOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXImage.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Controls.DXView">
            <summary>
            DXView is a WPF control that can show scene rendered by DXScene.
            The rendered scene can be shown in WPF as a D3DImage (when using DirectXImage as PresentationType) or as DirectX overlay (when using DirectXOverlay).
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Controls.DXView.Id">
            <summary>
            Gets a unique id of this component
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Controls.DXView.IsDisposed">
            <summary>
            Gets a Boolean that specifies if this resource has been disposed.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Controls.DXView.Disposing">
            <summary>
            Occurs when when Dispose is called.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Controls.DXView.Disposables">
            <summary>
            Disposables can be used to simply add IDisposable objects to a list that is automatically disposed when this object is disposed.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Controls.DXView.rootBorder">
            <summary>
            rootBorder defines the Border WPF element that is used to host D3DImage (for DirectX rendering) or Viewport3D (for WPF 3D rendering).
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Controls.DXView.isInitializing">
            <summary>
            If true than the BeginInit was called and the EndInit was not yet called.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Controls.DXView.IsSceneInitialized">
            <summary>
            Gets a Boolean that specifies if the DXView has been initialized by InitializeScene method where DXScene was initialized with the UsedGraphicsProfile (also creates DXScene, DXDevice and other related objects).
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Controls.DXView.IsAutomaticallyUpdatingDXScene">
            <summary>
            Gets or sets a Boolean that specifies if DXView is calling DXScene's Update (checking for changed in all SceneNodes) on every WPF's rendering event.
            When IsAutomaticallyUpdatingDXScene is set to false, this can improve performance but you need to manually call Update method after each change of the objects.
            Default value is true.
            </summary>
            <remarks>
            <para>
            <b>IsAutomaticallyUpdatingDXScene</b> gets or sets a Boolean that specifies if DXView is calling Update on every WPF's rendering event.
            </para>
            <para>
            Update method checks for any changed in the SceneNodes created from WPF objects.
            </para>
            <para>
            With setting IsAutomaticallyUpdatingDXScene to false you can improve performance because SceneNodes are not checked for changes.
            But in this case you need to manually call <see cref="M:Ab3d.DirectX.Controls.DXView.Update"/> method after each change of the objects.
            </para>
            <para>
            This method also sets the <see cref="P:Ab3d.DirectX.DXScene.IsAutomaticallyUpdatingBeforeEachRender"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.DirectX.Controls.DXView.GraphicsProfiles">
            <summary>
            Gets or sets an array of GraphicsProfile objects that specify graphics settings that are supported by this DXView.
            </summary>
            <remarks>
            <para>
            When DXView is initializing it gets the first GraphicsProfile from this array and tries to initialize the DXDevice and DirectX with the setting specified in that GraphicsProfile.
            If initialization is successful this GraphicsProfile is set to <see cref="P:Ab3d.DirectX.Controls.DXView.UsedGraphicsProfile"/>.
            If initialization failed, than <see cref="E:Ab3d.DirectX.Controls.DXView.GraphicsProfileRejected"/> event will be fired and a <see cref="T:Ab3d.DirectX.GraphicsProfileRejectedReason"/> will be specified in the event args.
            After that the next GraphicsProfile from this array is initialized. If it also fails than another GraphicsProfile is used.
            </para>
            <para>
            When no GraphicsProfile can be initialized, than <see cref="T:Ab3d.DirectX.DXSceneInitializationException"/> is thrown.
            </para>
            <para>
            By default the GraphicsProfiles array is set to the following GraphicsProfiles:<br/>
            <see cref="F:Ab3d.DirectX.GraphicsProfile.NormalQualityHardwareRendering"/>,<br/>
            <see cref="F:Ab3d.DirectX.GraphicsProfile.NormalQualitySoftwareRendering"/>, <br/>
            <see cref="F:Ab3d.DirectX.GraphicsProfile.Wpf3D"/>
            </para>
            <para>
            The default settings means that DXView will first try to use the high quality hardware rendering. If this cannot be used, than high performance software rendering will be used.
            If even that cannot be used, WPF 3D will be used.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.DirectX.Controls.DXView.UsedGraphicsProfile">
            <summary>
            Gets a GraphicsProfile that is used by DXView.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Controls.DXView.DefaultGraphicsProfiles">
            <summary>
            Gets an array of GraphicsProfile that are used by default.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Controls.DXView.GraphicsProfileRejected">
            <summary>
            GraphicsProfileRejected event is fired when a GraphicsProfile is rejected.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Controls.DXView.dxDevice">
            <summary>
            Used DXDevice
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Controls.DXView.masterDXView">
            <summary>
            When set then this DXView is a child DXView and renders the 3D scene defined in the masterDXView.DXScene.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Controls.DXView.dxScene">
            <summary>
            Used DXScene
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Controls.DXView.DXScene">
            <summary>
            Gets used DXScene that contains the WPF scene converted into DXSceneNode objects
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Controls.DXView.DXAttributeCollectionProperty">
            <summary>
            DXAttributeCollectionProperty is a DependencyProperty that is used to add DXEngine's attributes to WPF objects.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.GetDXAttributeCollection(System.Windows.UIElement)">
            <summary>
            Gets the value of the DXAttributeCollectionProperty from the specified element
            </summary>
            <param name="element">UIElement</param>
            <returns>value of the DXAttributeCollectionProperty</returns>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.SetDXAttributeCollection(System.Windows.UIElement,System.Object)">
            <summary>
            Sets the DXAttributeCollectionProperty to the specified element
            </summary>
            <param name="element">UIElement</param>
            <param name="newValue">new valur for DXAttributeCollectionProperty</param>
        </member>
        <member name="E:Ab3d.DirectX.Controls.DXView.SceneUpdating">
            <summary>
            Called when the scene is being updated and before it is rendered.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Controls.DXView.SceneRendered">
            <summary>
            Called after the scene has been rendered (with WPF 3D rendering this is called from CompositionTarget.Rendering event handler.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Controls.DXView.Wpf3DRenderingInitialized">
            <summary>
            Wpf3DRenderingInitialized event is called when WPF 3D rendering graphics profile is initialized.
            This rendering profile can be selected because user selected this profile (<see cref="F:Ab3d.DirectX.GraphicsProfile.Wpf3D"/> was the only profile in the <see cref="P:Ab3d.DirectX.Controls.DXView.GraphicsProfiles"/> collection)
            or because no DirectX 11 rendering can be initialized (usually because of the problems with the drivers or some other problems).
            When a DirectX 11 rendering is initialized, then the <see cref="E:Ab3d.DirectX.Controls.DXView.DXSceneDeviceCreated"/> event is called.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Controls.DXView.DXSceneDeviceCreated">
            <summary>
            Called when the DXScene and DirectX 11 device have been created and when UsedGraphicsProfile was set, but before it is fully initialized (DXImage, D3DHOst, DirectX buffers and views are not created yet).
            This method can be used to change some properties the created <see cref="T:Ab3d.DirectX.DXScene"/> object that is set to the <see cref="P:Ab3d.DirectX.Controls.DXView.DXScene"/> property.
            Once all the DirectX objects has been initialized (all the buffers and views are created), the <see cref="E:Ab3d.DirectX.Controls.DXView.DXSceneInitialized"/> event is triggered.
            Note that when DXScene is not created because a WPF 3D rendering is used, then the <see cref="E:Ab3d.DirectX.Controls.DXView.Wpf3DRenderingInitialized"/> event is called.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Controls.DXView.DXSceneInitialized">
            <summary>
            Called after the DXScene has been fully initialized - the device, buffers and views are created. 
            In Wpf3D mode the event is triggered after the Wpf3D has been initialized.
            To be notified after the DXScene, DirectX device and UsedGraphicsProfile would be set and before the DirectX buffers and views are created, use the <see cref="E:Ab3d.DirectX.Controls.DXView.DXSceneDeviceCreated"/> event.
            </summary>
        </member>
        <member name="E:Ab3d.DirectX.Controls.DXView.DXRenderSizeChanged">
            <summary>
            Called when the size of the rendering area is changed. Also called after the back buffers are initialized for the first time.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Controls.DXView.PresentationTypes">
            <summary>
            PresentationTypes enum defines how DXView will present the DirectX DirectX 3D scene to the WPF rendering engine.
            When using WPF 3D rendering the DXView will be presented as DirectXImage would be specified to PresentationType - using Viewport3D.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Controls.DXView.PresentationTypes.DirectXImage">
            <summary>
            3D scene is rendered with DirectX 11 and than "sent" as shared resource to WPF rendering engine (to D3DImage) that combines the 3D scene with other WPF objects.
            DirectXImage allows WPF objects to be drawn on top of DXView.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Controls.DXView.PresentationTypes.DirectXOverlay">
            <summary>
            3D scene is rendered with DirectX 11 and shown on top of any WPF objects with using HwndHost.
            DirectXOverlay has the best performance but do not allow WPF objects to be drawn on top of DXView.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Controls.DXView.PresentationType">
            <summary>
            Gets or sets an enum that specifies how the 3D scene is presented to the WPF rendering engine. Default value is DirectXImage.
            </summary>
            <remarks>
            <para>
            <b>PresentationType</b> gets or sets an enum of type <see cref="T:Ab3d.DirectX.Controls.DXView.PresentationTypes"/> that specifies how the DirectX 3D scene is presented to the WPF layout engine.
            </para>
            <para>
            The possible values for PresentationType are:
            </para>
            <para>
            <see cref="F:Ab3d.DirectX.Controls.DXView.PresentationTypes.DirectXImage"/>:<br/>
            3D scene is rendered with DirectX 11 and than "sent" as shared resource to WPF rendering engine (to D3DImage) that combines the 3D scene with other WPF objects.
            DirectXImage allows WPF objects to be drawn on top of DXView. 
            DirectXImage renders the scene directly to the back buffer.
            A disadvantage of this mode is that DXEngine needs to wait until the graphics card fully finishes rendering the 3D scene before the image can be sent to WPF. When rendering a very complex scene (and with lots of 3D lines that require geometry shader) this can be significantly slower then using DirectXOverlay that does not wait for GPU to complete the rendering.
            This mode does not work correctly with graphics debugging tools (see below).
            </para>
            <para>
            <see cref="F:Ab3d.DirectX.Controls.DXView.PresentationTypes.DirectXOverlay"/>:<br/>
            3D scene is rendered with DirectX 11 and shown on top of any WPF objects with using HwndHost.
            Because in this mode the DirectX has its own part of the screen (defined by a HwndHost), the graphics card can continue to render in the background 
            after the DXEngine has sent all the scene data to the graphics card (executed all draw calls and then calls Present DirectX method).
            When the graphics card completes rendering the scene, it can show it it the specified part of the screen.
            This means that when rendering very complex 3D scenes this mode can be significantly faster because DXEngine does not need to wait until the scene is completely rendered - DXEngine engine can continue execution after it passes all the data to GPU (calling Present method).
            A disadvantage of DirectXOverlay is that it does not allow WPF objects to be drawn on top or below of DXView (the 3D image cannot be composed with other WPF objects).
            DirectXOverlay also allows using graphics debugging tools (see below).
            </para>
            <para>
            When using <b>graphics debugging tools</b> like Visual Studio Graphics Debugger, NSight or similar, the <b>DirectXOverlay</b> mode must be used.
            This mode uses SwapChain and Present method. Using Present method on SwapChain is required by the the graphics tools to determine when the frame was rendered.
            </para>
            <para>
            By default the DirectXImage is used.
            </para>    
            <para>
            Note that when using WPF 3D rendering, than PresentationType does not have any effect because the 3D Scene will be rendered with WPF's Viewport3D which also allow other WPF objects to be drawin on top of 3D Scene.
            </para>
            <para>
            PresentationType also does not have any effect in design time because DXView is using WPF 3D to show the 3D Scene there.
            </para>
            </remarks>
        </member>
        <member name="F:Ab3d.DirectX.Controls.DXView.BackgroundColorProperty">
            <summary>
            BackgroundColorProperty
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Controls.DXView.BackgroundColor">
            <summary>
            Gets or sets a background color for DXView (this color is used to clear the DirectX back buffer). Default color is Transparent.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Controls.DXView.DXRenderSize">
            <summary>
            Gets size of shown rendering area in WPF units.
            To get size of shown rendering area in pixels (this size multiplied by dpi scale) see <see cref="P:Ab3d.DirectX.Controls.DXView.DXFinalPixelSize"/>.
            To get size of back buffer that is used by rendering (this size multiplied by dpi scale and super-sampling factor, see the <see cref="P:Ab3d.DirectX.Controls.DXView.DXRenderPixelSize" />
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Controls.DXView.DXRenderPixelSize">
            <summary>
            Gets size in pixels of back buffer that is used to render the 3D scene (<see cref="P:Ab3d.DirectX.Controls.DXView.DXRenderSize"/> is multiplied by DpiScale and with SupersamplingFactor).
            To get size of shown rendering area in pixels (this size multiplied by dpi scale) see <see cref="P:Ab3d.DirectX.Controls.DXView.DXFinalPixelSize"/>.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Controls.DXView.DXFinalPixelSize">
            <summary>
            Gets size of shown rendering area in pixels (<see cref="P:Ab3d.DirectX.Controls.DXView.DXRenderSize"/> is multiplied by DpiScale). In case of super-sampling this value is smaller than <see cref="P:Ab3d.DirectX.Controls.DXView.DXRenderPixelSize"/>.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Controls.DXView.DpiScaleX">
            <summary>
            Gets or sets a double that represents a DPI scale factor in X direction: 1 means 96 DPI, 1.5 means 144 DPI, etc. 
            (double.NaN is default value and means system default DPI setting - on loaded the double.NaN value is replaced by the system default DPI value).
            </summary>
            <remarks>
            <para>
            <b>DpiScaleX</b> gets or sets a double that represents a DPI scale factor in X direction: 1 means 96 DPI, 1.5 means 144 DPI, etc. 
            </para>
            <para>
            Default value is double.NaN. 
            This value means that system default DPI setting is used.
            On loaded the double.NaN value is replaced by the actual system default DPI value.
            </para>
            <para>
            You also need to set the <see cref="P:Ab3d.DirectX.Controls.DXView.DpiScaleY"/> property.
            </para>
            <para>
            This value has no effect when WPF 3D rendering is used.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.DirectX.Controls.DXView.DpiScaleY">
            <summary>
            Gets or sets a double that represents a DPI scale factor in Y direction: 1 means 96 DPI, 1.5 means 144 DPI, etc. 
            (double.NaN is default value and means system default DPI setting - on loaded the double.NaN value is replaced by the system default DPI value).
            </summary>
            <remarks>
            <para>
            <b>DpiScaleY</b> gets or sets a double that represents a DPI scale factor in Y direction: 1 means 96 DPI, 1.5 means 144 DPI, etc. 
            </para>
            <para>
            Default value is double.NaN. 
            This value means that system default DPI setting is used.
            On loaded the double.NaN value is replaced by the actual system default DPI value.
            </para>
            <para>
            You also need to set the <see cref="P:Ab3d.DirectX.Controls.DXView.DpiScaleX"/> property.
            </para>
            <para>
            This value has no effect when WPF 3D rendering is used.
            </para>
            </remarks>        
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.#ctor(Ab3d.DirectX.DXDevice)">
            <summary>
            Constructor
            </summary>
            <param name="dxDevice">DXDevice</param>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.#ctor(Ab3d.DirectX.DXScene)">
            <summary>
            Constructor
            </summary>
            <param name="dxScene">DXScene</param>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.#ctor(Ab3d.DirectX.Controls.DXView,System.Boolean)">
            <summary>
            Constructor of a child DXView that will render DXScene defined in the masterDXView. 
            </summary>
            <param name="masterDXView">DXView that defined the DXScene that will be rendered to this DXView</param>
            <param name="useMasterRenderingSteps">when true then the DXScene.RenderingSteps from the master DXScene are used. In this case the RenderingStep in the DXScene created by this DXView are not set. When false, the this DXScene creates its own RenderingSteps that can be customized for this DXView.</param>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.InitializeScene">
            <summary>
            Initialize the DXScene or WPF 3D. 
            This method is usually called in DXView Loaded event but it can be called manually before Loaded event to create the DXScene, DXDevice and other related objects.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.RenderToBitmap">
            <summary>
            RenderToBitmap renders the 3D scene to bitmap. 
            The size of the bitmap is the same as the current size of this DXView.DXRenderPixelSize.
            </summary>
            <returns>BitmapSource as rendered the 3D scene</returns>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.RenderToBitmap(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            RenderToBitmap renders the 3D scene to bitmap with specified width, height, multi-sampling count and DPI.
            </summary>
            <param name="width">width of the rendered bitmap</param>
            <param name="height">height of the rendered bitmap</param>
            <param name="preferedMultisampling">multi-sampling count that is used to render the image (used if possible). When -1 is specified (by default), then the current multi-sampling count from DXScene is used.</param>
            <param name="supersamplingCount">super-sampling count (possible values: 1 no super-sampling, 4, 16, 64)</param>
            <param name="convertToNonPreMultipledAlpha">when true (false by default) then the image in converted into non-premultiplied alpha (this can be used when saving to png file that does not support pre-multiplied alpha)</param>
            <returns>BitmapSource as rendered the 3D scene</returns>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.RenderToBitmap(System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            RenderToBitmap renders the 3D scene to bitmap with specified width, height, multi-sampling and super-sampling count and DPI.
            </summary>
            <param name="width">width of the rendered bitmap</param>
            <param name="height">height of the rendered bitmap</param>
            <param name="preferedMultisampling">multi-sampling count that is used to render the image (used if possible). When -1 is specified (by default), then the current multi-sampling count from DXScene is used.</param>
            <param name="dpiX">The horizontal DPI of the bitmap.</param>
            <param name="dpiY">The vertical DPI of the bitmap.</param>
            <returns>BitmapSource as rendered the 3D scene</returns>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.RenderToBitmap(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            RenderToBitmap renders the 3D scene to bitmap with specified width, height, multi-sampling and super-sampling count and DPI.
            </summary>
            <param name="width">width of the rendered bitmap</param>
            <param name="height">height of the rendered bitmap</param>
            <param name="preferedMultisampling">multi-sampling count that is used to render the image (used if possible). When -1 is specified (by default), then the current multi-sampling count from DXScene is used.</param>
            <param name="supersamplingCount">super-sampling count (possible values: 1 no super-sampling, 4, 16, 64)</param>         
            <param name="dpiX">The horizontal DPI of the bitmap.</param>
            <param name="dpiY">The vertical DPI of the bitmap.</param>
            <param name="convertToNonPreMultipledAlpha">when true (false by default) then the image in converted into non-premultiplied alpha (this can be used when saving to png file that does not support pre-multiplied alpha)</param>
            <returns>BitmapSource as rendered the 3D scene</returns>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.RenderToBitmap(System.Windows.Media.Imaging.WriteableBitmap,System.Int32,System.Int32)">
            <summary>
            RenderToBitmap renders the 3D scene the specified WriteableBitmap.
            </summary>
            <param name="writeableBitmap">WriteableBitmap that will be used to render the 3D scene to</param>
            <param name="preferedMultisampling">multisampling count that is used to render the image (used if possible). When -1 is specified (by default), then the current multisampling count from DXScene is used.</param>
            <param name="supersamplingCount">super-sampling count (possible values: 1 no super-sampling, 4, 16, 64)</param>         
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.GetSceneNodeForWpfObject(System.Object)">
            <summary>
            GetSceneNodeForWpfObject returns the SceneNode in DXScene that was created to represent the wpfObject.
            The method returns null if SceneNode is not found.
            </summary>
            <remarks>
            <para>
            <b>GetSceneNodeForWpfObject</b> returns the SceneNode in DXScene that was created to represent the wpfObject.
            </para>
            <para>
            GetSceneNodeForWpfObject should be called after SceneNodes are created from WPF 3D objects. 
            This can be done with using the DXSceneInitialized event - for example:
            </para>
            <example>
            <code>
            MainDXViewportView.DXSceneInitialized += delegate(object sender, EventArgs args)
            {
                // Called after after SceneNodes are created and before RenderingQueus are filled (before they are rendered for the first time).
                if (MainDXViewportView.DXScene == null) // DXScene can be null in case of WPF rendering
                    return;
            
                var boxSceneNode = MainDXViewportView.GetSceneNodeForWpfObject(BaseBoxVisual3D);
            };
            </code>
            </example>
            <para>
            TIP:<br/>
            To get all the SceneNode objects created by DXEngine, you can call the MainDXViewportView.DXScene.DumpSceneNodes() method in Visual Studio's Immediate Window.
            You can also use the DXEngineSnoop (in Tools folder) and in the actions menu select "Dump SceneNodes"
            </para>
            </remarks>
            <param name="wpfObject">WPF object</param>
            <returns>SceneNode in DXScene that was created to represent the wpfObject or null if SceneNode is not found.</returns>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.MasterDXViewOnDXSceneInitialized(System.Object,System.EventArgs)">
            <summary>
            MasterDXViewOnDXSceneInitialized is called when DXScene in the MasterDXView was initialized
            </summary>
            <param name="sender">sender</param>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.OnSceneRendered">
            <summary>
            OnSceneRendered
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.UpdateCamera">
            <summary>
            UpdateCamera
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.OnSceneUpdating">
            <summary>
            OnSceneUpdating
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.Refresh">
            <summary>
            Forces update and rendering of the scene
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.Update">
            <summary>
            Update method checks all child SceneNodes and checks if any chanages has been created and if rendering is required.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.RenderScene(System.Boolean)">
            <summary>
            RenderScene rendered the scene. If forceUpdate is false (by default) then the scene is rendered only if there are any changes in the scene nodes.
            </summary>
            <param name="forceUpdate">if true than scene is rendered even if there are no scene changes</param>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.RenderScene(System.Boolean,System.Boolean)">
            <summary>
            RenderScene rendered the scene.
            If forceRender is false then the scene is rendered only if there are any changes in the scene nodes.
            If forceUpdate is true then the RenderingQueues are always regenerated (otherwise RenderingQueues are regenerated only when this is required because of the changes).
            </summary>
            <param name="forceRender">if true than scene is rendered even if there are no scene changes</param>
            <param name="forceUpdate">if true then the RenderingQueues are always regenerated (otherwise RenderingQueues are regenerated only when this is required because of the changes)</param>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.SetObjectNames(System.Collections.Generic.Dictionary{System.Object,System.String})">
            <summary>
            SetObjectNames sets a dictionary with object as key and name as value that can be used to name the created SceneNodes.
            This method must be called before the RootNode is created.
            </summary>
            <param name="objectNames">dictionary with object as key and name as value</param>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.SetObjectNames(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            SetObjectNames sets a dictionary with object as key and name as value that can be used to name the created SceneNodes.
            This method must be called before the RootNode is created.
            </summary>
            <param name="namedObjects">dictionary with object as key and name as value</param>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.CreateObjectNames(System.Object)">
            <summary>
            CreateObjectNames uses reflection on parentObject (Window or UserControl) to get the names of internal fields that are created from XAML.
            This method calls Collect3DObjectNames method.
            </summary>
            <remarks>
            <para>
            Unfortuantelly is not possible to read the name of the object that is defined in XAML and has x:Name property (if it is not derived from FrameworkElement - for example Visual3D, Model3D).
            On the other hand it is not possible to define custom property on non-FrameworkElement objects, that would make the compiler to generate fields from the elements.
            </para>
            <para>
            So if we would like to name 3D objects (SceneNodes) with the same names that are defined in XAML with x:Name, we need to use a little Reflection trick.
            We get a list of all internal fields in parent Window, User Control or other object that contains fields created from XAML and check if the field is derived from Visual3D, Model3D or DXViewChild.
            In this case we add the field's value (object instance) and its name (field name) into a dictionary.
            </para>
            <para>
            Creating object names is done with <see cref="M:Ab3d.DirectX.Controls.DXView.Collect3DObjectNames(System.Object)"/> method.
            </para>
            </remarks>
            <param name="parentObject">parentObject (Window or UserControl)</param>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.Collect3DObjectNames(System.Object)">
            <summary>
            Collect3DObjectNames gets names of all internal fields in parentObject that contains internal fields defined in XAML (for example Window or UserControl) that are derived from Visual3D, Model3D or DXSceneViewChild and stores them in Dictionary of object as key and object name as value.
            </summary>
            <remarks>
            <para>
            Unfortuantelly is not possible to read the name of the object that is defined in XAML and has x:Name property (if it is not derived from FrameworkElement - for example Visual3D, Model3D).
            On the other hand it is not possible to define custom property on non-FrameworkElement objects, that would make the compiler to generate fields from the elements.
            </para>
            <para>
            So if we would like to name 3D objects (SceneNodes) with the same names that are defined in XAML with x:Name, we need to use a little Reflection trick.
            We get a list of all internal fields in parent Window, User Control or other object that contains fields created from XAML and check if the field is derived from Visual3D, Model3D or DXSceneViewChild.
            In this case we add the field's value (object instance) and its name (field name) into a dictionary.
            This dictionary can than be added to DXSceneView to name the SceneNodes.
            </para>
            </remarks>
            <param name="parentObject">parent object that contains internal fields defined in XAML (for example Window or UserControl)</param>
            <returns>Dictionary of object as key and object name as value</returns>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.BeginInit">
            <summary>
            BeginInit begins initializing the DXView. The DXView will not render the scene until the EndInit is calls. This allows to make multiple changes without rendering the scene after each change.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.EndInit">
            <summary>
            EndInit needs to be called after BeginInit was called for the changes to take effect.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.IsDesignTime">
            <summary>
            Returns if the control is running in design time.
            </summary>
            <returns>true if in design time</returns>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.GetIsUsingWpf3D">
            <summary>
            Returns true if in design time or if DriverType is Wpf3D
            </summary>
            <returns>true if in design time or if DriverType is Wpf3D</returns>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.MeasureOverride(System.Windows.Size)">
            <summary>
            Updates the UIElement.DesiredSize of the child Image control.
            </summary>
            <param name="availableSize">The size that the control should not exceed.</param>
            <returns>The child Image's desired size.</returns>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.ArrangeOverride(System.Windows.Size)">
            <summary>Arranges and sizes the child Image control.</summary>
            <param name="finalSize">The size used to arrange the control.</param>
            <returns>The size of the control.</returns>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            OnRenderSizeChanged
            </summary>
            <param name="sizeInfo">sizeInfo</param>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.UpdateAspectRatio(System.Single,System.Single)">
            <summary>
            UpdateAspectRatio
            </summary>
            <param name="width">width</param>
            <param name="height">height</param>
        </member>
        <member name="P:Ab3d.DirectX.Controls.DXView.VisualChildrenCount">
            <summary>
            Gets the number of visual child elements within this element.
            </summary>
            <remarks>
            This will always return 1 as this control hosts a single
            Image control.
            </remarks>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.GetVisualChild(System.Int32)">
            <summary>Returns the child Image control.</summary>
            <param name="index">
            The zero-based index of the requested child element in the collection.
            </param>
            <returns>The child Image control.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            index is less than zero or greater than VisualChildrenCount.
            </exception>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.LogUserMessage(System.String)">
            <summary>
            LogUserLabel can be used to add custom user message to DXEngine log file.
            This method work only with debug DXEngine build and with enabled logging. It added the "USER MESSAGE: " prefix to log entry.
            </summary>
            <param name="message">user message that will be added to log file</param>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="F:Ab3d.DirectX.Controls.DXView.RootDXSceneViewNodeName">
            <summary>
            Gets the name of the Root node name
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Controls.DXView.dxImage">
            <summary>
            Used DXImage control (set only when DirectXImage PresentationType is used)
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Controls.DXView.DXImage">
            <summary>
            Gets used DXImage control (set only when DirectXImage PresentationType is used)
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Controls.DXView.d3dHost">
            <summary>
            Used D3DHost control (set only when DirectXOverlay PresentationType is used)
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Controls.DXView.D3DHost">
            <summary>
            Gets D3DHost control (set only when DirectXOverlay PresentationType is used)
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.InitializeRootNode">
            <summary>
            InitializeRootNode is called to create and initialized RootNode
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.UpdateContentForDirectX">
            <summary>
            Updates the children or content for DirectX rendering
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.OnDXSceneDeviceCreated">
            <summary>
            OnDXSceneDeviceCreated
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.OnWpf3DRenderingInitialized">
            <summary>
            OnWpf3DRenderingInitialized
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.OnDXSceneInitialized">
            <summary>
            OnDXSceneInitialized
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.OnDXRenderSizeChanged">
            <summary>
            OnDXRenderSizeChanged
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.OnDXRenderSizeChanged(System.Windows.Size,SharpDX.Size2,SharpDX.Size2)">
            <summary>
            OnDXRenderSizeChanged
            </summary>
            <param name="renderSize">Size of rendering area in WPF units</param>
            <param name="renderPixelSize">Size in pixels of back buffer that is used to render the 3D scene</param>
            <param name="finalPixelSize">size in pixels as shown on the screen</param>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.GetDpiScale(System.Windows.Media.Visual,System.Double@,System.Double@)">
            <summary>
            Returns the dpiScaleX and dpiScaleY of the specified WPF visual (can be window or any other WPF control).
            </summary>
            <param name="visual">WPF visual (can be window or any other WPF control)</param>
            <param name="dpiScaleX">out dpiScaleX</param>
            <param name="dpiScaleY">out dpiScaleY</param>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.DisposeDXImage">
            <summary>
            Dispose DXImage and D3DImage resources
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.DisposeD3DHost">
            <summary>
            Dispose D3DHost and its resources
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Controls.DXView.rootViewport3D">
            <summary>
            rootViewport3D defines the Viewport3D that is used to show 3D scene when WPF 3D rendering is used
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXView.UpdateContentForWpf3D">
            <summary>
            Updates the children or content for WPF 3D rendering
            </summary>        
        </member>
        <member name="T:Ab3d.DirectX.Controls.DXViewportView">
            <summary>
            DXViewportView is a control that can shown the content of the WPF's Viewport3D with the DXEngine rendering engine.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Controls.DXViewportView.RootSceneNodeName">
            <summary>
            RootSceneNodeName defines the name of the SceneNode that is set to <see cref="P:Ab3d.DirectX.DXScene.RootNode"/> property.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Controls.DXViewportView.DXViewportViewProperty">
            <summary>
            DXViewportViewProperty - used on Viewport3D to set a WeakReference to the DXViewportView that is used to render the Viewport3D.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Controls.DXViewportView.Viewport3DProperty">
            <summary>
            Viewport3DProperty
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Controls.DXViewportView.Viewport3D">
            <summary>
            Gets or sets a WPF's Viewport3D
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Controls.DXViewportView.UseViewport3DCameraProperty">
            <summary>
            UseViewport3DCameraProperty
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Controls.DXViewportView.UseViewport3DCamera">
            <summary>
            Gets or sets a Boolean that specifies if Camera from Viewport3D is used in Scene3D. If false, then the Scene3D.Camera need to be set to an object that is derived from <see cref="T:Ab3d.DirectX.ICamera"/>.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXViewportView.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXViewportView.#ctor(System.Windows.Controls.Viewport3D)">
            <summary>
            Constructor
            </summary>
            <param name="viewport3D">Viewport3D</param>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXViewportView.#ctor(Ab3d.DirectX.DXDevice,System.Windows.Controls.Viewport3D)">
            <summary>
            Constructor
            </summary>
            <param name="dxDevice">DXDevice</param>
            <param name="viewport3D">Viewport3D</param>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXViewportView.#ctor(Ab3d.DirectX.DXScene,System.Windows.Controls.Viewport3D)">
            <summary>
            Constructor
            </summary>
            <param name="dxScene">DXScene</param>
            <param name="viewport3D">Viewport3D</param>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXViewportView.#ctor(Ab3d.DirectX.Controls.DXViewportView,System.Windows.Controls.Viewport3D,System.Boolean)">
            <summary>
            Constructor that created a DXViewportView that shows the 3D scene defined in another DXViewportView.
            </summary>
            <param name="masterDXViewportView">DXViewportView that defined the 3D scene and will be rendered from different camera in this DXViewportView</param>
            <param name="viewport3D">Viewport3D</param>
            <param name="useMasterRenderingSteps">when true (by default) then the DXScene.RenderingSteps from the master DXScene are used. In this case the RenderingStep in the DXScene created by this DXViewportView are not set. When false, the this DXScene creates its own RenderingSteps that can be customized for this DXViewportView.</param>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXViewportView.InitializeRootNode">
            <summary>
            InitializeRootNode is called to create and initialized RootNode
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXViewportView.MasterDXViewOnDXSceneInitialized(System.Object,System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXViewportView.UpdateContentForDirectX">
            <summary>
            UpdateContentForDirectX
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXViewportView.UpdateContentForWpf3D">
            <summary>
            Updates the 3D objects for WPF 3D rendering
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXViewportView.OnVisualParentChanged(System.Windows.DependencyObject)">
            <summary>
            OnVisualParentChanged
            </summary>
            <param name="oldParent">oldParent</param>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXViewportView.GetClosestHitObject(System.Windows.Point)">
            <summary>
            GetClosestHitObject method executes a hit testing on the SceneNodes in this DXScene and returns a <see cref="T:Ab3d.DirectX.DXRayHitTestResult"/> object with the closest triangle hit by the specified ray.
            When no triangle is hit, null is returned.
            </summary>
            <remarks>
            <para>
            HitTest method executes a hit testing on the SceneNodes in this DXScene and returns <see cref="T:Ab3d.DirectX.DXRayHitTestResult"/> object with the closest triangle hit by the specified ray.
            When no triangle is hit, null is returned.
            </para>
            <para>
            It is possible to adjust hit testing with changing the value in the <see cref="T:Ab3d.DirectX.DXHitTestOptions"/> property.
            </para>
            <para>
            To get all hit results, use the <see cref="M:Ab3d.DirectX.Controls.DXViewportView.GetAllHitObjects(System.Windows.Point)"/> method.
            </para>
            </remarks>
            <param name="position">2D position in Viewport3D that is used to create a 3D ray that is used for hit testing (usually mouse position)</param>
            <returns>DXRayHitTestResult with the closest hit object or null if no object was hit</returns>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXViewportView.GetAllHitObjects(System.Windows.Point)">
            <summary>
            GetAllHitObjects method executes a hit testing on the SceneNodes in this DXScene and returns a list of <see cref="T:Ab3d.DirectX.DXRayHitTestResult"/> objects sorted from the closest to the farthest object.
            When no object is hit, an empty list is returned.
            </summary>
            <remarks>
            <para>
            GetAllHitObjects method executes a hit testing on the SceneNodes in this DXScene and returns a list of <see cref="T:Ab3d.DirectX.DXRayHitTestResult"/> objects sorted from the closest to the farthest object.
            When no triangle is hit, an empty list is returned.
            </para>
            <para>
            It is possible to adjust hit testing with changing the value in the <see cref="T:Ab3d.DirectX.DXHitTestOptions"/> property.
            </para>
            <para>
            To get only the closest hit result, use the <see cref="M:Ab3d.DirectX.Controls.DXViewportView.GetClosestHitObject(System.Windows.Point)"/> method.
            </para>
            </remarks>
            <param name="position">2D position in Viewport3D that is used to create a 3D ray that is used for hit testing (usually mouse position)</param>
            <returns>a list of DXRayHitTestResult objects or an empty list when no object is hit</returns>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXViewportView.GetHitPosition(System.Windows.Point)">
            <summary>
            GetHitPosition method returns hit 3D position or null when no object was hit by the specified 2D position.
            </summary>
            <param name="position">2D position in Viewport3D that is used to create a 3D ray that is used for hit testing (usually mouse position)</param>
            <returns>hit 3D position or null when no object was hit</returns>
        </member>
        <member name="M:Ab3d.DirectX.Controls.DXViewportView.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.HandleCreatedEventHandler">
            <summary>
            HandleCreatedEventHandler is a delegate for the <see cref="T:Ab3d.DirectX.HandleCreatedEventArgs"/>.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Ab3d.DirectX.HandleCreatedEventArgs">
            <summary>
            HandleCreatedEventArgs is used for the <see cref="E:Ab3d.DirectX.Controls.D3DHost.HandleCreated"/> event.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.HandleCreatedEventArgs.Handle">
            <summary>
            hwmd handle
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.HandleCreatedEventArgs.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">hwmd handle</param>
        </member>
        <member name="T:Ab3d.DirectX.Extentions">
            <summary>
            Extentions class provides extension methods to convert WPF types to SharpDX types and vice versa.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.ToColor3(System.Windows.Media.Color)">
            <summary>
            Converts WPF Color to SharpDX Color3
            </summary>
            <param name="color">WPF Color</param>
            <returns>SharpDX Color3</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.ToColor4(System.Windows.Media.Color)">
            <summary>
            Converts WPF Color to SharpDX Color4
            </summary>
            <param name="color">WPF Color</param>
            <returns>SharpDX Color4</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.ToPremultipliedColor4(System.Windows.Media.Color)">
            <summary>
            Converts WPF Color to premultipled SharpDX Color4 (premultipled color is color where R, G and B color values are multiplied with alpha value)
            </summary>
            <param name="color">WPF Color</param>
            <returns>SharpDX Color4</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.ToPremultipliedColor3(System.Windows.Media.Color)">
            <summary>
            Converts WPF Color to premultipled SharpDX Color3 (premultipled color is color where R, G and B color values are multiplied with alpha value)
            </summary>
            <param name="color">WPF Color</param>
            <returns>SharpDX Color3</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.ToPremultipliedColor3(System.Windows.Media.Color,System.Single)">
            <summary>
            Converts WPF Color to premultipled SharpDX Color3 (premultipled color is color where R, G and B color values are multiplied with alpha value)
            </summary>
            <param name="color">WPF Color</param>
            <param name="alpha">alpha</param>
            <returns>SharpDX Color3</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.ToWpfColor(SharpDX.Color3)">
            <summary>
            Converts SharpDX Color3 to WPF color
            </summary>
            <param name="color">SharpDX Color3</param>
            <returns>WPF color</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.ToWpfColor(SharpDX.Color4)">
            <summary>
            Converts SharpDX Color4 to WPF color
            </summary>
            <param name="color">SharpDX Color4</param>
            <returns>WPF color</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.ToVector3(System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Converts WPF Vector3D to SharpDX Vector3
            </summary>
            <param name="vector">WPF Vector3D</param>
            <returns>SharpDX Vector3</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.ToWpfVector3D(SharpDX.Vector3)">
            <summary>
            Converts SharpDX Vector3 to WPF Vector3D
            </summary>
            <param name="vector">SharpDX Vector3</param>
            <returns>WPF Vector3D</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.ToVector3(System.Windows.Media.Media3D.Point3D)">
            <summary>
            Converts WPF Point3D to SharpDX Vector3
            </summary>
            <param name="point">WPF Point3D</param>
            <returns>SharpDX Vector3</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.ToWpfPoint3D(SharpDX.Vector3)">
            <summary>
            Converts SharpDX Vector3 to WPF Point3D
            </summary>
            <param name="point">SharpDX Vector3</param>
            <returns>WPF Point3D</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.ToWpfMatrix3D(SharpDX.Matrix)">
            <summary>
            Converts SharpDX Matrix to WPF Matrix3D
            </summary>
            <param name="value">SharpDX Matrix</param>
            <returns>WPF Matrix3D</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.ToMatrix(System.Windows.Media.Media3D.Matrix3D)">
            <summary>
            Converts WPF Matrix3D to SharpDX Matrix
            </summary>
            <param name="value">WPF Matrix3D</param>
            <returns>SharpDX Matrix</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.ToRect3D(Ab3d.DirectX.Bounds)">
            <summary>
            Converts DXEngine's Bounds object to WPF Rect3D
            </summary>
            <param name="bounds">DXEngine's Bounds object</param>
            <returns>WPF Rect3D</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.ToRect3D(SharpDX.BoundingBox)">
            <summary>
            Converts SharpDX BoundingBox to WPF Rect3D
            </summary>
            <param name="boundingBox">SharpDX BoundingBox</param>
            <returns>WPF Rect3D</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.ToBoundingBox(System.Windows.Media.Media3D.Rect3D)">
            <summary>
            Converts WPF Rect3D to SharpDX BoundingBox
            </summary>
            <param name="bounds">WPF Rect3D</param>
            <returns>SharpDX BoundingBox</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.ToDXEngineBounds(System.Windows.Media.Media3D.Rect3D)">
            <summary>
            Converts SharpDX BoundingBox to DXEngine's Bounds object
            </summary>
            <param name="bounds">SharpDX BoundingBox</param>
            <returns>DXEngine's Bounds object</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.UpdateDXBounds(Ab3d.DirectX.Bounds,System.Windows.Media.Media3D.Rect3D@)">
            <summary>
            Checks if wpfBounds is not the same as dxBounds and in this case updates the values in dxBounds
            </summary>
            <param name="dxBounds">DXEngine's Bounds</param>
            <param name="wpfBounds">WPF Rect3D</param>
            <returns></returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.UpdateDXBounds(Ab3d.DirectX.Bounds,System.Windows.Media.Media3D.Rect3D)">
            <summary>
            Checks if wpfBounds is not the same as dxBounds and in this case updates the values in dxBounds
            </summary>
            <param name="dxBounds">DXEngine Bounds</param>
            <param name="wpfBounds">WPF Rect3D</param>
            <returns></returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.ToDXTransform(System.Windows.Media.Media3D.Transform3D)">
            <summary>
            Converts WPF Transform to DXEngine Transformation
            </summary>
            <param name="transform">WPF Transform</param>
            <returns>DXEngine Transformation</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.Update(Ab3d.DirectX.Transformation,System.Windows.Media.Media3D.Transform3D)">
            <summary>
            Updates the DXEngine's Transformation to the value of WPF Transform3D
            </summary>
            <param name="dxTransformation">DXEngine's Transformation</param>
            <param name="wpfTransform">WPF Transform3D</param>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.GetUsedDXMeshGeometry3D(System.Windows.Media.Media3D.MeshGeometry3D,Ab3d.DirectX.DXDevice)">
            <summary>
            GetUsedDXMeshGeometry3D method checks if DXMeshGeometry3D object was already created for the specified meshGeometry and returns it in that case.
            Else null is returned.
            parentDXDevice is requireed to check if the created DXMeshGeometry3D was created for the same device.
            </summary>
            <param name="meshGeometry">MeshGeometry3D used in WPF</param>
            <param name="parentDXDevice">DXDevice</param>
            <returns>already created DXMeshGeometry3D or null</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.SetUsedDXMeshGeometry3D(System.Windows.Media.Media3D.MeshGeometry3D,Ab3d.DirectX.Models.DXMeshGeometry3D,Ab3d.DirectX.DXDevice)">
            <summary>
            Sets a DXMeshGeometry3D that will be used when showing WPF MeshGeometry3D in DXEngine.
            </summary>
            <param name="wpfMeshGeometry">WPF MeshGeometry3D</param>
            <param name="dXMeshGeometry3D">DXMeshGeometry3D</param>
            <param name="parentDXDevice">DXDevice that was used to generate the dxMaterial - this parameted can be null when the dxMaterial was already initialized (in this case the parentDXDevice is get from the dxMaterial)</param>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.GetUsedDXMaterial(System.Windows.Media.Media3D.Material,Ab3d.DirectX.DXDevice)">
            <summary>
            GetUsedDXMaterial method returns a DXEngine's Material that was created from the WPF material (or null if no DXMaterial was created for the WPF material)
            parentDXDevice is requireed to check if the created DXMeshGeometry3D was created for the same device.
            </summary>
            <param name="wpfMaterial">WPF material</param>
            <param name="parentDXDevice">DXDevice that was used to initialize the DXEngine's material</param>
            <returns>created DXEngine's Material or null</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.SetUsedDXMaterial(System.Windows.Media.Media3D.Material,Ab3d.DirectX.Material,Ab3d.DirectX.DXDevice)">
            <summary>
            Sets the specified DXEngine's Material (dxMaterial) to be used when rendering the specified WPF material (wpfMaterial). It will be used when the WPF material will be shown in DXEngine (must be set before the objects are initialized in DXEngine).
            </summary>
            <param name="wpfMaterial">WPF Material</param>
            <param name="dxMaterial">DXEngine's Material</param>
            <param name="parentDXDevice">DXDevice that was used to generate the dxMaterial</param>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.SetUsedDXMaterial(System.Windows.Media.Media3D.Material,Ab3d.DirectX.Material)">
            <summary>
            Sets the specified DXEngine's Material (dxMaterial) to be used when rendering the specified WPF material (wpfMaterial). It will be used when the WPF material will be shown in DXEngine (must be set before the objects are initialized in DXEngine).
            </summary>
            <param name="wpfMaterial">WPF Material</param>
            <param name="dxMaterial">DXEngine's Material</param>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.ClearUsedDXMaterial(System.Windows.Media.Media3D.Material,Ab3d.DirectX.DXDevice)">
            <summary>
            Clears a cached DXEngine's Material that is used for the WPF material. This means that next time the WPF material will be used a new instance of DXEngine's Material will be created.
            </summary>
            <param name="wpfMaterial">WPF Material</param>
            <param name="parentDXDevice">DXDevice that was used to generate the dxMaterial</param>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.SetDXAttribute(System.Windows.Media.Media3D.Geometry3D,Ab3d.DirectX.DXAttributeType,System.Object)">
            <summary>
            Annotates the specified wpfObject with adding or updating a DXEngine's attribute to it.
            The attribute is specified with attributeType and its value.
            This can be used to annotate WPF's objects with DXEngine's attributes.
            </summary>
            <param name="meshGeometry3D">Geometry3D</param>
            <param name="attributeType">type of attribute as DXAttributeType</param>
            <param name="value">value</param>
            <exception cref="T:Ab3d.DirectX.DXAttributeException">DXAttributeException is thrown is the specified value cannot be assigned to the specified attributeType</exception>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.GetDXAttributeCollection(System.Windows.Media.Media3D.Geometry3D)">
            <summary>
            Gets a DXAttributeCollection will a collection of all DXEngine's attributes set to the specified WPF's object.
            Returns null when no DXAttributeCollection was attached to the WPF object. 
            </summary>
            <param name="wpfObject">WPF object</param>
            <returns>DXAttributeCollection will a collection of all DXEngine's attributes set to the specified WPF's object</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.GetDXAttribute(System.Windows.Media.Media3D.Geometry3D,Ab3d.DirectX.DXAttributeType)">
            <summary>
            Gets the value of the specified DXAttributeType from the specified Geometry3D.
            If the attributeType does not exists then an exception is thrown.
            Use <see cref="M:Ab3d.DirectX.Extentions.GetDXAttributeOrDefault``1(System.Windows.Media.Media3D.Geometry3D,Ab3d.DirectX.DXAttributeType)"/> or <see cref="M:Ab3d.DirectX.Extentions.GetDXAttributeOrDefault``1(System.Windows.Media.Media3D.Geometry3D,Ab3d.DirectX.DXAttributeType,``0)"/> to prevent throwing exception when the value is not set.
            </summary>
            <param name="meshGeometry3D">Geometry3D</param>
            <param name="attributeType">type of attribute as DXAttributeType</param>
            <returns>value of the specified attributeType</returns>
            <exception cref="T:Ab3d.DirectX.DXAttributeType">DXAttributeType is thrown if the attributeType was not set.</exception>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.GetDXAttributeOrDefault``1(System.Windows.Media.Media3D.Geometry3D,Ab3d.DirectX.DXAttributeType)">
            <summary>
            Gets the value of the specified DXAttributeType from the specified Geometry3D.
            If the attributeType does not exists then a default value for the type T is returned.
            </summary>
            <param name="meshGeometry3D">Geometry3D</param>
            <param name="attributeType">type of attribute as DXAttributeType</param>
            <returns>value of the specified attributeType</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.GetDXAttributeOrDefault``1(System.Windows.Media.Media3D.Geometry3D,Ab3d.DirectX.DXAttributeType,``0)">
            <summary>
            Gets the value of the specified DXAttributeType from the specified Geometry3D.
            If the attributeType does not exists then the specified defaultValue is returned.
            </summary>
            <param name="meshGeometry3D">Geometry3D</param>
            <param name="attributeType">type of attribute as DXAttributeType</param>
            <param name="defaultValue">value that is returned in case the specified attributeType is not set</param>
            <returns>value of the specified attributeType</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.IsDXAttributeSet(System.Windows.Media.Media3D.Geometry3D,Ab3d.DirectX.DXAttributeType)">
            <summary>
            Returns true if the specified attributeType was set (result is true even if the value is null).
            </summary>
            <param name="meshGeometry3D">Geometry3D</param>
            <param name="attributeType">type of attribute as DXAttributeType</param>
            <returns></returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.ClearDXAttribute(System.Windows.Media.Media3D.Geometry3D,Ab3d.DirectX.DXAttributeType)">
            <summary>
            Clears the value from DXAttributeType so that <see cref="M:Ab3d.DirectX.Extentions.IsDXAttributeSet(System.Windows.Media.Media3D.Geometry3D,Ab3d.DirectX.DXAttributeType)"/> method returns false for that DXAttributeType.
            </summary>
            <param name="meshGeometry3D">Geometry3D</param>
            <param name="attributeType">type of attribute as DXAttributeType</param>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.SetDXAttribute(System.Windows.Media.Media3D.Model3D,Ab3d.DirectX.DXAttributeType,System.Object)">
            <summary>
            Annotates the specified wpfObject with adding or updating a DXEngine's attribute to it.
            The attribute is specified with attributeType and its value.
            This can be used to annotate WPF's objects with DXEngine's attributes.
            </summary>
            <param name="model3D">Model3D</param>
            <param name="attributeType">type of attribute as DXAttributeType</param>
            <param name="value">value</param>
            <exception cref="T:Ab3d.DirectX.DXAttributeException">DXAttributeException is thrown is the specified value cannot be assigned to the specified attributeType</exception>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.GetDXAttributeCollection(System.Windows.Media.Media3D.Model3D)">
            <summary>
            Gets a DXAttributeCollection will a collection of all DXEngine's attributes set to the specified WPF's object.
            Returns null when no DXAttributeCollection was attached to the WPF object. 
            </summary>
            <param name="wpfObject">WPF object</param>
            <returns>DXAttributeCollection will a collection of all DXEngine's attributes set to the specified WPF's object</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.GetDXAttribute(System.Windows.Media.Media3D.Model3D,Ab3d.DirectX.DXAttributeType)">
            <summary>
            Gets the value of the specified DXAttributeType from the specified Model3D.
            If the attributeType does not exists then an exception is thrown.
            Use <see cref="M:Ab3d.DirectX.Extentions.GetDXAttributeOrDefault``1(System.Windows.Media.Media3D.Model3D,Ab3d.DirectX.DXAttributeType)"/> or <see cref="M:Ab3d.DirectX.Extentions.GetDXAttributeOrDefault``1(System.Windows.Media.Media3D.Model3D,Ab3d.DirectX.DXAttributeType,``0)"/> to prevent throwing exception when the value is not set.
            </summary>
            <param name="model3D">Model3D</param>
            <param name="attributeType">type of attribute as DXAttributeType</param>
            <returns>value of the specified attributeType</returns>
            <exception cref="T:Ab3d.DirectX.DXAttributeType">DXAttributeType is thrown if the attributeType was not set.</exception>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.GetDXAttributeOrDefault``1(System.Windows.Media.Media3D.Model3D,Ab3d.DirectX.DXAttributeType)">
            <summary>
            Gets the value of the specified DXAttributeType from the specified Model3D.
            If the attributeType does not exists then a default value for the type T is returned.
            </summary>
            <param name="model3D">Model3D</param>
            <param name="attributeType">type of attribute as DXAttributeType</param>
            <returns>value of the specified attributeType</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.GetDXAttributeOrDefault``1(System.Windows.Media.Media3D.Model3D,Ab3d.DirectX.DXAttributeType,``0)">
            <summary>
            Gets the value of the specified DXAttributeType from the specified Model3D.
            If the attributeType does not exists then the specified defaultValue is returned.
            </summary>
            <param name="model3D">Model3D</param>
            <param name="attributeType">type of attribute as DXAttributeType</param>
            <param name="defaultValue">value that is returned in case the specified attributeType is not set</param>
            <returns>value of the specified attributeType</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.IsDXAttributeSet(System.Windows.Media.Media3D.Model3D,Ab3d.DirectX.DXAttributeType)">
            <summary>
            Returns true if the specified attributeType was set (result is true even if the value is null).
            </summary>
            <param name="model3D">Model3D</param>
            <param name="attributeType">type of attribute as DXAttributeType</param>
            <returns></returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.ClearDXAttribute(System.Windows.Media.Media3D.Model3D,Ab3d.DirectX.DXAttributeType)">
            <summary>
            Clears the value from DXAttributeType so that <see cref="M:Ab3d.DirectX.Extentions.IsDXAttributeSet(System.Windows.Media.Media3D.Model3D,Ab3d.DirectX.DXAttributeType)"/> method returns false for that DXAttributeType.
            </summary>
            <param name="model3D">Model3D</param>
            <param name="attributeType">type of attribute as DXAttributeType</param>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.SetDXAttribute(System.Windows.Media.Media3D.Visual3D,Ab3d.DirectX.DXAttributeType,System.Object)">
            <summary>
            Annotates the specified wpfObject with adding or updating a DXEngine's attribute to it.
            The attribute is specified with attributeType and its value.
            This can be used to annotate WPF's objects with DXEngine's attributes.
            </summary>
            <param name="visual3D">Visual3D</param>
            <param name="attributeType">type of attribute as DXAttributeType</param>
            <param name="value">value</param>
            <exception cref="T:Ab3d.DirectX.DXAttributeException">DXAttributeException is thrown is the specified value cannot be assigned to the specified attributeType</exception>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.GetDXAttributeCollection(System.Windows.Media.Media3D.Visual3D)">
            <summary>
            Gets a DXAttributeCollection will a collection of all DXEngine's attributes set to the specified WPF's object.
            Returns null when no DXAttributeCollection was attached to the WPF object. 
            </summary>
            <param name="wpfObject">WPF object</param>
            <returns>DXAttributeCollection will a collection of all DXEngine's attributes set to the specified WPF's object</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.GetDXAttribute(System.Windows.Media.Media3D.Visual3D,Ab3d.DirectX.DXAttributeType)">
            <summary>
            Gets the value of the specified DXAttributeType from the specified Visual3D.
            If the attributeType does not exists then an exception is thrown.
            Use <see cref="M:Ab3d.DirectX.Extentions.GetDXAttributeOrDefault``1(System.Windows.Media.Media3D.Visual3D,Ab3d.DirectX.DXAttributeType)"/> or <see cref="M:Ab3d.DirectX.Extentions.GetDXAttributeOrDefault``1(System.Windows.Media.Media3D.Visual3D,Ab3d.DirectX.DXAttributeType,``0)"/> to prevent throwing exception when the value is not set.
            </summary>
            <param name="visual3D">Visual3D</param>
            <param name="attributeType">type of attribute as DXAttributeType</param>
            <returns>value of the specified attributeType</returns>
            <exception cref="T:Ab3d.DirectX.DXAttributeType">DXAttributeType is thrown if the attributeType was not set.</exception>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.GetDXAttributeOrDefault``1(System.Windows.Media.Media3D.Visual3D,Ab3d.DirectX.DXAttributeType)">
            <summary>
            Gets the value of the specified DXAttributeType from the specified Visual3D.
            If the attributeType does not exists then a default value for the type T is returned.
            </summary>
            <param name="visual3D">Visual3D</param>
            <param name="attributeType">type of attribute as DXAttributeType</param>
            <returns>value of the specified attributeType</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.GetDXAttributeOrDefault``1(System.Windows.Media.Media3D.Visual3D,Ab3d.DirectX.DXAttributeType,``0)">
            <summary>
            Gets the value of the specified DXAttributeType from the specified Visual3D.
            If the attributeType does not exists then the specified defaultValue is returned.
            </summary>
            <param name="visual3D">Visual3D</param>
            <param name="attributeType">type of attribute as DXAttributeType</param>
            <param name="defaultValue">value that is returned in case the specified attributeType is not set</param>
            <returns>value of the specified attributeType</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.IsDXAttributeSet(System.Windows.Media.Media3D.Visual3D,Ab3d.DirectX.DXAttributeType)">
            <summary>
            Returns true if the specified attributeType was set (result is true even if the value is null).
            </summary>
            <param name="visual3D">Visual3D</param>
            <param name="attributeType">type of attribute as DXAttributeType</param>
            <returns></returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.ClearDXAttribute(System.Windows.Media.Media3D.Visual3D,Ab3d.DirectX.DXAttributeType)">
            <summary>
            Clears the value from DXAttributeType so that <see cref="M:Ab3d.DirectX.Extentions.IsDXAttributeSet(System.Windows.Media.Media3D.Visual3D,Ab3d.DirectX.DXAttributeType)"/> method returns false for that DXAttributeType.
            </summary>
            <param name="visual3D">Visual3D</param>
            <param name="attributeType">type of attribute as DXAttributeType</param>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.SetDXAttribute(System.Windows.Media.Media3D.Material,Ab3d.DirectX.DXAttributeType,System.Object)">
            <summary>
            Annotates the specified wpfObject with adding or updating a DXEngine's attribute to it.
            The attribute is specified with attributeType and its value.
            This can be used to annotate WPF's objects with DXEngine's attributes.
            </summary>
            <param name="material">System.Windows.Media.Media3D.Material</param>
            <param name="attributeType">type of attribute as DXAttributeType</param>
            <param name="value">value</param>
            <exception cref="T:Ab3d.DirectX.DXAttributeException">DXAttributeException is thrown is the specified value cannot be assigned to the specified attributeType</exception>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.GetDXAttributeCollection(System.Windows.Media.Media3D.Material)">
            <summary>
            Gets a DXAttributeCollection will a collection of all DXEngine's attributes set to the specified WPF's object.
            Returns null when no DXAttributeCollection was attached to the WPF object. 
            </summary>
            <param name="wpfObject">WPF object</param>
            <returns>DXAttributeCollection will a collection of all DXEngine's attributes set to the specified WPF's object</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.GetDXAttribute(System.Windows.Media.Media3D.Material,Ab3d.DirectX.DXAttributeType)">
            <summary>
            Gets the value of the specified DXAttributeType from the specified System.Windows.Media.Media3D.Material.
            If the attributeType does not exists then an exception is thrown.
            Use <see cref="M:Ab3d.DirectX.Extentions.GetDXAttributeOrDefault``1(System.Windows.Media.Media3D.Material,Ab3d.DirectX.DXAttributeType)"/> or <see cref="M:Ab3d.DirectX.Extentions.GetDXAttributeOrDefault``1(System.Windows.Media.Media3D.Material,Ab3d.DirectX.DXAttributeType,``0)"/> to prevent throwing exception when the value is not set.
            </summary>
            <param name="material">System.Windows.Media.Media3D.Material</param>
            <param name="attributeType">type of attribute as DXAttributeType</param>
            <returns>value of the specified attributeType</returns>
            <exception cref="T:Ab3d.DirectX.DXAttributeType">DXAttributeType is thrown if the attributeType was not set.</exception>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.GetDXAttributeOrDefault``1(System.Windows.Media.Media3D.Material,Ab3d.DirectX.DXAttributeType)">
            <summary>
            Gets the value of the specified DXAttributeType from the specified System.Windows.Media.Media3D.Material.
            If the attributeType does not exists then a default value for the type T is returned.
            </summary>
            <param name="material">System.Windows.Media.Media3D.Material</param>
            <param name="attributeType">type of attribute as DXAttributeType</param>
            <returns>value of the specified attributeType</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.GetDXAttributeOrDefault``1(System.Windows.Media.Media3D.Material,Ab3d.DirectX.DXAttributeType,``0)">
            <summary>
            Gets the value of the specified DXAttributeType from the specified System.Windows.Media.Media3D.Material.
            If the attributeType does not exists then the specified defaultValue is returned.
            </summary>
            <param name="material">System.Windows.Media.Media3D.Material</param>
            <param name="attributeType">type of attribute as DXAttributeType</param>
            <param name="defaultValue">value that is returned in case the specified attributeType is not set</param>
            <returns>value of the specified attributeType</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.IsDXAttributeSet(System.Windows.Media.Media3D.Material,Ab3d.DirectX.DXAttributeType)">
            <summary>
            Returns true if the specified attributeType was set (result is true even if the value is null).
            </summary>
            <param name="material">System.Windows.Media.Media3D.Material</param>
            <param name="attributeType">type of attribute as DXAttributeType</param>
            <returns></returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.ClearDXAttribute(System.Windows.Media.Media3D.Material,Ab3d.DirectX.DXAttributeType)">
            <summary>
            Clears the value from DXAttributeType so that <see cref="M:Ab3d.DirectX.Extentions.IsDXAttributeSet(System.Windows.Media.Media3D.Material,Ab3d.DirectX.DXAttributeType)"/> method returns false for that DXAttributeType.
            </summary>
            <param name="material">System.Windows.Media.Media3D.Material</param>
            <param name="attributeType">type of attribute as DXAttributeType</param>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.GetGeometryModel3D(Ab3d.DirectX.SceneNode)">
            <summary>
            Returns a WPF's GeometryModel3D that was used to create the specified sceneNode.
            If the sceneNode does not define a GeometryModel3D object, then null is returned.
            </summary>
            <param name="sceneNode">SceneNode</param>
            <returns>GeometryModel3D or null</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.GetModel3D(Ab3d.DirectX.SceneNode)">
            <summary>
            Returns a WPF's Model3D that was used to create the specified sceneNode.
            If the sceneNode does not define a Model3D object, then null is returned.
            </summary>
            <param name="sceneNode">SceneNode</param>
            <returns>Model3D or null</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.GetModelVisual3D(Ab3d.DirectX.SceneNode,System.Boolean)">
            <summary>
            Returns a WPF's ModelVisual3D that was used to create the specified sceneNode or any parent SceneNode (in case searchParentSceneNodes is true).
            If a SceneNode that defines a ModelVisual3D is not found, then null is returned.
            </summary>
            <param name="sceneNode">SceneNode</param>
            <param name="searchParentSceneNodes">when true parent SceneNodes are checked if they define the ModelVisual3D</param>
            <returns>ModelVisual3D or null</returns>
        </member>
        <member name="M:Ab3d.DirectX.Extentions.GetVisual3D(Ab3d.DirectX.SceneNode,System.Boolean)">
            <summary>
            Returns a WPF's Visual3D that was used to create the specified sceneNode or any parent SceneNode (in case searchParentSceneNodes is true).
            If a SceneNode that defines a Visual3D is not found, then null is returned.
            </summary>
            <param name="sceneNode">SceneNode</param>
            <param name="searchParentSceneNodes">when true parent SceneNodes are checked if they define the Visual3D</param>
            <returns>Visual3D or null</returns>
        </member>
        <member name="T:Ab3d.DirectX.Materials.DXCubeMap">
            <summary>
            DXCubeMap class is used to create a cube map that can be used in DXEngine. Cube map is created from 6 textures - each for one side of the cube.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Materials.DXCubeMap.FlipBitmapType">
            <summary>
            Type of flip operaton that can be done on the bitmap
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Materials.DXCubeMap.FlipBitmapType.None">
            <summary>
            Preserve original bitmap
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Materials.DXCubeMap.FlipBitmapType.FlipX">
            <summary>
            Flip horizontally
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Materials.DXCubeMap.FlipBitmapType.FlipY">
            <summary>
            Flip vertically
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Materials.DXCubeMap.FlipBitmapType.FlipXY">
            <summary>
            Flip horizontally and vertically
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.DXCubeMap.ShaderResourceView">
            <summary>
            Gets the ShaderResourceView that represents a CubeMap and can be used in DirectX.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Materials.DXCubeMap.#ctor(System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Imaging.BitmapSource,Ab3d.DirectX.DXDevice)">
            <summary>
            CreateFromBitmapSources method creates a cube map (as ShaderResourceView) from 6 different BitmapSources.
            Each bitmap image can be also flipped if needed.
            </summary>
            <param name="rightBitmapSource">rightBitmapSource</param>
            <param name="leftBitmapSource">leftBitmapSource</param>
            <param name="upBitmapSource">upBitmapSource</param>
            <param name="downBitmapSource">downBitmapSource</param>
            <param name="frontBitmapSource">frontBitmapSource</param> 
            <param name="backBitmapSource">backBitmapSource</param>
            <param name="dxDevice">DXDevice</param>
            <returns>ShaderResourceView with cube map</returns>
        </member>
        <member name="M:Ab3d.DirectX.Materials.DXCubeMap.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,Ab3d.DirectX.DXDevice)">
            <summary>
            CreateFromBitmapSources method creates a cube map (as ShaderResourceView) from 6 different resource names that represent BitmapImages.
            Each bitmap image can be also flipped if needed.
            </summary>
            <param name="packUriPrefix">prefix of the full uri pack resource name that will be added before each resource name - for example: pack://application:,,,/Ab3d.DXEngine.Wpf.Samples;component/Resources/SkyboxTextures/</param>
            <param name="rightBitmapResourceName">rightBitmapResourceName</param>
            <param name="leftBitmapResourceName">leftBitmapResourceName</param>
            <param name="upBitmapResourceName">upBitmapResourceName</param>
            <param name="downBitmapResourceName">downBitmapResourceName</param>
            <param name="frontBitmapResourceName">frontBitmapResourceName</param>
            <param name="backBitmapResourceName">backBitmapResourceName</param>
            <param name="dxDevice">DXDevice</param>
            <returns>ShaderResourceView with cube map</returns>
        </member>
        <member name="M:Ab3d.DirectX.Materials.DXCubeMap.FlipBitmaps(Ab3d.DirectX.Materials.DXCubeMap.FlipBitmapType,Ab3d.DirectX.Materials.DXCubeMap.FlipBitmapType,Ab3d.DirectX.Materials.DXCubeMap.FlipBitmapType,Ab3d.DirectX.Materials.DXCubeMap.FlipBitmapType,Ab3d.DirectX.Materials.DXCubeMap.FlipBitmapType,Ab3d.DirectX.Materials.DXCubeMap.FlipBitmapType)">
            <summary>
            FlipBitmaps can be used to flip some bitmaps vertically or horizontally.
            </summary>
            <param name="flipRightBitmapType">type of flip for right bitmap</param>
            <param name="flipLeftBitmapType">type of flip for left bitmap</param>
            <param name="flipUpBitmapType">type of flip for up bitmap</param>
            <param name="flipDownBitmapType">type of flip for bottom bitmap</param>
            <param name="flipFrontBitmapType">type of flip for front bitmap</param>
            <param name="flipBackBitmapType">type of flip for back bitmap</param>
        </member>
        <member name="M:Ab3d.DirectX.Materials.DXCubeMap.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxDevice">Parent DXDevice used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.Materials.DXCubeMap.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Materials.ModelColorLineMaterial">
            <summary>
            ModelColorLineMaterial class is similar to LineMaterial but instead of specifying a fixed line color, the color of the line color is get from the color of the Model's material.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.ModelColorLineMaterial.LineColor">
            <summary>
            Gets the color of the line that is determined from the WpfModel material.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.ModelColorLineMaterial.LineThickness">
            <summary>
            Thickness of the line in screen space units.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.ModelColorLineMaterial.ReadZBuffer">
            <summary>
            Gets or sets a Boolean that specifies if Z buffer is read when rendering the line - if the depth test is done when rendering the line.
            If false then the line is rendered regardless of its depth - if is rendered even if it is behind some other 3D objects.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.ModelColorLineMaterial.WriteZBuffer">
            <summary>
            Gets or sets a Boolean that specifies if Z buffer is written when rendering the line - if the line can occlude other 3D objects.
            If true then the objects behind the line will not be rendered. If false the line will not prevent rendering objects behind it.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.ModelColorLineMaterial.DepthBias">
            <summary>
            Gets a float that specifies a bias that is used when doing a depth test.
            A bias is a value that specifies how much the line is moved closer to the camera. The value is specified in world coordinates.
            When camera is farther away from the object, then a bigger DepthBias is needed.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.ModelColorLineMaterial.DefaultLineColor">
            <summary>
            Color of the line that is used when the color cannot be determined from WPF material
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.ModelColorLineMaterial.WpfModel">
            <summary>
            Wpf model used to get the line color from.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Materials.ModelColorLineMaterial.#ctor(System.Windows.Media.Media3D.GeometryModel3D,SharpDX.Color4)">
            <summary>
            Constructor
            </summary>
            <param name="wpfModel">wpf Model</param>
            <param name="defaultLineColor">defaultLineColor as Color4</param>
        </member>
        <member name="T:Ab3d.DirectX.Materials.WpfMaterial">
            <summary>
            WpfMaterial is a class that gets a WPF Material and converts it into a material that can be used by Ab3d.DXEngine.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Materials.WpfMaterial.DefaultVisualBrushTextureSize">
            <summary>
            DefaultVisualBrushTextureSize static field defines the width and height of the RenderTargetBitmap that is created when a VisualBrush is rendered into texture that is used in DXEngine.
            The value can be overridden by RenderedBrushTextureWidth and RenderedBrushTextureHeight properties.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="F:Ab3d.DirectX.Materials.WpfMaterial.DefaultGradientBrushTextureSize">
            <summary>
            DefaultGradientBrushTextureSize static field defines the width and height of the RenderTargetBitmap that is created when a GradientBrush (LinearGradientBrush or RadialGradientBrush) is rendered into texture that is used in DXEngine.
            The value can be overridden by RenderedBrushTextureWidth and RenderedBrushTextureHeight properties.
            </summary>
            <remarks>
            <para>
            <b>DefaultGradientBrushTextureSizestatic</b> static field defines the width and height of the RenderTargetBitmap that is created when a GradientBrush (LinearGradientBrush or RadialGradientBrush) is rendered into texture that is used in DXEngine.
            </para>
            <para>
            The value can be overridden by RenderedBrushTextureWidth and RenderedBrushTextureHeight properties.
            </para>
            <para>
            When a vertical LinearGradientBrush is rendered, the RenderTargetBitmap height is set to 1 and width is set to DefaultGradientBrushTextureSize (or <see cref="P:Ab3d.DirectX.Materials.WpfMaterial.RenderedBrushTextureWidth"/> when set).
            Also when a horizontal LinearGradientBrush is rendered, the RenderTargetBitmap width is set to 1 and height is set to DefaultGradientBrushTextureSize (or <see cref="P:Ab3d.DirectX.Materials.WpfMaterial.RenderedBrushTextureHeight"/> when set).
            </para>
            </remarks>
        </member>
        <member name="F:Ab3d.DirectX.Materials.WpfMaterial.LoadDdsIfAvailable">
            <summary>
            When LoadDdsIfAvailable is set to true (false by default) the texture loader will check if there is a dds file with the same name but dds file extension.
            If dds file exist, it is loaded instead of the specified file. This can greatly improve load performance and memory usage.
            The check is done only on BitmapImages that do not have CacheOption set to OnLoad - in this case the bitmap is already loaded into BitmapImage.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.WpfMaterial.RenderedBrushTextureWidth">
            <summary>
            When set to a value bigger than 0, than this property defines the width of the RenderTargetBitmap that is created when a VisualBrush, GradientBrush (LinearGradientBrush or RadialGradientBrush) or DrawingImage is rendered into texture that is used in DXEngine.
            When value is 0 or less then the <see cref="F:Ab3d.DirectX.Materials.WpfMaterial.DefaultVisualBrushTextureSize"/> or <see cref="F:Ab3d.DirectX.Materials.WpfMaterial.DefaultGradientBrushTextureSize"/> is used (in case of rendering DrawingImage this value can be 0 and if <see cref="P:Ab3d.DirectX.Materials.WpfMaterial.RenderedBrushTextureHeight"/> is set, the width will be calculate to preserve the aspect ratio).
            This value can be also set with using the <see cref="M:Ab3d.DirectX.Extentions.SetDXAttribute(System.Windows.Media.Media3D.Material,Ab3d.DirectX.DXAttributeType,System.Object)"/> method on WPF's material with <see cref="F:Ab3d.DirectX.DXAttributeType.CachedBitmapSize"/> attribute.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.WpfMaterial.RenderedBrushTextureHeight">
            <summary>
            When set to a value bigger than 0, than this property defines the height of the RenderTargetBitmap that is created when a VisualBrush, GradientBrush (LinearGradientBrush or RadialGradientBrush) or DrawingImage is rendered into texture that is used in DXEngine.
            When value is 0 or less then the <see cref="F:Ab3d.DirectX.Materials.WpfMaterial.DefaultVisualBrushTextureSize"/> or <see cref="F:Ab3d.DirectX.Materials.WpfMaterial.DefaultGradientBrushTextureSize"/> is used (in case of rendering DrawingImage this value can be 0 and if <see cref="P:Ab3d.DirectX.Materials.WpfMaterial.RenderedBrushTextureWidth"/> is set, the height will be calculate to preserve the aspect ratio).
            This value can be also set with using the <see cref="M:Ab3d.DirectX.Extentions.SetDXAttribute(System.Windows.Media.Media3D.Material,Ab3d.DirectX.DXAttributeType,System.Object)"/> method on WPF's material with <see cref="F:Ab3d.DirectX.DXAttributeType.CachedBitmapSize"/> attribute.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.WpfMaterial.Material">
            <summary>
            Gets a WPF Material that is used by this WpfMaterial object instance.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.WpfMaterial.HasImageInvertedYTransformation">
            <summary>
            If true then the texture image has a transformation that flips the texture vertically. This property is used by DXEngine to optimize the rendering of a texture.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.WpfMaterial.TextureCoordinatesBounds">
            <summary>
            TextureCoordinatesBounds contains the bounding value of the mesh's texture coordinates - needed when drawing texture and texture coordinates size is not 1.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.WpfMaterial.IsDirty">
            <summary>
            Gets or sets a Boolean that specifies if the properties of the used WPF material have changed and we need to call UpdateMaterial method to update the properties of this material.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.WpfMaterial.IsRenderToBitmapRequired">
            <summary>
            Gets a Boolean that specifies if this material is a complex material (VisualBrush, Gradient, DrawingImage, etc.)
            and require calling RenderToBitmap method to get a bitmap that will be used as a texture.
            This property is false for solid color materials and materials with BitmapImages.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.WpfMaterial.RenderToBitmapOnEveryFrame">
            <summary>
            Gets or sets a Boolean that can be specifies to true to render the material to bitmap on each rendered frame (used only in case of VisualBrush, GradientBrush or DrawingImage).
            This can be used to render animating VisualBrush. 
            Use this property with caution because it can greatly decrease performance. 
            In this case it is recommended to lower the resolution of the rendered bitmap with setting the <see cref="P:Ab3d.DirectX.Materials.WpfMaterial.RenderedBrushTextureWidth"/> or <see cref="P:Ab3d.DirectX.Materials.WpfMaterial.RenderedBrushTextureHeight"/>
            or using <see cref="F:Ab3d.DirectX.DXAttributeType.CachedBitmapSize"/> DXAttribute.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.WpfMaterial.CachedConstantBuffers">
            <summary>
            Gets or sets an array of DirectX Constant buffers that can be created for this instance of Material.
            The buffers can be created in Effects and can be reused for multiple frames when the material is not changed.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.WpfMaterial.ConstantBuffersVersion">
            <summary>
            Gets or sets a version that was read from Material's Version at the time of creating the CachedConstantBuffers
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Materials.WpfMaterial.#ctor(System.Windows.Media.Media3D.Material)">
            <summary>
            Constructor
            </summary>
            <param name="material">WPF material</param>
        </member>
        <member name="M:Ab3d.DirectX.Materials.WpfMaterial.#ctor(System.Windows.Media.Media3D.Material,System.Windows.Rect)">
            <summary>
            Constructor
            </summary>
            <param name="material">WPF material</param>
            <param name="textureCoordinatesBounds">bounding value of the mesh's texture coordinates</param>
        </member>
        <member name="M:Ab3d.DirectX.Materials.WpfMaterial.#ctor(System.Windows.Media.Media3D.Material,Ab3d.DirectX.DXDevice)">
            <summary>
            Constructor
            </summary>
            <param name="material">WPF material</param>
            <param name="dxDevice">DXDevice</param>
        </member>
        <member name="M:Ab3d.DirectX.Materials.WpfMaterial.#ctor(System.Windows.Media.Media3D.Material,System.Windows.Rect,Ab3d.DirectX.DXDevice)">
            <summary>
            Constructor
            </summary>
            <param name="material">WPF material</param>
            <param name="textureCoordinatesBounds">bounding value of the mesh's texture coordinates</param>
            <param name="dxDevice">DXDevice</param>
        </member>
        <member name="M:Ab3d.DirectX.Materials.WpfMaterial.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            OnInitializeResources
            </summary>
            <param name="dxDevice">DXDevice</param>
        </member>
        <member name="M:Ab3d.DirectX.Materials.WpfMaterial.CreateLineMaterial(System.Windows.Media.Media3D.Material,System.Windows.Media.Color,System.Double)">
            <summary>
            CreateLineMaterial converts WPF's material into DXEngine's LineMaterial. Line's color is get from DiffuseMaterial or EmissiveMaterial if present (else default color is used).
            </summary>
            <param name="material">WPF's material</param>
            <param name="defaultColor">color that is used if it cannot be get from WPF material</param>
            <param name="lineThickness">line thickness</param>
            <returns>DXEngine's LineMaterial</returns>
        </member>
        <member name="M:Ab3d.DirectX.Materials.WpfMaterial.CreateLineMaterial(System.Windows.Media.Media3D.Material,SharpDX.Color4,System.Single)">
            <summary>
            CreateLineMaterial converts WPF's material into DXEngine's LineMaterial. Line's color is get from DiffuseMaterial or EmissiveMaterial if present (else default color is used).
            </summary>
            <param name="material">WPF's material</param>
            <param name="defaultColor">color that is used if it cannot be get from WPF material</param>
            <param name="lineThickness">line thickness</param>
            <returns>DXEngine's LineMaterial</returns>
        </member>
        <member name="M:Ab3d.DirectX.Materials.WpfMaterial.Refresh">
            <summary>
            Refresh method updates the values of the properties used by Ab3d.DXEngine with reading the values from the used WPF Material.
            The method also recreates any textures that were created from WPF Material.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Materials.WpfMaterial.GetDefaultRenderingQueue(Ab3d.DirectX.DXScene)">
            <summary>
            Returns the RenderingQueue that should be used to render this material.
            The method returns <see cref="P:Ab3d.DirectX.DXScene.TransparentRenderingQueue"/> or <see cref="P:Ab3d.DirectX.DXScene.StandardGeometryRenderingQueue"/> based on the HasTransparency value.
            </summary>
            <param name="parentDXScene">DXScene</param>
            <returns>RenderingQueue that should be used to render this material</returns>
        </member>
        <member name="M:Ab3d.DirectX.Materials.WpfMaterial.LoadTexture2D(Ab3d.DirectX.DXDevice,System.String)">
            <summary>
            LoadTexture2D loads a 2D Texture from the specified fileName and returns a ShaderResourceView for the texture.
            User must dispose the returned ShaderResourceView when it is not used any more to prevent memory leak.
            This method uses WPF's image loader - to load the image directly into DirectX use the <see cref="M:Ab3d.DirectX.TextureLoader.LoadShaderResourceView(SharpDX.Direct3D11.Device,System.String,Ab3d.DirectX.TextureInfo@)"/> or <see cref="M:Ab3d.DirectX.TextureLoader.LoadShaderResourceView(SharpDX.Direct3D11.Device,System.String,System.Boolean,System.Boolean,System.Boolean,Ab3d.DirectX.TextureInfo@)"/> methods instead.
            </summary>
            <param name="dxDevice">DXDevice used to create the texture</param>
            <param name="fileName">file name of the texture</param>
            <returns>ShaderResourceView for the loaded 2D Texture or null if the texture cannot be created.</returns>
        </member>
        <member name="M:Ab3d.DirectX.Materials.WpfMaterial.CreateTexture2D(Ab3d.DirectX.DXDevice,System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            CreateTexture2D creates a 2D Texture from the specified WPF BitmapSource and returns a ShaderResourceView for the texture.
            User must dispose the returned ShaderResourceView when it is not used any more to prevent memory leak.
            </summary>
            <param name="dxDevice">DXDevice used to create the texture</param>
            <param name="wpfBitmapSource">BitmapSource</param>
            <returns>ShaderResourceView created from the specified WPF BitmapSource or null if the texture cannot be created.</returns>
        </member>
        <member name="M:Ab3d.DirectX.Materials.WpfMaterial.LoadTexture2D(Ab3d.DirectX.DXDevice,System.String,Ab3d.DirectX.TextureInfo@)">
            <summary>
            LoadTexture2D loads a 2D Texture from the specified fileName and returns a ShaderResourceView for the texture.
            User must dispose the returned ShaderResourceView when it is not used any more to prevent memory leak.
            This method uses WPF's image loader - to load the image directly into DirectX use the <see cref="M:Ab3d.DirectX.TextureLoader.LoadShaderResourceView(SharpDX.Direct3D11.Device,System.String,Ab3d.DirectX.TextureInfo@)"/> or <see cref="M:Ab3d.DirectX.TextureLoader.LoadShaderResourceView(SharpDX.Direct3D11.Device,System.String,System.Boolean,System.Boolean,System.Boolean,Ab3d.DirectX.TextureInfo@)"/> methods instead.
            </summary>
            <param name="dxDevice">DXDevice used to create the texture</param>
            <param name="fileName">file name of the texture</param>
            <param name="textureInfo">TextureInfo class that provides information about the loaded bitmap</param>
            <returns>ShaderResourceView for the loaded 2D Texture or null if the texture cannot be created.</returns>
        </member>
        <member name="M:Ab3d.DirectX.Materials.WpfMaterial.CreateTexture2D(Ab3d.DirectX.DXDevice,System.Windows.Media.Imaging.BitmapSource,Ab3d.DirectX.TextureInfo@)">
            <summary>
            CreateTexture2D creates a 2D Texture from the specified WPF BitmapSource and returns a ShaderResourceView for the texture.
            User must dispose the returned ShaderResourceView when it is not used any more to prevent memory leak.
            </summary>
            <param name="dxDevice">DXDevice used to create the texture</param>
            <param name="wpfBitmapSource">BitmapSource</param>
            <param name="textureInfo">TextureInfo class that provides information about the loaded bitmap</param>
            <returns>ShaderResourceView created from the specified WPF BitmapSource or null if the texture cannot be created.</returns>
        </member>
        <member name="M:Ab3d.DirectX.Materials.WpfMaterial.GetUsedDXMaterial(System.Windows.Media.Media3D.Material,Ab3d.DirectX.DXDevice)">
            <summary>
            GetUsedDXMaterial method returns a DXEngine's Material that was created from the WPF material (or null if no DXMaterial was created for the WPF material)
            parentDXDevice is requireed to check if the created DXMeshGeometry3D was created for the same device.
            </summary>
            <param name="wpfMaterial">WPF material</param>
            <param name="parentDXDevice">DXDevice that was used to generate the dxMaterial</param>
            <returns>created DXEngine's Material or null</returns>
        </member>
        <member name="M:Ab3d.DirectX.Materials.WpfMaterial.SetUsedDXMaterial(System.Windows.Media.Media3D.Material,Ab3d.DirectX.Material,Ab3d.DirectX.DXDevice)">
            <summary>
            Sets the specified DXEngine's Material (dxMaterial) to be used when rendering the specified WPF material (wpfMaterial). It will be used when the WPF material will be shown in DXEngine (must be set before the objects are initialized in DXEngine).
            </summary>
            <param name="wpfMaterial">WPF Material</param>
            <param name="dxMaterial">DXEngine's Material (if null, then the cached value is cleared)</param>
            <param name="parentDXDevice">DXDevice that was used to generate the dxMaterial</param>
        </member>
        <member name="M:Ab3d.DirectX.Materials.WpfMaterial.SetUsedDXMaterial(System.Windows.Media.Media3D.Material,Ab3d.DirectX.Material)">
            <summary>
            Sets the specified DXEngine's Material (dxMaterial) to be used when rendering the specified WPF material (wpfMaterial). It will be used when the WPF material will be shown in DXEngine (must be set before the objects are initialized in DXEngine).
            </summary>
            <param name="wpfMaterial">WPF Material</param>
            <param name="dxMaterial">DXEngine's Material (if null, then the cached value is cleared)</param>
        </member>
        <member name="M:Ab3d.DirectX.Materials.WpfMaterial.ClearUsedDXMaterial(System.Windows.Media.Media3D.Material,Ab3d.DirectX.DXDevice)">
            <summary>
            Clears a cached DXEngine's Material that is used for the WPF material. This means that next time the WPF material will be used a new instance of DXEngine's Material will be created.
            </summary>
            <param name="wpfMaterial">WPF Material</param>
            <param name="parentDXDevice">DXDevice that was used to generate the dxMaterial</param>
            <returns>Returns true if the cached DXEngine's material was found and removed for the specified wpfMaterial; returns false if cached DXEngine's material was not found</returns>
        </member>
        <member name="P:Ab3d.DirectX.Materials.WpfMaterial.EnvironmentalCubeMap">
            <summary>
            Gets ShaderResourceView that defines the EnvironmentalCubeMap. 
            ShaderResourceView should define a cube map with 6 textures for each side of the cube.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.WpfMaterial.ReflectionFactor">
            <summary>
            Gets reflection factor from 0 to 1 that is used when <see cref="P:Ab3d.DirectX.Materials.WpfMaterial.ReflectionMap"/> is null. 
            Values 1 means full reflection (only enviromental map will be shown) and 0 means that only diffuse material without environmental map is shown.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.WpfMaterial.ReflectionMap">
            <summary>
            Gets ShaderResourceView that defines the reflection map where white colors mean fully reflective image and black colors mean no reflection (fully diffuse).
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.WpfMaterial.HasTransparency">
            <summary>
            Gets a boolean that specifies if this material is semi-transparent and needs to be alpha blended with the scene.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.WpfMaterial.Alpha">
            <summary>
            Gets a float value that defines the alpha value for the material.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.WpfMaterial.AmbientColor">
            <summary>
            Gets a Color3 that specifies an color that defines how much ambient color is reflected by this material.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.WpfMaterial.DiffuseColor">
            <summary>
            Gets a Color3 that specifies the diffuse color of this material.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.WpfMaterial.IsPreMultipliedAlphaColor">
            <summary>
            When IsPreMultipliedAlphaColor is true (false by default) and Alpha is less then 1, then the color components of the <see cref="P:Ab3d.DirectX.Materials.WpfMaterial.DiffuseColor"/> are multiplied with alpha value to produce pre-multiplied alpha colors.
            When false, then non-pre-multiplied color is converted to pre-multiplied color when this is required by the shader.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.WpfMaterial.TextureResourceName">
            <summary>
            Gets a string that can be used to specify the name of the texture - this can be a the file name of the texture file.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.WpfMaterial.DiffuseTextures">
            <summary>
            Gets an array of ShaderResourceView that define the textures.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.WpfMaterial.SamplerStates">
            <summary>
            Gets an array of SamplerState that define the state of the samplers.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.WpfMaterial.TextureBlendState">
            <summary>
            Gets a BlendState that is used to render the texture. If null a CommonStates.Opaque will be used.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.WpfMaterial.AlphaClipThreshold">
            <summary>
            Pixels with alpha color values below this value will be clipped (not rendered and their depth will not be written to depth buffer).
            Expected values are between 0 and 1.
            When 0 (by default) then alpha clipping is disabled - this means that also pixels with alpha value 0 are fully processed (they are not visible but its depth value is still written so objects that are rendered afterwards and are behind the pixel will not be visible).
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.WpfMaterial.HasSpecularColor">
            <summary>
            Gets a boolean that specifies if specular material is used by the WpfMaterial
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.WpfMaterial.SpecularColor">
            <summary>
            Gets the Color3 that specifies the color used to draw the specular highlight effect.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.WpfMaterial.SpecularPower">
            <summary>
            Gets a float that specifies the power of the specular effect. Zero values means that the specular effect is turned off.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.WpfMaterial.EmissiveColor">
            <summary>
            Gets a Color3 that that represents the emissive color - the color of the object regardless of the lights.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Materials.WpfMaterial.HasOnlyEmissiveColor">
            <summary>
            Gets a Boolean that specifies if this material has only emissive color.
            If false than other material properties are also defined.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Materials.WpfMaterial.Clone">
            <summary>
            Clones the current material with creating a shallow copy of this Material (properties are copied but referenced objects are preserved).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ab3d.DirectX.Materials.WpfMaterial.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="M:Ab3d.DirectX.Materials.WpfMaterial.ToString">
            <summary>
            Provides a formated text of this WpfMaterial
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ab3d.DirectX.Models.BaseWpfObjectNode">
            <summary>
            BaseWpfObjectNode is a SceneNode that can be used as a base object for DXEngine wrapper around WPF 3D object.
            The class provide DependencyProperty and DXAttribute change notifications.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Models.BaseWpfObjectNode.wpfObject">
            <summary>
            WPF DependencyObject that is represented by this class.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Models.BaseWpfObjectNode.dxAttributeCollection">
            <summary>
            DXAttributeCollection that is set to the WPF object. To set the value call the <see cref="M:Ab3d.DirectX.Models.BaseWpfObjectNode.CheckDXAttributeCollection(System.Boolean)"/> method.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.BaseWpfObjectNode.#ctor(System.Windows.DependencyObject,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="wpfObject">DependencyObject</param>
            <param name="name">name</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.BaseWpfObjectNode.CheckDXAttributeCollection(System.Boolean)">
            <summary>
            Updates the value of <see cref="F:Ab3d.DirectX.Models.BaseWpfObjectNode.dxAttributeCollection"/> from the WPF object.
            </summary>
            <param name="subscribeToChanges">when true, this object will be subscribed to DXAttributeCollection changes</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.BaseWpfObjectNode.GetCustomRenderingQueue">
            <summary>
            Returns custom rendering queue with using the following following sources (when one source has a value, it is used):
            1) this.CustomRenderingQueue property
            2) CustomRenderingQueue DXAttribute from wpfObject
            3) if parent is BaseWpfObjectNode, then parentBaseWpfObjectNode.usedCustomRenderingQueue
            4) if parent is ObjectNode, then parentObjectNode.CustomRenderingQueue
            5) else null
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.BaseWpfObjectNode.GetCustomRenderingQueueFromDXAttribute">
            <summary>
            Returns RenderingQueue from the CustomRenderingQueue DXAttribute or null if the attribute is not defined.
            </summary>
            <returns>RenderingQueue</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.BaseWpfObjectNode.OnDXAttributeChanged(Ab3d.DirectX.DXAttributeType)">
            <summary>
            OnDXAttributeChanged is called when the DXAttribute is changed. This method can be overridden in a derived class.
            </summary>
            <param name="attributeType">changed attribute</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.BaseWpfObjectNode.IsMyWpfObject(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.Models.BaseWpfObjectNode.GetOriginalWpfObject">
            <summary>
            Gets the WPF object that was used to create this SceneNode.
            </summary>
            <returns>WPF object that was used to create this SceneNode</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.BaseWpfObjectNode.GetDetailsText(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.Models.BaseWpfObjectNode.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Ab3d.DirectX.Models.DXMultiMeshGeometry3D">
            <summary>
            DXMultiMeshGeometry3D class is used to prepare low level DirectX objects from multiple WPF's MeshGeometry3D objects.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.DXMultiMeshGeometry3D.IsHitTestVisible">
            <summary>
            IsHitTestVisible specifies if this DXMultiMeshGeometry3D can be hit tested.
            If you do not need to hit test this DXMultiMeshGeometry3D, then you can set IsHitTestVisible to false
            to free the memory used for vertex and index buffer arrays.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.DXMultiMeshGeometry3D.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">name</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.DXMultiMeshGeometry3D.AddSubMesh(Ab3d.DirectX.Material,System.Collections.Generic.IList{System.Windows.Media.Media3D.MeshGeometry3D},System.Collections.Generic.IList{System.Windows.Media.Media3D.Transform3D},System.Collections.Generic.IList{System.Collections.Generic.IList{System.Windows.Point}},System.String)">
            <summary>
            Adds list of MeshGeometry3D with their Transformations and optionally custom texture coordinates.
            </summary>
            <param name="material">Material</param>
            <param name="meshes">IList of MeshGeometry3D</param>
            <param name="transformations">IList of Transform3D</param>
            <param name="customTextureCoordinates">IList of IList of Point</param>
            <param name="subMeshName">name of this submesh</param>
            <returns>returns index of the submesh in the internal collection</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.DXMultiMeshGeometry3D.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxDevice">Parent DXDevice used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.DXMultiMeshGeometry3D.RecreateMesh">
            <summary>
            Creates new VertexBuffers and IndexBuffer from the added submeshes. This method also clears the list of added submeshes - you will need to call AddSubMesh method again before next RecreateMesh call.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.DXMultiMeshGeometry3D.GetClosestHitResult(SharpDX.Ray@,Ab3d.DirectX.DXHitTestContext)">
            <summary>
            GetClosestHitResult method returns a <see cref="T:Ab3d.DirectX.DXRayHitTestResult"/> with the closest triangle hit by the specified ray.
            When no triangle is hit, null is returned.
            </summary>
            <param name="localRay">SharpDX.Ray in local SceneNode coordinate system</param>
            <param name="hitTestContext">DXHitTestContext</param>
            <returns>DXRayHitTestResult with the closest triangle hit or null when no triangle is hit</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.DXMultiMeshGeometry3D.GetNextHitResult(SharpDX.Ray@,Ab3d.DirectX.DXHitTestContext,Ab3d.DirectX.DXRayHitTestResult)">
            <summary>
            GetNextHitResult method continues hit testing from the previously returned hit test and returns a <see cref="T:Ab3d.DirectX.DXRayHitTestResult"/>
            with the next hit triangle (not necessary the next closest triangle) or null if no other triangle is hit.
            This method can be used to get all hit results.
            </summary>
            <param name="localRay">SharpDX.Ray in local SceneNode coordinate system</param>
            <param name="hitTestContext">DXHitTestContext</param>
            <param name="previousHitResult">DXRayHitTestResult as result of the previous call to GetNextHitResult method or null if this is the first time this method is called</param>
            <returns>DXRayHitTestResult with the next triangle hit or null when no triangle is hit</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.DXMultiMeshGeometry3D.HitTest(SharpDX.Ray@,Ab3d.DirectX.DXHitTestContext,System.Int32,System.Boolean)">
            <summary>
            Hit test the specified ray against this mesh and returns the closest hit result or null if no hit is found.
            </summary>
            <param name="localRay">ray transformed to local coordinate system</param>
            <param name="hitTestContext">DXHitTestContext</param>
            <param name="startTriangleIndex">index of the triangle where the hit testing will begin - triangle indice index is get by multiplying this number by 3</param>
            <param name="getOnlyNextHitTest">when true, then the next hit result is returned; when false all hit results are get and only the closest to the ray origin is returned.</param>
            <returns>DXRayHitTestResult when ray hits the mesh otherwise null is returned</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.DXMultiMeshGeometry3D.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode">
            <summary>
            InstancedMeshGeometry3DNode represents a <see cref="T:Ab3d.Visuals.InstancedMeshGeometryVisual3D"/> as a <see cref="T:Ab3d.DirectX.SceneNode"/>.
            </summary>    
        </member>
        <member name="F:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.InstanceBufferChangedCallback">
            <summary>
            InstanceBufferChangedCallback action is called when the instance buffer was changed. The new instance buffer is passed as first parameter.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.OverrideEffect">
            <summary>
            Gets or sets a DXEngine's Effect that is used to render this object.
            When OverrideEffect is null, the <see cref="T:Ab3d.DirectX.Effects.InstancedObjectsEffect"/> is used.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.DXMesh">
            <summary>
            Gets a DXMeshGeometry3D that is created from the WPF's MeshGeometry3D.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.MeshGeometry3D">
            <summary>
            Gets a MeshGeometry3D that represents the mesh definition of each instance.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.SpecularMaterial">
            <summary>
            Gets a SpecularMaterial that is used by all instances. After changing this property the <see cref="M:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.UpdateMaterial"/> must be called.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.IsBackFaceMaterial">
            <summary>
            Gets or sets a Boolean that specifies if front faces (true) or back faces (false) are rendered.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.IsSolidColorMaterial">
            <summary>
            Gets or sets a Boolean that specifies if instanced objects are rendered with a solid color (without any shading based on lighting calculations). Default value is false.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.TextureAlphaClipThreshold">
            <summary>
            TextureAlphaClipThreshold can be set when <see cref="P:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.TextureShaderResourceView"/> is set.
            When its value is above 0 then pixels in texture with alpha color values below this value will be clipped (not rendered and their depth will not be written to depth buffer).
            Expected values are between 0 and 1.
            When 0 (by default) then alpha clipping is disabled - this means that also pixels with alpha value 0 are fully processed (they are not visible but its depth value is still written so objects that are rendered afterwards and are behind the pixel will not be visible).
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.IsPreMultipliedAlphaColor">
            <summary>
            When IsPreMultipliedAlphaColor is true (false by default) and Alpha is less then 1, then the instance colors components are already multiplied with alpha value to produce pre-multiplied colors.
            When false, then non-pre-multiplied color is converted in pre-multiplied color when this is required by the shader.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.IsUpdatingBounds">
            <summary>
            Gets or sets a Boolean that specifies if this SceneNode3D is automatically updating its <see cref="T:Ab3d.DirectX.Bounds"/> value. Default value is true.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.UseDynamicInstanceBuffer">
            <summary>
            Gets or sets a Boolean that specifies if dynamic instance buffer is created instead of immutable instance buffer.
            Dynamic instance buffer has better performance when instance data is changed often.
            On the other side the immutable buffer is better when the instance data is not changed or changed only a few times.
            Default value is false - use immutable buffer.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.UseAlphaBlend">
            <summary>
            Gets or sets a Boolean that specifies if alpha blending is used when rendering model instances.
            This can be used to render semi-transparent objects. Default value is false.
            This property is used only when instance color is used (not when <see cref="M:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.UseSingleObjectColor(SharpDX.Color4)"/> is called).
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.IsCastingShadow">
            <inheritdoc />
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.TextureShaderResourceView">
            <summary>
            When TextureShaderResourceView is set to a ShaderResourceView, then this texture is used for all instances of the mesh.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.TextureBlendState">
            <summary>
            Gets or sets a BlendState that is used to render the texture. If null then <see cref="P:Ab3d.DirectX.CommonStates.Opaque"/> or <see cref="P:Ab3d.DirectX.CommonStates.PremultipliedAlphaBlend"/> (for transparent materials) will be used.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.InstancesCount">
            <summary>
            Gets or sets number of rendered instances. This value is automatically set from the SetInstanceData method to the length of the InstancesData array. But user can change the value to render just part of the instances.
            When the value is changed it is recommended to set the <see cref="F:Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags.MeshIndexBufferDataChanged"/> and <see cref="F:Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags.BoundsChanged"/> flags with calling <see cref="M:Ab3d.DirectX.SceneNode.NotifySceneNodeChange(Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags)"/> method.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.StartInstanceIndex">
            <summary>
            StartInstanceIndex can be set to an index that will render only instances from the specified start index on.
            When the value is changed it is recommended to set the <see cref="F:Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags.MeshIndexBufferDataChanged"/> and <see cref="F:Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags.BoundsChanged"/> flags with calling <see cref="M:Ab3d.DirectX.SceneNode.NotifySceneNodeChange(Ab3d.DirectX.SceneNode.SceneNodeDirtyFlags)"/> method.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.UseScreenSpaceScaling">
            <summary>
            When true (false by default) then each instance is scaled in the shader so that the value specified in matrix's M11
            defines the size of the rendered object on screen (when the size of the mesh is 1).
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.#ctor(Ab3d.Visuals.InstancedMeshGeometryVisual3D,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="instancedGeometryVisual3D">InstancedGeometryVisual3D</param>
            <param name="name">optional name</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.#ctor(System.Windows.Media.Media3D.MeshGeometry3D,System.Windows.Media.Media3D.SpecularMaterial,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="meshGeometry3D">WPF's MeshGeometry3D</param>
            <param name="specularMaterial">SpecularMaterial that is used by all instances (null by default)</param>
            <param name="name">optional name</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.SetInstanceData(Ab3d.DirectX.InstanceData[],System.Boolean)">
            <summary>
            Updates the InstanceData and InstancesCount. This method must be called after the instance data is changed. If data size is changed the method also sets the StartInstanceIndex to 0.
            </summary>
            <remarks>
            <para>
            <b>SetInstanceData</b> Updates the InstanceData and InstancesCount.
            </para>
            <para>
            This method must be called after the instance data is changed. 
            </para>
            <para>
            If data size is changed the method also sets the StartInstanceIndex to 0.
            </para>
            <para>
            When the instanceData is changed, usually the BoundingBox of this SceneNode should be also changed. 
            Because it can take some time to calculate the new bounding box, it is possible to prevent updating BoundingBox with specifying updateBounds property to false.
            </para>
            <para>
            You can also manually set the instance buffer to this InstancedMeshGeometry3DNode with using <see cref="M:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.SetInstanceBuffer(SharpDX.Direct3D11.Buffer,System.Int32,System.Int32,Ab3d.DirectX.InstanceData[],System.Boolean)"/> method.
            </para>
            </remarks>
            <param name="instancesData">array of InstanceData</param>
            <param name="updateBounds">when true the BoundingBox of this Node is recalculated. Can be set to false to skip this calculation that can take some time.</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.GetInstanceData">
            <summary>
            Returns an array of InstanceData that represents instances data used by this InstancedMeshGeometry3DNode.
            </summary>
            <returns>an array of InstanceData that represents instances data used by this InstancedMeshGeometry3DNode</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.GetInstanceBuffer">
            <summary>
            Returns a SharpDX.Direct3D11.Buffer that is used by this InstancedMeshGeometry3DNode.
            </summary>
            <remarks>
            <para>
            GetInstanceBuffer returns a SharpDX.Direct3D11.Buffer that is used by this InstancedMeshGeometry3DNode.
            </para>
            <para>
            If the instanceBuffer was created by this InstancedMeshGeometry3DNode, then it will be also disposed by this InstancedMeshGeometry3DNode - you must not dispose it because after that it will not be usable any more.
            The reason for this is that SharpDX does not support reference counting and so when a Dispose method is called, the object cannot be used any more (regardless of the references count number of the COM object). This is also a standard .Net practice - not to use Disposed objects any more.
            </para>
            </remarks>
            <returns>a SharpDX.Direct3D11.Buffer that is used by this InstancedMeshGeometry3DNode</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.SetInstanceBuffer(SharpDX.Direct3D11.Buffer,System.Int32,System.Int32,Ab3d.DirectX.InstanceData[],System.Boolean)">
            <summary>
            SetInstanceBuffer sets the specified instanceBuffer to be used to render the instances in this InstancedMeshGeometry3DNode.
            </summary>
            <param name="instanceBuffer">instance buffer as SharpDX.Direct3D11.Buffer</param>
            <param name="instanceDataStride">stride size in buffer (size in bytes of one instance data)</param>
            <param name="instancesCount">number of instances</param>
            <param name="instancesData">array of InstanceData that was used to create the instanceBuffer. This parameter is optional, but it is required for hit testing to work.</param>
            <param name="updateBounds">when true the BoundingBox of this Node is recalculated. Can be set to false to skip this calculation that can take some time.</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.UseSingleObjectColor(SharpDX.Color4)">
            <summary>
            When UseSingleObjectColor is called, the specified objectColor is used as diffuse color for all instances.
            This overrides the color defined in the instances data. When color's alpha value is less than 1, then alpha blending is used.
            To use instance color after calling UseSingleObjectColor, call the <see cref="M:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.UseInstanceObjectColor"/> method.
            </summary>
            <param name="objectColor">color used for all instances</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.UseInstanceObjectColor">
            <summary>
            UseInstanceObjectColor method can be called after calling the <see cref="M:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.UseSingleObjectColor(SharpDX.Color4)"/>.
            This method resets using diffuse color from instances data.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.Update">
            <summary>
            Update method is called on each update phase (before render phase)
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.OnWorldMatrixChanged">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.UpdateBounds(System.Boolean)">
            <summary>
            Updates the bounds of this SceneNode if the dirty flags indicates that the bounds could be changed of if the forceUpdate parameter is set to true
            </summary>
            <param name="forceUpdate">if true than bounds are updated regardless of the SceneNode's dirty flags</param>
            <returns>true if bounds were changed</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.UpdateMaterial">
            <summary>
            UpdateMaterial updates the DXEngine's material properties.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.UpdateInstanceBuffer">
            <summary>
            UpdateInstanceBuffer updates the used DirectX instance buffer and fills it with instances data set in the <see cref="M:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.SetInstanceData(Ab3d.DirectX.InstanceData[],System.Boolean)"/> method.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.OnInitializeResources(Ab3d.DirectX.DXScene)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxScene">Parent DXScene used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.OnIsVisibleChanged(System.Boolean)">
            <summary>
            OnIsVisibleChanged is called when IsVisible property is changed.
            </summary>
            <param name="newIsActuallyVisible">new value of IsActuallyVisible property</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.CollectRenderableObjects">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.GetClosestHitResult(SharpDX.Ray@,Ab3d.DirectX.DXHitTestContext)">
            <summary>
            GetClosestHitResult method returns a <see cref="T:Ab3d.DirectX.DXRayHitTestResult"/> with the closest triangle hit by the specified ray.
            When no triangle is hit, null is returned.
            </summary>
            <param name="localRay">SharpDX.Ray in local SceneNode coordinate system</param>
            <param name="hitTestContext">DXHitTestContext</param>
            <returns>DXRayHitTestResult with the closest triangle hit or null when no triangle is hit</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.GetNextHitResult(SharpDX.Ray@,Ab3d.DirectX.DXHitTestContext,Ab3d.DirectX.DXRayHitTestResult)">
            <summary>
            GetNextHitResult method continues hit testing from the previously returned hit test and returns a <see cref="T:Ab3d.DirectX.DXRayHitTestResult"/>
            with the next hit triangle (not necessary the next closest triangle) or null if no other triangle is hit.
            This method can be used to get all hit results.
            </summary>
            <param name="localRay">SharpDX.Ray in local SceneNode coordinate system</param>
            <param name="hitTestContext">DXHitTestContext</param>
            <param name="previousHitResult">DXRayHitTestResult as result of the previous call to GetNextHitResult method or null if this is the first time this method is called</param>
            <returns>DXRayHitTestResult with the next triangle hit or null when no triangle is hit</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.GetDetailsText(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedMeshGeometry3DNode.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Models.InstancedModel3DGroupNode">
            <summary>
            InstancedModel3DGroupNode represents a <see cref="T:Ab3d.DirectX.Models.InstancedModel3DGroupNode"/> as a <see cref="T:Ab3d.DirectX.SceneNode"/>.
            </summary>    
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedModel3DGroupNode.Model3DGroup">
            <summary>
            Gets a Model3DGroup that is rendered for of each instance.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedModel3DGroupNode.SpecularMaterial">
            <summary>
            Gets a SpecularMaterial that is used by all instances. After changing this property the <see cref="M:Ab3d.DirectX.Models.InstancedModel3DGroupNode.UpdateMaterial"/> must be called.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedModel3DGroupNode.IsUpdatingBounds">
            <summary>
            Gets or sets a Boolean that specifies if this SceneNode3D is automatically updating its <see cref="T:Ab3d.DirectX.Bounds"/> value. Default value is true.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedModel3DGroupNode.UseDynamicInstanceBuffer">
            <summary>
            Gets or sets a Boolean that specifies if dynamic instance buffer is created instead of immutable instance buffer.
            Dynamic instance buffer has better performance when instance data is changed often.
            On the other side the immutable buffer is better when the instance data is not changed or changed only a few times.
            Default value is false - use immutable buffer.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedModel3DGroupNode.IsCastingShadow">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedModel3DGroupNode.#ctor(Ab3d.Visuals.InstancedModelGroupVisual3D,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="instancedModelGroupVisual3D">InstancedModelGroupVisual3D</param>
            <param name="name">optional name</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedModel3DGroupNode.SetInstanceData(Ab3d.DirectX.InstanceData[],System.Boolean)">
            <summary>
            Updates the InstanceData and InstancesCount. This method must be called after the instance data is changed.
            </summary>
            <remarks>
            <para>
            <b>SetInstanceData</b> Updates the InstanceData.
            </para>
            <para>
            This method must be called after the instance data is changed. 
            </para>
            <para>
            When the instanceData is changed, usually the BoundingBox of this SceneNode should be also changed. 
            Because it can take some time to calculate the new bounding box, it is possible to prevent updating BoundingBox with specifying updateBounds property to false.
            </para>
            </remarks>
            <param name="instancesData">array of InstanceData</param>
            <param name="updateBounds">when true the BoundingBox of this Node is recalculated. Can be set to false to skip this calculation that can take some time.</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedModel3DGroupNode.UpdateMaterial">
            <summary>
            UpdateMaterial updates the DXEngine's material properties based on the current value of <see cref="P:Ab3d.DirectX.Models.InstancedModel3DGroupNode.SpecularMaterial"/>.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedModel3DGroupNode.Update">
            <summary>
            Update method is called on each update phase (before render phase)
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedModel3DGroupNode.UpdateBounds(System.Boolean)">
            <summary>
            Updates the bounds of this SceneNode if the dirty flags indicates that the bounds could be changed of if the forceUpdate parameter is set to true
            </summary>
            <param name="forceUpdate">if true than bounds are updated regardless of the SceneNode's dirty flags</param>
            <returns>true if bounds were changed</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedModel3DGroupNode.OnWorldMatrixChanged">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedModel3DGroupNode.CollectRenderableObjects">
            <inheritdoc />
        </member>
        <member name="T:Ab3d.DirectX.Models.InstancedText">
            <summary>
            InstancedText object is returned from the InstancedTextNode.AddText method and can be used to change the text's position, color, show or hide the text.
            The class also defines the size of the 3D text.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedText.Text">
            <summary>
            Gets the text
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedText.Color">
            <summary>
            Gets the color of the text
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedText.WorldMatrix">
            <summary>
            Gets the WorldMatrix if the first character in the text
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedText.HasBackSide">
            <summary>
            Gets Boolean that specifies if back side texture is rendered for this text (if the text is also visible from the back side)
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedText.TextBounds">
            <summary>
            Gets the Rect3D that define the size and position of the text in 3D space.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedText.IsVisible">
            <summary>
            Gets a Boolean that specifies if the text is visible.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedText.Hide">
            <summary>
            Hides the text
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedText.Show">
            <summary>
            Shows the text
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedText.ChangeColor(System.Windows.Media.Color)">
            <summary>
            Changes the color of the text.
            </summary>
            <param name="color">new Color</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedText.Move(System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Moves the text for the specified moveVector
            </summary>
            <param name="moveVector">move vector</param>
        </member>
        <member name="T:Ab3d.DirectX.Models.InstancedTextNode">
            <summary>
            InstancedTextNode is a SceneNode that can be used to render millions of characters with different colors, position and size.
            The InstancedTextNode renders each used character to a texture and then to renders all occurrences of the character with using object instancing.
            Because rendered characters use transparent background, the InstancedTextNode uses alpha-clipping to render them correctly without the need to sort then by their distance to the camera.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedTextNode.FontFamily">
            <summary>
            Gets the FontFamily that is used by this InstancedTextNode
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedTextNode.FontWeight">
            <summary>
            Gets the FontWeight that is used by this InstancedTextNode
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Models.InstancedTextNode.FontBitmapSize">
            <summary>
            Gets the size of the bitmap that is used to render font characters.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedTextNode.AlphaClipThreshold">
            <summary>
            AlphaClipThreshold is used to correctly render the textures with rendered characters and transparent background.
            It specifies at which alpha value the pixels will be clipped (not rendered and their depth will not be written to the depth buffer).
            Default value is 0.15.
            When set to 0, then alpha-clipping is disabled and in this case the characters may not be rendered correctly.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.InstancedTextNode.CharactersCount">
            <summary>
            Gets the number of characters rendered by this InstancedTextNode.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedTextNode.#ctor(System.Windows.Media.FontFamily,System.Windows.FontWeight,System.Int32,System.Boolean,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="fontFamily">FontFamily</param>
            <param name="fontWeight">FontWeight</param>
            <param name="fontBitmapSize">size of the bitmap that will be used to render characters. It is recommended to use size that is power of 2 - for example 64, 128, 256, etc. By default the fontBitmapSize is set to 128 that rendered characters to 128 x 128 texture.</param>
            <param name="useDynamicInstanceBuffer">when true then dynamic instance buffer is created (can be used when instance data is changed very often)</param>
            <param name="name">option name</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedTextNode.SetTextDirection(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
            <summary>
            Sets the direction and orientation of the text that is added by <see cref="M:Ab3d.DirectX.Models.InstancedTextNode.AddText(System.String,System.Windows.Media.Color,System.Windows.Media.Media3D.Point3D,System.Double,System.Boolean)"/>.
            By default the textDirection is set to (1, 0, 0) and upDirection is set to (0, 1, 0)
            </summary>
            <param name="textDirection">text direction vector</param>
            <param name="upDirection"> Vector3D that is pointing in the text's up direction.</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedTextNode.AddText(System.String,System.Windows.Media.Color,System.Windows.Media.Media3D.Point3D,System.Double,System.Boolean)">
            <summary>
            Add the specified text to the InstancedTextNode with using simple position and size parameters.
            The orientation of the text is defined by the <see cref="M:Ab3d.DirectX.Models.InstancedTextNode.SetTextDirection(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)"/> method.
            </summary>
            <param name="text">text to add</param>
            <param name="color">color of the text</param>
            <param name="position">lower left position of the first character</param>
            <param name="size">size of the characters in 3D coordinates</param>
            <param name="hasBackSide">when true, then the text will be visible from the back side (another instance of the text will be rendered to show the back size)</param>
            <returns>InstancedText that can be used to change the shown text.</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedTextNode.AddText(System.String,System.Windows.Media.Color,System.Windows.Media.Media3D.Matrix3D,System.Boolean)">
            <summary>
            Add the specified text to the InstancedTextNode with the worldMatrix instead of position and size parameters.
            The orientation of the text is fully defined by the worldMatrix and therefore the orientation defined by the <see cref="M:Ab3d.DirectX.Models.InstancedTextNode.SetTextDirection(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)"/> method is not used.
            </summary>
            <param name="text">text to add</param>
            <param name="color">color of the text</param>
            <param name="worldMatrix">matrix that defines the orientation, size and position of the text</param>
            <param name="hasBackSide">when true, then the text will be visible from the back side (another instance of the text will be rendered to show the back size)</param>
            <returns>InstancedText that can be used to change the shown text.</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedTextNode.RenderTextBlock(System.Windows.Controls.TextBlock)">
            <summary>
            RenderTextBlock renders a TextBlock with one character to a ShaderResourceView that can be used by DirectX.
            The method can be overwritten to provide custom rendering of text (text should be rendered to white color so that when this color is multiplied by the instance color the correct instance color will be shown).
            </summary>
            <param name="textBlockWithOneChar">TextBlock to render</param>
            <returns>ShaderResourceView that will be used by DirectX</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedTextNode.Update">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedTextNode.CollectRenderableObjects">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedTextNode.GetReport(System.Boolean)">
            <summary>
            Gets a string with a report that provides information which characters are used in this InstanceTextNode.
            </summary>
            <param name="orderByNumberOfInstances">orderByNumberOfInstances</param>
            <returns>string with a report that provides information which characters are used in this InstanceTextNode</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.InstancedTextNode.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Ab3d.DirectX.Models.IWpfObjectNode">
            <summary>
            IWpfObjectNode is used on classes that derive from SceneNode class and are created to represent a WPF object as SceneNode.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.IWpfObjectNode.IsMyWpfObject(System.Object)">
            <summary>
            IsMyWpfObject returns true is this SceneNode was created from the specified originalWpfObject.
            </summary>
            <param name="originalWpfObject">WPF object that is used to check this SceneNode</param>
            <returns>true is this SceneNode was created from the specified originalWpfObjec</returns>
        </member>
        <member name="T:Ab3d.DirectX.Models.DXMeshGeometry3D">
            <summary>
            DXMeshGeometry3D class is initialized by the WPF's MeshGeometry3D and uses its data to prepare the low level DirectX objects (Index and Vertex buffers) that are needed to render the mesh.
            </summary>
            <remarks>
            <para>
            <b>DXMeshGeometry3D</b> class is initialized by the WPF's MeshGeometry3D and uses its data to prepare the low level DirectX objects (Index and Vertex buffers) that are needed to render the mesh.
            </para>
            <para>
            The created vertex buffer is set to the <see cref="P:Ab3d.DirectX.MeshBase.VertexBufferBindings"/> property.
            Index buffer is set to the <see cref="P:Ab3d.DirectX.MeshBase.IndexBuffer"/> property.
            </para>
            <para>
            Vertex buffer is created with Position (as SharpDX.Vector3), Normal (as SharpDX.Vector3) and TextureCoordinate (as SharpDX.Vector).
            </para>
            <para>
            When <see cref="F:Ab3d.DirectX.DXAttributeType.MeshTangentArray"/> attribute is set to the MeshGeometry3D (with using <see cref="M:Ab3d.DirectX.Extentions.SetDXAttribute(System.Windows.Media.Media3D.Geometry3D,Ab3d.DirectX.DXAttributeType,System.Object)"/> extension method), 
            a special vertex buffer with tangent data is created and set to the second slot of the created <see cref="P:Ab3d.DirectX.MeshBase.VertexBufferBindings"/> property.
            In this case the <see cref="F:Ab3d.DirectX.InputLayoutType.Tangent"/> is added to the <see cref="P:Ab3d.DirectX.MeshBase.InputLayoutType"/> value.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.DirectX.Models.DXMeshGeometry3D.FlipYTextureCoordinate">
            <summary>
            Gets or sets a Boolean that specifies if y texture coordinate is changed to y' = 1 - y (flipped texture coordinates instead of flipping the image is much faster)
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.DXMeshGeometry3D.IsVertexBufferDirty">
            <summary>
            Gets a boolean that specifies that vertex buffer needs to be regenerated (Positions, Normals or TextureCoordinates have changed)
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.DXMeshGeometry3D.IsIndexBufferDirty">
            <summary>
            Gets a boolean that specifies that index buffer needs to be regenerated.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.DXMeshGeometry3D.CreateDynamicVertexBuffer">
            <summary>
            Gets or sets a Boolean that specifies if the vertex buffer is created as a dynamic buffer.
            This can provide slightly better performance for cases when vertex buffer is updated very often.
            Default value is false.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.DXMeshGeometry3D.AutomaticallyChangeToDynamicVertexBuffer">
            <summary>
            Gets or sets a Boolean property that after 3 changes of the vertex buffer sets the <see cref="P:Ab3d.DirectX.Models.DXMeshGeometry3D.CreateDynamicVertexBuffer"/> to true (if not already set to true).
            This improves performance of subsequent buffer changes. Default value is true.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.DXMeshGeometry3D.MeshGeometry">
            <summary>
            Gets MeshGeometry3D that is used to create this DXMeshGeometry3D.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.DXMeshGeometry3D.Version">
            <summary>
            Gets the version number of the DirectX buffers created from this MeshGeometry3D.
            Version is increased each time the buffers change. 
            Note: When MeshGeometry3D is changed a lot of times, the Version value can overflow from positive to negative numbers (to prevent problems do not check for bigger value but for not equal value)
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.DXMeshGeometry3D.PositionsCount">
            <summary>
            Gets a number of positions that are defined by this mesh.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.DXMeshGeometry3D.TriangleIndicesCount">
            <summary>
            Gets a number of triangle indices that are defined by this mesh.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.DXMeshGeometry3D.OctTree">
            <summary>
            Gets or sets an MeshOctTree that can be used for hit testing.
            The MeshOctTree is automatically generated when number of positions in this mesh is bigger or equal to the value set in <see cref="P:Ab3d.DirectX.DXHitTestOptions.MeshPositionsCountForOctTreeGeneration"/>.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.DXMeshGeometry3D.#ctor(System.Windows.Media.Media3D.MeshGeometry3D,System.String,Ab3d.DirectX.DXDevice,System.Boolean)">
            <summary>
            Constructor - note: it is recommended to use static Create method instead.
            </summary>
            <param name="meshGeometry">MeshGeometry3D</param>
            <param name="name">name</param>
            <param name="dxDevice">DXDevice</param>
            <param name="createDynamicVertexBuffer">when true the vertex buffer is created as a dynamic buffer (can provide slightly better performance for cases when vertex buffer is updated very often)</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.DXMeshGeometry3D.OnInitializeResources(Ab3d.DirectX.DXDevice)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxDevice">Parent DXDevice used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.DXMeshGeometry3D.CreateOctTree(System.Int32,System.Single)">
            <summary>
            CreateOctTree returns a <see cref="T:Ab3d.DirectX.MeshOctTree"/> that is created from the mesh defined in this DXMeshGeometry3D.
            This method must be called after the DXMeshGeometry3D has been initialized (added to DXScene or after InitializeResources method is called).
            </summary>
            <remarks>
            <para>
            CreateOctTree returns a <see cref="T:Ab3d.DirectX.MeshOctTree"/> that is created from the mesh defined in this DXMeshGeometry3D.
            </para>
            <para>
            This method must be called after the DXMeshGeometry3D has been initialized (added to DXScene or after InitializeResources method is called).
            </para>
            <para>
            Not: this method does not set the <see cref="P:Ab3d.DirectX.Models.DXMeshGeometry3D.OctTree"/> property on this DXMeshGeometry3D.
            </para>
            </remarks>
            <param name="maxNodeLevel">Number of levels used for MeshOctTree - bigger number reduces the number of triangles in each node but increased the MeshOctTree initialization time and used memory. Default value is 4.</param>
            <param name="expandChildBoundingBoxes">ExpandChildBoundingBoxes is a float that defined how much the bounding boxes of node overlap. By default the value is set to 0.2 - so each bounding box is extended for 20% (but it does not go out of the parent's bounding box). This way the triangles that lay on node borders will be put into the child nodes instead of having them in the parent node (there we need to do a hit test every time).</param>
            <returns>created MeshOctTree</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.DXMeshGeometry3D.GetVertexAndIndexBuffers(Ab3d.DirectX.PositionNormalTexture[]@,System.Int32[]@)">
            <summary>
            GetVertexAndIndexBuffers method gets vertex and index buffer array that are created from MeshGeometry3D.
            This method must be called after the DXMeshGeometry3D was initialized or the Update method was called. Otherwise the returned array will be null.
            </summary>
            <param name="vertexBufferArray">vertex buffer - array of PositionNormalTexture</param>
            <param name="indicesArray">index buffer - array of int values</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.DXMeshGeometry3D.RecreateMesh">
            <summary>
            Forces creation of new VertexBuffers and IndexBuffer. This method sets IsVertexBufferDirty and IsIndexBufferDirty to true and then calls <see cref="M:Ab3d.DirectX.Models.DXMeshGeometry3D.Update"/> method.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.DXMeshGeometry3D.Update">
            <summary>
            Updates vertex and index buffers based on the IsVertexBufferDirty and IsIndexBufferDirty. To force update both vertex and index buffer call <see cref="M:Ab3d.DirectX.Models.DXMeshGeometry3D.RecreateMesh"/> method.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.DXMeshGeometry3D.GetUsedDXMeshGeometry3D(System.Windows.Media.Media3D.MeshGeometry3D,Ab3d.DirectX.DXDevice)">
            <summary>
            GetUsedDXMeshGeometry3D method returns DXMeshGeometry3D that was created from the WPF MeshGeometry3D (or null if no DXMeshGeometry3D was created for the WPF material).
            parentDXDevice is requireed to check if the created DXMeshGeometry3D was created for the same device.
            </summary>
            <remarks>
            <para>
            <b>GetUsedDXMeshGeometry3D</b> method returns DXMeshGeometry3D that was created from the WPF MeshGeometry3D (or null if no DXMeshGeometry3D was created for the WPF material).
            parentDXDevice is requireed to check if the created DXMeshGeometry3D was created for the same device.
            </para>
            <para>
            NOTE:<br/>
            When the MeshGeometry3D is used to show a Model3D with texture and MeshGeometry3D defines non-normalized texture coordinates (not in range from 0 to 1), 
            then the DXMeshGeometry3D is not stored into MeshGeometry3D because this MeshGeometry3D can be used only for one Material and its Viewport values.
            </para>
            <para>
            This method will also return null if the MeshGeometry3D is frozen.
            </para>
            </remarks>
            <param name="meshGeometry">MeshGeometry3D used in WPF</param>
            <param name="parentDXDevice">DXDevice</param>
            <returns>already created DXMeshGeometry3D or null</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.DXMeshGeometry3D.SetUsedDXMeshGeometry3D(System.Windows.Media.Media3D.MeshGeometry3D,Ab3d.DirectX.Models.DXMeshGeometry3D,Ab3d.DirectX.DXDevice)">
            <summary>
            Sets a DXMeshGeometry3D that will be used when showing WPF MeshGeometry3D in DXEngine (must be set before the objects are initialized in DXEngine).
            </summary>
            <param name="wpfMeshGeometry">WPF MeshGeometry3D</param>
            <param name="dxMeshGeometry3D">DXMeshGeometry3D</param>
            <param name="parentDXDevice">DXDevice that will use the DirectX DXMeshGeometry3D</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.DXMeshGeometry3D.GetClosestHitResult(SharpDX.Ray@,Ab3d.DirectX.DXHitTestContext)">
            <summary>
            GetClosestHitResult method returns a <see cref="T:Ab3d.DirectX.DXRayHitTestResult"/> with the closest triangle hit by the specified ray.
            When no triangle is hit, null is returned.
            </summary>
            <param name="localRay">SharpDX.Ray in local SceneNode coordinate system</param>
            <param name="hitTestContext">DXHitTestContext</param>
            <returns>DXRayHitTestResult with the closest triangle hit or null when no triangle is hit</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.DXMeshGeometry3D.GetNextHitResult(SharpDX.Ray@,Ab3d.DirectX.DXHitTestContext,Ab3d.DirectX.DXRayHitTestResult)">
            <summary>
            GetNextHitResult method continues hit testing from the previously returned hit test and returns a <see cref="T:Ab3d.DirectX.DXRayHitTestResult"/>
            with the next hit triangle (not necessary the next closest triangle) or null if no other triangle is hit.
            This method can be used to get all hit results.
            </summary>
            <param name="localRay">SharpDX.Ray in local SceneNode coordinate system</param>
            <param name="hitTestContext">DXHitTestContext</param>
            <param name="previousHitResult">DXRayHitTestResult as result of the previous call to GetNextHitResult method or null if this is the first time this method is called</param>
            <returns>DXRayHitTestResult with the next triangle hit or null when no triangle is hit</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.DXMeshGeometry3D.HitTest(SharpDX.Ray@,Ab3d.DirectX.DXHitTestContext,System.Int32,System.Boolean)">
            <summary>
            HitTest method test the triangles defined in this mesh for hitting with the specified ray.
            When getOnlyNextHitTest is false, then the closest hit result is returned, else the next hit result is returned.
            When no hit is found, null is returned.
            </summary>
            <param name="localRay">SharpDX.Ray in local SceneNode coordinate system</param>
            <param name="hitTestContext">DXHitTestContext</param>
            <param name="startTriangleIndex">triangle index where to start looking for hit. Note that this is not an index in the triangle indices array (index buffer) but triangle index - index in triangle indices array is get by multiplying this value by 3.</param>
            <param name="getOnlyNextHitTest">When getOnlyNextHitTest is false, then the closest hit result is returned, else the next hit result is returned.</param>
            <returns>DXRayHitTestResult when hit is found or null when no hit is found</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.DXMeshGeometry3D.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.DXMeshGeometry3D.GetDetailsText(System.Boolean)">
            <summary>
            Returns string that tells details about this SceneNode
            </summary>
            <param name="showBounds">if true than bounds of this SceneNode is shown</param>
            <returns>string that tells details about this SceneNode</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.DXMeshGeometry3D.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Models.SceneNodeFactory">
            <summary>
            SceneNodeFactory is a static class that contains CreateFromVisual3D and CreateFromModel3D methods that can convet WPF's Visual3D or Model3D objects into DXEngine's SceneNodes.
            It is possible to customize the SceneNode creation process with providing custom creators with <see cref="M:Ab3d.DirectX.Models.SceneNodeFactory.RegisterVisual3DToSceneNodeCreator(System.Type,Ab3d.DirectX.Models.SceneNodeFactory.Visual3DToSceneNodeCreatorDelegate)"/> and <see cref="M:Ab3d.DirectX.Models.SceneNodeFactory.RegisterModel3DToSceneNodeCreator(Ab3d.DirectX.Models.SceneNodeFactory.Model3DToSceneNodeCreatorDelegate)"/> methods.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.SceneNodeFactory.CreateFromVisual3D(System.Windows.Media.Media3D.Visual3D,Ab3d.DirectX.Effect,Ab3d.DirectX.DXScene,System.Collections.Generic.Dictionary{System.Object,System.String},System.String)">
            <summary>
            Creates a SceneNode from the specified WPF's Visual3D.
            </summary>
            <remarks>
            <para>
            <b>CreateFromVisual3D</b> method creates a SceneNode from the specified WPF's Visual3D.
            </para>
            <para>
            The method first checks if the type of the visual3D is registered with <see cref="M:Ab3d.DirectX.Models.SceneNodeFactory.RegisterVisual3DToSceneNodeCreator(System.Type,Ab3d.DirectX.Models.SceneNodeFactory.Visual3DToSceneNodeCreatorDelegate)"/> method and in this case calls the registered delegate that can create the SceneNode.
            The order in which the registered types are checked is reversed from the order in which the types are registered. 
            This way it is possible to first register base types and than specific types.
            </para>
            <para>
            If SceneNode is not created with registered creator, than the CreateFromVisual3D method can created one of the following SceneNodes:
            </para>
            <list type="bullet">
            <item>
            <term><see cref="T:Ab3d.Visuals.InstancedMeshGeometryVisual3D"/></term>
            <description>from <see cref="T:Ab3d.Visuals.InstancedMeshGeometryVisual3D"/> Visual3D</description>
            </item>
            <item>
            <term><see cref="T:Ab3d.DirectX.Models.WpfWireframeVisual3DNode"/></term>
            <description>from Ab3d.Visuals.WireframeVisual3D</description>
            </item>
            <item>
            <term><see cref="T:Ab3d.DirectX.Models.WpfModelVisual3DNode"/></term>
            <description>from ModelVisual3D</description>
            </item>
            </list>
            </remarks>
            <param name="visual3D">Visual3D to convert</param>
            <param name="defaultMaterialEffect">default Effect that is used by the created SceneNode</param>
            <param name="parentDXScene">DXScene</param>
            <param name="objectNames">dictionary of object names</param>
            <param name="name">name of the created SceneNode</param>
            <returns>SceneNode created from Visual3D</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.SceneNodeFactory.CreateFromModel3D(System.Windows.Media.Media3D.Model3D,Ab3d.DirectX.Effect,Ab3d.DirectX.DXScene,System.Collections.Generic.Dictionary{System.Object,System.String},System.String)">
            <summary>
            Creates a SceneNode from the specified WPF's Model3D.
            </summary>
            <remarks>
            <para>
            <b>CreateFromModel3D</b> method creates a SceneNode from the specified WPF's Model3D object.
            </para>
            <para>
            The following SceneNodes can be created by CreateFromModel3D:
            </para>
            <list type="bullet">
            <item>
            <term><see cref="T:Ab3d.DirectX.Models.WpfLightNode"/></term>
            <description>from WPF's Light</description>
            </item>
            <item>
            <term><see cref="T:Ab3d.DirectX.ScreenSpaceLineNode"/></term>
            <description>from GeometryModel3D that was created from disconnected 3D lines without 3D arrows</description>
            </item>
            <item>
            <term><see cref="T:Ab3d.DirectX.Models.WpfGeometryModel3DNode"/></term>
            <description>from GeometryModel3D</description>
            </item>
            <item>
            <term><see cref="T:Ab3d.DirectX.Models.WpfOptimizedModel3DGroupNode"/></term>
            <description>from frozen Model3DGroup</description>
            </item>
            <item>
            <term><see cref="T:Ab3d.DirectX.Models.WpfModel3DGroupNode"/></term>
            <description>from not frozen Model3DGroup</description>
            </item>
            </list>
            </remarks>        
            <param name="model3D">Model3D to convert</param>
            <param name="defaultMaterialEffect">default Effect that is used by the created SceneNode</param>
            <param name="parentDXScene">DXScene</param>
            <param name="objectNames">dictionary of object names</param>
            <param name="name">name of the created SceneNode</param>
            <returns>SceneNode created from Model3D</returns>
        </member>
        <member name="T:Ab3d.DirectX.Models.SceneNodeFactory.Visual3DToSceneNodeCreatorDelegate">
            <summary>
            ConvertVisual3DToSceneNodeDelegate is used by <see cref="M:Ab3d.DirectX.Models.SceneNodeFactory.RegisterVisual3DToSceneNodeCreator(System.Type,Ab3d.DirectX.Models.SceneNodeFactory.Visual3DToSceneNodeCreatorDelegate)"/> and is called to convert registered Visual3D type into SceneNode.
            </summary>
            <param name="visual3D">Visual3D to convert</param>
            <param name="defaultMaterialEffect">currently used default material effect</param>
            <param name="parentDXScene">parent DXScene</param>
            <param name="name">name of the Visual3D</param>
            <returns>created SceneNode or null to use default SceneNode creator</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.SceneNodeFactory.RegisterVisual3DToSceneNodeCreator(System.Type,Ab3d.DirectX.Models.SceneNodeFactory.Visual3DToSceneNodeCreatorDelegate)">
            <summary>
            RegisterVisual3DCreator registers a delegate that will be used to convert specified WPF Visual3D type into DXEngine's SceneNode.
            NOTE: The order in which the RegisterVisual3DCreator methods are called is important. 
            Visual3D types that are registered later are checked first - this way it is possible to first register base types and than specific types.
            </summary>
            <remarks>
            <para>
            <b>RegisterVisual3DCreator</b> registers a delegate that will be used to convert specified WPF Visual3D type into DXEngine's SceneNode.
            </para>
            <para>
            NOTE: The order in which the RegisterVisual3DCreator methods are called is important. 
            Visual3D types that are registered later are checked first - this way it is possible to first register base types and than specific types.
            </para>
            <para>
            If RegisterVisual3DToSceneNodeCreator is called again with the same visual3DType, then the previous delegate is overwritten with the new creatorFunction.
            </para>
            <para>
            To unregister a type use the <see cref="M:Ab3d.DirectX.Models.SceneNodeFactory.UnRegisterVisual3DToSceneNodeCreator(System.Type)"/> or <see cref="M:Ab3d.DirectX.Models.SceneNodeFactory.UnregisterAllVisual3DToSceneNodeCreators"/> methods.
            </para>
            <para>
            Method is thread safe and can be called from any thread.
            </para>
            </remarks>
            <param name="visual3DType">Type that is derived from Visual3D</param>
            <param name="creatorFunction">Visual3DToSceneNodeCreatorDelegate to method that returns SceneNode</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.SceneNodeFactory.UnRegisterVisual3DToSceneNodeCreator(System.Type)">
            <summary>
            UnRegisterVisual3DToSceneNodeCreator removes the visual3DType from the registered creators.
            </summary>
            <param name="visual3DType">Type that is derived from Visual3D</param>
            <returns>true if the visual3DType creator was found and removed</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.SceneNodeFactory.UnregisterAllVisual3DToSceneNodeCreators">
            <summary>
            Clears all registered Visual3D creators.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Models.SceneNodeFactory.Model3DToSceneNodeCreatorDelegate">
            <summary>
            Model3DToSceneNodeCreatorDelegate is used by <see cref="M:Ab3d.DirectX.Models.SceneNodeFactory.RegisterModel3DToSceneNodeCreator(Ab3d.DirectX.Models.SceneNodeFactory.Model3DToSceneNodeCreatorDelegate)"/> and is called to convert Model3D into SceneNode.
            </summary>
            <param name="model3D">Model3D to convert</param>
            <param name="defaultMaterialEffect">currently used default material effect</param>
            <param name="parentDXScene">parent DXScene</param>
            <param name="name">name of the Visual3D</param>
            <returns>created SceneNode or null to use default SceneNode creator</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.SceneNodeFactory.RegisterModel3DToSceneNodeCreator(Ab3d.DirectX.Models.SceneNodeFactory.Model3DToSceneNodeCreatorDelegate)">
            <summary>
            RegisterModel3DToSceneNodeCreator registers a delegate that will be called for each Model3D that is used in the <see cref="M:Ab3d.DirectX.Models.SceneNodeFactory.CreateFromModel3D(System.Windows.Media.Media3D.Model3D,Ab3d.DirectX.Effect,Ab3d.DirectX.DXScene,System.Collections.Generic.Dictionary{System.Object,System.String},System.String)"/> method.
            The delegate can be used to provide custom SceneNode from some Model3D objects. If the delegate return null, then the standard creator will be used.
            </summary>
            <remarks>
            <para>
            <b>RegisterModel3DToSceneNodeCreator</b> registers a delegate that will be called for each Model3D that is used in the <see cref="M:Ab3d.DirectX.Models.SceneNodeFactory.CreateFromModel3D(System.Windows.Media.Media3D.Model3D,Ab3d.DirectX.Effect,Ab3d.DirectX.DXScene,System.Collections.Generic.Dictionary{System.Object,System.String},System.String)"/> method.
            The delegate can be used to provide custom SceneNode from some Model3D objects. If the delegate return null, then the standard creator will be used.
            </para>
            <para>
            NOTE: The order in which the RegisterModel3DToSceneNodeCreator methods are called is important. 
            Delegates that are registered later are checked first - this way it is possible to first register base types and than specific types.
            </para>
            <para>
            To unregister a type use the <see cref="M:Ab3d.DirectX.Models.SceneNodeFactory.UnRegisterModel3DToSceneNodeCreator(Ab3d.DirectX.Models.SceneNodeFactory.Model3DToSceneNodeCreatorDelegate)"/> or <see cref="M:Ab3d.DirectX.Models.SceneNodeFactory.UnregisterAllModel3DToSceneNodeCreators"/> methods.
            </para>
            <para>
            Method is thread safe and can be called from any thread.
            </para>
            </remarks>
            <param name="creatorFunction">Model3DToSceneNodeCreatorDelegate to method that returns SceneNode</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.SceneNodeFactory.UnRegisterModel3DToSceneNodeCreator(Ab3d.DirectX.Models.SceneNodeFactory.Model3DToSceneNodeCreatorDelegate)">
            <summary>
            UnRegisterVisual3DToSceneNodeCreator removes the visual3DType from the registered creators.
            </summary>
            <param name="creatorFunction">Model3DToSceneNodeCreatorDelegate to unregister</param>
            <returns>true if the creatorFunction was found and removed</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.SceneNodeFactory.UnregisterAllModel3DToSceneNodeCreators">
            <summary>
            Clears all registered Model3D creators.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.Models.SimpleWpfModel3DSceneNode">
            <summary>
            SimpleWpfModel3DSceneNode is a simple <see cref="T:Ab3d.DirectX.SceneNode"/> that is created from a WPF's Model3D object and is subscribed to Model3D's Transformation changes. 
            When Model3D transformation is changed the Transform property is updated and child scene nodes get TransformChanged change notification.
            SimpleWpfModel3DSceneNode does not create any child nodes.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.SimpleWpfModel3DSceneNode.Model3D">
            <summary>
            Gets the WPF's Model3D that was used to create this SimpleModel3DSceneNode
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.SimpleWpfModel3DSceneNode.#ctor(System.Windows.Media.Media3D.Model3D)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.Models.WpfModel3DGroupNode"/> class.
            </summary>
            <param name="model3D">WPF's Model3D</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.SimpleWpfModel3DSceneNode.CollectRenderableObjects">
            <inheritdoc />
        </member>
        <member name="T:Ab3d.DirectX.Models.WpfMeshGeometry3DConverter">
            <summary>
            WpfMeshGeometry3DConverter is a static class that defines <see cref="M:Ab3d.DirectX.Models.WpfMeshGeometry3DConverter.CreateMesh(System.Windows.Media.Media3D.MeshGeometry3D,Ab3d.DirectX.DXDevice,System.Boolean,System.String)"/> and <see cref="M:Ab3d.DirectX.Models.WpfMeshGeometry3DConverter.FillVertexBuffer(Ab3d.DirectX.PositionNormalTexture[],System.Windows.Media.Media3D.MeshGeometry3D,System.Boolean)"/> and helps convert WPF's MeshGeometry3D into <see cref="T:Ab3d.DirectX.MeshBase"/> object or into VertexBuffer.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfMeshGeometry3DConverter.CreateMesh(System.Windows.Media.Media3D.MeshGeometry3D,Ab3d.DirectX.DXDevice,System.Boolean,System.String)">
            <summary>
            CreateMesh method converts WPF's MeshGeometry3D into MeshBase
            </summary>
            <param name="meshGeometry">WPF's MeshGeometry3D</param>
            <param name="dxDevice">DXDevice</param>
            <param name="calculateMissingNormals">true to calculate normals if they are not yet defined</param>
            <param name="meshName">name of the mesh (optional)</param>
            <returns>MeshBase</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfMeshGeometry3DConverter.FillVertexBuffer(Ab3d.DirectX.PositionNormalTexture[],System.Windows.Media.Media3D.MeshGeometry3D,System.Boolean)">
            <summary>
            FillVertexBuffer methods fill the preallocated vertex buffer array (array of PositionNormalTexture structs) from the data defined in WPF's MeshGeometry3D
            </summary>
            <param name="vertexBufferArray">array of PositionNormalTexture structs (must be already allocated)</param>
            <param name="meshGeometry">WPF's MeshGeometry3D</param>
            <param name="calculateMissingNormals">true to calculate normals if they are not yet defined</param>
        </member>
        <member name="T:Ab3d.DirectX.Models.WpfGeometryModel3DNode">
            <summary>
            WpfGeometryModel3DNode represents a WPF's GeometryModel3D as a <see cref="T:Ab3d.DirectX.SceneNode"/> and can render the GeometryModel3D with DXEngine.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfGeometryModel3DNode.DXMesh">
            <summary>
            Gets the DXMeshGeometry3D that is created from the GeometryModel3D.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfGeometryModel3DNode.GeometryModel3D">
            <summary>
            Gets the WPF's GeometryModel3D that is used to initialize this WpfGeometryModel3DNode
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfGeometryModel3DNode.IsCastingShadow">
            <summary>
            Gets or sets a Boolean that specifies if this SceneNode is casing shadow.
            This means that if IsCastingShadow is true, then 3D objects rendered with this SceneNode will create shadow; 
            if false shadow will not be created. Default value is true.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfGeometryModel3DNode.IsReceivingShadow">
            <summary>
            Gets or sets a Boolean that specifies if this SceneNode can receive shadow - this means that the shadow is rendered on the object(s) rendered by this SceneNode.
            Default value is true.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfGeometryModel3DNode.#ctor(System.Windows.Media.Media3D.GeometryModel3D,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.Models.WpfGeometryModel3DNode"/> class.
            </summary>
            <param name="geometryModel3D">WPF's GeometryModel3D</param>
            <param name="name">name of this WpfGeometryModel3DNode (optional)</param>
            <param name="createDynamicVertexBuffer">when true the vertex buffer is created as a dynamic buffer (can provide slightly better performance for cases when vertex buffer is updated very often)</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfGeometryModel3DNode.OnInitializeResources(Ab3d.DirectX.DXScene)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxScene">Parent DXScene used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfGeometryModel3DNode.Update">
            <summary>
            Update method is called on each update phase (before render phase)
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfGeometryModel3DNode.OnWorldMatrixChanged">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfGeometryModel3DNode.OnIsVisibleChanged(System.Boolean)">
            <summary>
            OnIsVisibleChanged is called when IsVisible property is changed.
            </summary>
            <param name="newIsVisibleValue">new value of IsVisible property</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfGeometryModel3DNode.UpdateBounds(System.Boolean)">
            <summary>
            Updates the bounds of this SceneNode if the dirty flags indicates that the bounds could be changed of if the forceUpdate parameter is set to true
            </summary>
            <param name="forceUpdate">if true than bounds are updated regardless of the SceneNode's dirty flags</param>
            <returns>true if bounds were changed</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfGeometryModel3DNode.CollectRenderableObjects">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfGeometryModel3DNode.GetDetailsText(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a string with detailed description of this SceneNode.
            </summary>
            <param name="showBounds">true to show bounds information</param>
            <param name="showTransform">true to show transformation information</param>
            <param name="showDirtyFlags">true to show dirty flags value</param>
            <param name="showMaterialInfo">true to show material info</param>
            <param name="showMeshInfo">true to show mesh info</param>               
            <returns>string with detailed description of this object node</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfGeometryModel3DNode.GetClosestHitResult(SharpDX.Ray@,Ab3d.DirectX.DXHitTestContext)">
            <summary>
            GetClosestHitResult method returns a <see cref="T:Ab3d.DirectX.DXRayHitTestResult"/> with the closest triangle hit by the specified ray.
            When no triangle is hit, null is returned.
            </summary>
            <param name="localRay">SharpDX.Ray in local SceneNode coordinate system</param>
            <param name="hitTestContext">DXHitTestContext</param>
            <returns>DXRayHitTestResult with the closest triangle hit or null when no triangle is hit</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfGeometryModel3DNode.GetNextHitResult(SharpDX.Ray@,Ab3d.DirectX.DXHitTestContext,Ab3d.DirectX.DXRayHitTestResult)">
            <summary>
            GetNextHitResult method continues hit testing from the previously returned hit test and returns a <see cref="T:Ab3d.DirectX.DXRayHitTestResult"/>
            with the next hit triangle (not necessary the next closest triangle) or null if no other triangle is hit.
            This method can be used to get all hit results.
            </summary>
            <param name="localRay">SharpDX.Ray in local SceneNode coordinate system</param>
            <param name="hitTestContext">DXHitTestContext</param>
            <param name="previousHitResult">DXRayHitTestResult as result of the previous call to GetNextHitResult method or null if this is the first time this method is called</param>
            <returns>DXRayHitTestResult with the next triangle hit or null when no triangle is hit</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfGeometryModel3DNode.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Models.WpfLightNode">
            <summary>
            WpfLightNode represents a <see cref="T:Ab3d.DirectX.SceneNode"/> that contains a WPF's light.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Models.WpfLightNode.WpfLight">
            <summary>
            WPF Light that was used to create this WpfLightNode
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfLightNode.Light">
            <summary>
            Gets the DXEngine light defined by this SceneNode.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfLightNode.#ctor(System.Windows.Media.Media3D.Light,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="wpfWpfLight">WPF's light</param>
            <param name="name">optional name</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfLightNode.OnDXAttributeChanged(Ab3d.DirectX.DXAttributeType)">
            <summary>
            OnDXAttributeChanged is called from DXAttributeCollection when the attributeType is added, deleted or changed. 
            </summary>
            <param name="attributeType">changed DXAttributeType</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfLightNode.OnDisconnectingFromDXScene">
            <summary>
            OnDisconnectingFromDXScene is called when the SceneNode is about to be disconnected from DXScene (parentDXScene is not yet null).
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfLightNode.OnInitializeResources(Ab3d.DirectX.DXScene)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxScene">Parent DXScene used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfLightNode.IsMyWpfObject(System.Object)">
            <summary>
            IsMyWpfObject returns true is this SceneNode was created from the specified originalWpfObject.
            </summary>
            <param name="originalWpfObject">WPF object that is used to check this SceneNode</param>
            <returns>true is this SceneNode was created from the specified originalWpfObject</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfLightNode.OnWorldMatrixChanged">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfLightNode.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Models.WpfModel3DPolygonLineNode">
            <summary>
            WpfModel3DPolygonLineNode is a SceneNode that can render polygon edge lines for the specified Model3D.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfModel3DPolygonLineNode.Model3D">
            <summary>
            Gets the WPF's Model3DGroup or GeometryModel3D that was used to create this WpfModel3DGroupNode
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfModel3DPolygonLineNode.UseModelColor">
            <summary>
            Gets or sets a Boolean that specified if line color is get from the color of model's material (in case of SolidColor DiffuseMaterial) or the specified LineColor is always used.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfModel3DPolygonLineNode.LineMaterial">
            <summary>
            Gets or sets a LineMaterial that is used to render the 3D lines defined by this WpfModel3DPolygonLineNode.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfModel3DPolygonLineNode.#ctor(System.Windows.Media.Media3D.Model3D,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.Models.WpfModel3DPolygonLineNode"/> class.
            </summary>
            <param name="model3D">WPF's GeometryModel3D or Model3DGroup</param>
            <param name="name">name of this WpfGeometryModel3DNode (optional)</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfModel3DPolygonLineNode.OnInitializeResources(Ab3d.DirectX.DXScene)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxScene">Parent DXScene used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfModel3DPolygonLineNode.Update">
            <summary>
            Update method is called on each update phase (before render phase)
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfModel3DPolygonLineNode.CheckVisualCollectionComparer">
            <summary>
            Checks if there are any changes in the original Visual3DCollection and changes the child nodes accordingly
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfModel3DPolygonLineNode.UpdateBounds(System.Boolean)">
            <summary>
            Updates the bounds of this SceneNode if the dirty flags indicates that the bounds could be changed of if the forceUpdate parameter is set to true
            </summary>
            <param name="forceUpdate">if true than bounds are updated regardless of the SceneNode's dirty flags</param>
            <returns>true if bounds were changed</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfModel3DPolygonLineNode.OnIsVisibleChanged(System.Boolean)">
            <summary>
            OnIsVisibleChanged is called when IsVisible property is changed.
            </summary>
            <param name="newIsVisibleValue">new value of IsVisible property</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfModel3DPolygonLineNode.CollectRenderableObjects">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfModel3DPolygonLineNode.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Models.WpfModel3DGroupNode">
            <summary>
            WpfModel3DGroupNode represents a WPF's Model3DGroup as a <see cref="T:Ab3d.DirectX.SceneNode"/> and can render the Model3DGroup with DXEngine.
            WpfModel3DGroupNode creates child SceneNode objects from the Children of the Model3DGroup. 
            It can dynamically add new SceneNodes or remove them to reflect the changes in the Model3DGroup.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfModel3DGroupNode.MaterialEffect">
            <summary>
            Gets the Effect that will be used as default effect to generate the child SceneNodes.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Models.WpfModel3DGroupNode.IsCheckingChildrenForChanges">
            <summary>
            Gets or sets a Boolean that specifies if on each Update call (on each WPF's Rendering event) WpfModel3DGroupNode is checking if fModel3DGroup.Children has changed.
            Default value is true.
            </summary>
            <remarks>
            <para>
            <b>IsCheckingChildrenForChanges</b> gets or sets a Boolean that specifies if on each Update call (on each WPF's Rendering event) WpfModel3DGroupNode is checking if fModel3DGroup.Children has changed.
            </para>
            <para>
            WPF does not provide any event or notification when the Model3DGroup.Children collection is changed.
            Therefore WpfModel3DGroupNode needs to manually check for Children changes on each WPF's rendering event.
            </para>
            <para>
            When there are a lot of Model3DGroup objects in the scene and they are not changed, 
            then setting IsCheckingChildrenForChanges to false improves Update performance.
            </para>
            <para>
            By default IsCheckingChildrenForChanges is set to true except for all objects derived from the the Ab3d.Visuals.BaseModelVisual3D (BoxVisual3D, SphereVisual3D, etc.).
            </para>
            <para>
            Default value is true.
            </para>    
            <para>
            This property is similar to the <see cref="F:Ab3d.DirectX.Models.WpfModelVisual3DNode.IsCheckingChildrenForChanges"/> property on WpfModelVisual3DNode.
            </para>    
            </remarks>
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfModel3DGroupNode.Model3DGroup">
            <summary>
            Gets the WPF's Model3DGroup or GeometryModel3D that was used to create this WpfModel3DGroupNode
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfModel3DGroupNode.#ctor(System.Windows.Media.Media3D.Model3DGroup,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.Models.WpfModel3DGroupNode"/> class.
            </summary>
            <param name="model3DGroup">WPF's Model3DGroup</param>
            <param name="name">name of this WpfModel3DGroupNode (optional)</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfModel3DGroupNode.#ctor(System.Windows.Media.Media3D.Model3DGroup,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,Ab3d.DirectX.Effect)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.Models.WpfModel3DGroupNode"/> class.
            </summary>
            <param name="model3DGroup">WPF's Model3DGroup</param>
            <param name="namedObjects">Dictionary of named objects</param>
            <param name="name">name of this WpfModel3DGroupNode (optional)</param>
            <param name="materialEffect">Effect that will render this WpfGeometryModel3DNode; if null, a standard effect will be used (effect set in EffectsManager as standard effect)</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfModel3DGroupNode.#ctor(System.Windows.Media.Media3D.Model3DGroup,System.Collections.Generic.Dictionary{System.Object,System.String},System.String,Ab3d.DirectX.Effect)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.Models.WpfModel3DGroupNode"/> class.
            </summary>
            <param name="model3DGroup">WPF's Model3DGroup</param>
            <param name="objectNames">Dictionary of object names</param>
            <param name="name">name of this WpfModel3DGroupNode (optional)</param>
            <param name="materialEffect">Effect that will render this WpfGeometryModel3DNode; if null, a standard effect will be used (effect set in EffectsManager as standard effect)</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfModel3DGroupNode.OnInitializeResources(Ab3d.DirectX.DXScene)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxScene">Parent DXScene used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfModel3DGroupNode.Update">
            <summary>
            Update method is called on each update phase (before render phase)
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfModel3DGroupNode.OnWorldMatrixChanged">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfModel3DGroupNode.RefreshChildNodes">
            <summary>
            Checks if there are any changes in the original Visual3DCollection and changes the child nodes accordingly
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfModel3DGroupNode.RecreateChildNodes">
            <summary>
            RecreateChildNodes method clears the existing child nodes and creates them again.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfModel3DGroupNode.CollectRenderableObjects">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfModel3DGroupNode.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Models.WpfModelVisual3DNode">
            <summary>
            WpfModelVisual3DNode represents a WPF's ModelVisual3D as a <see cref="T:Ab3d.DirectX.SceneNode"/> and can render the ModelVisual3D with DXEngine.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Models.WpfModelVisual3DNode.IsCheckingChildrenForChanges">
            <summary>
            Gets or sets a Boolean that specifies if on each Update call (on each WPF's Rendering event) WpfModelVisual3DNode is checking if ModelVisual3D.Children has changed.
            By default all checking is disabled for all objects derived from the Ab3d.Visuals.BaseModelVisual3D (BoxVisual3D, SphereVisual3D, etc.).
            </summary>
            <remarks>
            <para>
            <b>IsCheckingChildrenForChanges</b> gets or sets a Boolean that specifies if on each Update call (on each WPF's Rendering event) WpfModelVisual3DNode is checking if ModelVisual3D.Children has changed.
            </para>
            <para>
            WPF does not provide any event or notification when the ModelVisual3D.Children collection is changed.
            Therefore WpfModelVisual3DNode needs to manually check for Children changes on each WPF's rendering event.
            </para>
            <para>
            When there are a lot of ModelVisual3D objects in the scene (for example many Ab3d.Visuals.BoxVisual3D objects), checking for Childen collection changes can take long time and can significantly reduce frame rate.
            </para>
            <para>
            By default IsCheckingChildrenForChanges is set to true except for all objects derived from the the Ab3d.Visuals.BaseModelVisual3D (BoxVisual3D, SphereVisual3D, etc.).
            </para>
            <para>
            This property is similar to the <see cref="F:Ab3d.DirectX.Models.WpfModel3DGroupNode.IsCheckingChildrenForChanges"/> property on WpfModel3DGroupNode.
            </para>    
            </remarks>
        </member>
        <member name="F:Ab3d.DirectX.Models.WpfModelVisual3DNode.IsCheckingChildrenForChangesDefaultValue">
            <summary>
            Gets or sets a static Boolean value that specifies the default value for IsCheckingChildrenForChanges. By default the IsCheckingChildrenForChanges is set to true except for all objects derived from Ab3d.Visuals.BaseModelVisual3D (BoxVisual3D, SphereVisual3D, etc.).
            But you can set this static field to true and manually set the IsCheckingChildrenForChanges to false on a few objects that you want to check for children changes.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Models.WpfModelVisual3DNode.IsPreservingHiddenObjectsInMemory">
            <summary>
            Gets or sets a static Boolean value that specifies if DXEngine optimizes handling of IsVisible property for objects derived from BaseVisual3D from Ab3d.PowerToys library.
            In case the value is true and IsVisible property is set to false, then all the DirectX and WPF objects are preserved in the memory so that when IsVisible is set back to true this can happen instantly (without any creation of DirectX resources).
            Default value is true.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfModelVisual3DNode.MaterialEffect">
            <summary>
            Gets or sets the Effect that will render this WpfGeometryModel3DNode. If null, a standard effect will be used (effect set in EffectsManager as standard effect)
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfModelVisual3DNode.ModelVisual3D">
            <summary>
            Gets the WPF's ModelVisual3D that is used to initialize this WpfModelVisual3DNode
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfModelVisual3DNode.OptimizeWpfIsVisibleChangeProcessing">
            <summary>
            Gets or sets a static Boolean value that specifies if Abd3.DXEngine optimizes handling the IsVisible property changes.
            When this is optimized, the 3D objects are not removed from the scene tree but are just skipped when rendering.
            This means that all the DirectX resources are preserved and the change from hidden to visible objects is very fast.
            When false, the objects that are hidden are removed from scene tree.
            This property do not have any effect when scene is not rendered with Abd3.DXEngine.
            See remarks for more info.
            Default value is true.
            </summary>
            <remarks>
            <para>
            Gets or sets a static Boolean value that specifies if DXEngine optimizes handling the IsVisible property changes.
            </para>
            <para>
            When this is optimized, the 3D objects are not removed from the scene tree but are just skipped when rendering.
            This means that all the DirectX resources are preserved and the change from hidden to visible objects is very fast.
            </para>
            <para>
            A problem with optimized path is that when WPF hit testing is used, the hidden objects will still be part of the WPF objects tree and will receive hit tests.
            This means that you will need to handle that with filter callback or with skipping that objects in HitTest callback.
            Another way to solve this is to use EventManager3D that automatically handle that case or to use hit testing from DXEngine.
            But you can also disable that optimization with setting OptimizeWpfIsVisibleChangeProcessing to false (this must be done before the scene is created).
            </para>
            <para>
            When false, the objects that are hidden are removed from scene tree.
            </para>
            <para>
            This property do not have any effect when scene is not rendered with Abd3.DXEngine.
            </para>
            <para>
            Default value is true.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfModelVisual3DNode.#ctor(System.Windows.Media.Media3D.ModelVisual3D)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.Models.WpfModelVisual3DNode"/> class.
            </summary>
            <param name="modelVisual3D">WPF's ModelVisual3D</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfModelVisual3DNode.#ctor(System.Windows.Media.Media3D.ModelVisual3D,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,Ab3d.DirectX.Effect)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.Models.WpfModelVisual3DNode"/> class.
            </summary>
            <param name="modelVisual3D">WPF's ModelVisual3D</param>
            <param name="namedObjects">Dictionary of named objects</param>
            <param name="name">name of this WpfGeometryModel3DNode (optional)</param>
            <param name="materialEffect">Effect that will render this WpfGeometryModel3DNode; if null, a standard effect will be used (effect set in EffectsManager as standard effect)</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfModelVisual3DNode.#ctor(System.Windows.Media.Media3D.ModelVisual3D,System.Collections.Generic.Dictionary{System.Object,System.String},System.String,Ab3d.DirectX.Effect)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.Models.WpfModelVisual3DNode"/> class.
            </summary>
            <param name="modelVisual3D">WPF's ModelVisual3D</param>
            <param name="objectNames">Dictionary of object names</param>
            <param name="name">name of this WpfGeometryModel3DNode (optional)</param>
            <param name="materialEffect">Effect that will render this WpfGeometryModel3DNode; if null, a standard effect will be used (effect set in EffectsManager as standard effect)</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfModelVisual3DNode.Update">
            <summary>
            Update method is called on each update phase (before render phase)
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfModelVisual3DNode.OnWorldMatrixChanged">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfModelVisual3DNode.RecreateContentSceneNode">
            <summary>
            Recreates the SceneNode based on the ModelVisual3D's Content property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfModelVisual3DNode.OnInitializeResources(Ab3d.DirectX.DXScene)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxScene">Parent DXScene used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfModelVisual3DNode.CollectRenderableObjects">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfModelVisual3DNode.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Models.WpfOptimizedModel3DGroupNode">
            <summary>
            WpfOptimizedModel3DGroupNode represents a <see cref="T:Ab3d.DirectX.SceneNode"/> that is created from WPF's frozen Model3DGrup.
            The WpfOptimizedModel3DGroupNode optimizes the children so that they are rendered with as few draw calls as possible.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfOptimizedModel3DGroupNode.CombineModelsWithSameMaterial">
            <summary>
            Gets or sets a boolean that specifies if models with the same materials (same diffuse color and specular properties) are combined and rendered with one Draw call.
            If false the mesh geometries for all models are still combined into one vertex and index buffer, but each model is rendered with its own material and with its own Draw call.
            This is useful when the material of the objects is changed.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Models.WpfOptimizedModel3DGroupNode.DefaultCombineModelsWithSameMaterial">
            <summary>
            Gets or sets a Boolean that specifies the default vale for <see cref="P:Ab3d.DirectX.Models.WpfOptimizedModel3DGroupNode.CombineModelsWithSameMaterial"/>. The default value is true.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfOptimizedModel3DGroupNode.MaterialEffect">
            <summary>
            Gets or sets the Effect that will render this WpfGeometryModel3DNode. If null, a standard effect will be used (effect set in EffectsManager as standard effect)
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfOptimizedModel3DGroupNode.DXMultiMeshGeometry3D">
            <summary>
            Gets the DXMultiMeshGeometry3D that is created to render front face materials.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfOptimizedModel3DGroupNode.DXMultiMeshGeometry3DWithBackMaterials">
            <summary>
            Gets the DXMultiMeshGeometry3D that is created to render back face materials.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfOptimizedModel3DGroupNode.Model3DGroup">
            <summary>
            Gets the WPF's Model3DGroup that is used to initialize this WpfOptimizedModel3DGroupNode
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfOptimizedModel3DGroupNode.AutomaticallyClearWpfObjectsAfterInitialization">
            <summary>
            Gets or sets a Boolean that specifies if all WPF objects will be cleaned (calling <see cref="M:Ab3d.DirectX.Models.WpfOptimizedModel3DGroupNode.ClearWpfObjects"/> method) when the DirectX objects are initialized (created from WPF objects).
            This can free a lot of memory for GC. Default value is false.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfOptimizedModel3DGroupNode.IsCastingShadow">
            <summary>
            Gets or sets a Boolean that specifies if this SceneNode is casing shadow.
            This means that if IsCastingShadow is true, then 3D objects rendered with this SceneNode will create shadow; 
            if false shadow will not be created. Default value is true.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfOptimizedModel3DGroupNode.IsReceivingShadow">
            <summary>
            Gets or sets a Boolean that specifies if this SceneNode can receive shadow - this means that the shadow is rendered on the object(s) rendered by this SceneNode.
            Default value is true.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfOptimizedModel3DGroupNode.#ctor(System.Windows.Media.Media3D.Model3DGroup,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.Models.WpfOptimizedModel3DGroupNode"/> class.
            </summary>
            <param name="model3DGroup">WPF's Model3DGroup</param>
            <param name="name">name of this WpfGeometryModel3DNode (optional)</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfOptimizedModel3DGroupNode.OnInitializeResources(Ab3d.DirectX.DXScene)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxScene">Parent DXScene used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfOptimizedModel3DGroupNode.ClearWpfObjects">
            <summary>
            Clears all references to WPF objects that were used to create this WpfOptimizedModel3DGroupNode. This can free a lot of memory for GC. See remarks for more info.
            </summary>
            <remarks>
            <para>
            <b>ClearWpfObjects</b> clears all references to WPF objects that were used to create this WpfOptimizedModel3DGroupNode. This can free a lot of memory for GC.
            </para>
            <para>
            The method sets the <see cref="P:Ab3d.DirectX.Models.WpfOptimizedModel3DGroupNode.Model3DGroup"/> to null and also clears a few private collections that hold references to the WPF objects.
            </para>
            <para>
            IMPORTANT:<br/>
            Note that before the WPF objects can be freed by GC, you also need to remove its usage from the Viewport3D child objects.
            This can be done with adding this SceneNode to DXScene or with using SceneNodeVisual3D.
            </para>
            </remarks>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfOptimizedModel3DGroupNode.UpdateBounds(System.Boolean)">
            <summary>
            Updates the bounds of this SceneNode if the dirty flags indicates that the bounds could be changed of if the forceUpdate parameter is set to true
            </summary>
            <param name="forceUpdate">if true than bounds are updated regardless of the SceneNode's dirty flags</param>
            <returns>true if bounds were changed</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfOptimizedModel3DGroupNode.OnWorldMatrixChanged">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfOptimizedModel3DGroupNode.OnIsVisibleChanged(System.Boolean)">
            <summary>
            OnIsVisibleChanged is called when IsVisible property is changed.
            </summary>
            <param name="newIsVisibleValue">new value of IsVisible property</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfOptimizedModel3DGroupNode.CollectRenderableObjects">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfOptimizedModel3DGroupNode.GetClosestHitResult(SharpDX.Ray@,Ab3d.DirectX.DXHitTestContext)">
            <summary>
            GetClosestHitResult method returns a <see cref="T:Ab3d.DirectX.DXRayHitTestResult"/> with the closest triangle hit by the specified ray.
            When no triangle is hit, null is returned.
            </summary>
            <param name="localRay">SharpDX.Ray in local SceneNode coordinate system</param>
            <param name="hitTestContext">DXHitTestContext</param>
            <returns>DXRayHitTestResult with the closest triangle hit or null when no triangle is hit</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfOptimizedModel3DGroupNode.GetNextHitResult(SharpDX.Ray@,Ab3d.DirectX.DXHitTestContext,Ab3d.DirectX.DXRayHitTestResult)">
            <summary>
            GetNextHitResult method continues hit testing from the previously returned hit test and returns a <see cref="T:Ab3d.DirectX.DXRayHitTestResult"/>
            with the next hit triangle (not necessary the next closest triangle) or null if no other triangle is hit.
            This method can be used to get all hit results.
            </summary>
            <param name="localRay">SharpDX.Ray in local SceneNode coordinate system</param>
            <param name="hitTestContext">DXHitTestContext</param>
            <param name="previousHitResult">DXRayHitTestResult as result of the previous call to GetNextHitResult method or null if this is the first time this method is called</param>
            <returns>DXRayHitTestResult with the next triangle hit or null when no triangle is hit</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfOptimizedModel3DGroupNode.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Models.WpfUIElement3DNode">
            <summary>
            WpfUIElement3DNode represents a WPF's UIElement2D as a <see cref="T:Ab3d.DirectX.SceneNode"/> and can render its Model3D with DXEngine.
            </summary>
            <remarks>
            <para>
            <b>WpfUIElement3DNode</b> represents a WPF's UIElement2D as a <see cref="T:Ab3d.DirectX.SceneNode"/> and can render its Model3D with DXEngine.
            </para>
            <para>
            IMPORTANT:<br/>
            WpfUIElement3DNode can only show 3D models but does not support the input events on the UIElement3D (MouseEnter, MouseMove, etc.).
            Those events cannot be supported because Viewport3D control is not visible and does not provide the events to the UIElement3D.
            </para>
            <para>
            Instead of using events on UIElement3D, you can use EventManager3D from Ab3d.PowerToys library. The events in EventManager3D are fully supported in Ab3d.DXEngine.
            If this is not an option, then you will need to use WPF 3D rendering instead of DirectX rendering. 
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfUIElement3DNode.UIElement3D">
            <summary>
            Gets the WPF's UIElement3D that is used to initialize this WpfUIElement3DNode
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfUIElement3DNode.MaterialEffect">
            <summary>
            Gets or sets the Effect that will render this WpfGeometryModel3DNode. If null, a standard effect will be used (effect set in EffectsManager as standard effect)
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfUIElement3DNode.#ctor(System.Windows.UIElement3D)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.Models.WpfUIElement3DNode"/> class.
            </summary>
            <param name="uiElement3D">WPF's UIElement3D</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfUIElement3DNode.#ctor(System.Windows.UIElement3D,System.Collections.Generic.Dictionary{System.Object,System.String},System.String,Ab3d.DirectX.Effect)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.Models.WpfUIElement3DNode"/> class.
            </summary>
            <param name="uiElement3D">WPF's UIElement3D</param>
            <param name="objectNames">Dictionary of object names</param>
            <param name="name">name of this WpfGeometryModel3DNode (optional)</param>
            <param name="materialEffect">Effect that will render this WpfGeometryModel3DNode; if null, a standard effect will be used (effect set in EffectsManager as standard effect)</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfUIElement3DNode.#ctor(System.Windows.UIElement3D,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,Ab3d.DirectX.Effect)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.Models.WpfUIElement3DNode"/> class.
            </summary>
            <param name="uiElement3D">WPF's UIElement3D</param>
            <param name="namedObjects">Dictionary of named objects</param>
            <param name="name">name of this WpfGeometryModel3DNode (optional)</param>
            <param name="materialEffect">Effect that will render this WpfGeometryModel3DNode; if null, a standard effect will be used (effect set in EffectsManager as standard effect)</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfUIElement3DNode.Refresh">
            <summary>
            Refresh regenerates the SceneNodes that are created from UIElement3D.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfUIElement3DNode.Update">
            <summary>
            Update method is called on each update phase (before render phase)
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfUIElement3DNode.OnInitializeResources(Ab3d.DirectX.DXScene)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxScene">Parent DXScene used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfUIElement3DNode.RecreateContentSceneNode">
            <summary>
            Recreates the SceneNode based on the ModelVisual3D's Content property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfUIElement3DNode.CollectRenderableObjects">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfUIElement3DNode.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Models.WpfVisual3DCollectionNode">
            <summary>
            WpfVisual3DCollectionNode represents a <see cref="T:Ab3d.DirectX.SceneNode"/> that is created from WPF's Visual3DCollection.
            WpfVisual3DCollectionNode creates child SceneNode objects from the Children of the Visual3DCollection. 
            It can dynamically add new SceneNodes or remove them to reflect the changes in the Visual3DCollection.
            </summary>    
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfVisual3DCollectionNode.MaterialEffect">
            <summary>
            Gets or sets the Effect that will render this WpfGeometryModel3DNode. If null, a standard effect will be used (effect set in EffectsManager as standard effect)
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfVisual3DCollectionNode.Visuals">
            <summary>
            Gets the WPF's Visual3DCollection that is used to initialize this WpfVisual3DCollectionNode
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfVisual3DCollectionNode.IsCheckingForChanges">
            <summary>
            Gets or sets a Boolean that specifies if WpfVisual3DCollectionNode is automatically checking for changes in the <see cref="P:Ab3d.DirectX.Models.WpfVisual3DCollectionNode.Visuals"/> (Visual3DCollection).
            When true (by default), then in each Update call the Visual3DCollection is checked for changes.
            When false, then user should call <see cref="M:Ab3d.DirectX.Models.WpfVisual3DCollectionNode.NotifyChanges(System.Collections.Generic.List{System.Windows.Media.Media3D.Visual3D},System.Collections.Generic.List{System.Windows.Media.Media3D.Visual3D})"/> method when the Visual3DCollection is changed.
            It is recommended to set this property before the InitializeResources is called (before this SceneNodes is added to parent SceneNode).
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfVisual3DCollectionNode.#ctor(System.Windows.Media.Media3D.Visual3DCollection,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.Models.WpfVisual3DCollectionNode"/> class.
            </summary>
            <param name="visuals">WPF's Visual3DCollection</param>
            <param name="name">name of this WpfGeometryModel3DNode (optional)</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfVisual3DCollectionNode.#ctor(System.Windows.Media.Media3D.Visual3DCollection,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,Ab3d.DirectX.Effect)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.Models.WpfVisual3DCollectionNode"/> class.
            </summary>
            <param name="visuals">WPF's Visual3DCollection</param>
            <param name="namedObjects">Dictionary of named objects</param>
            <param name="name">name of this WpfGeometryModel3DNode (optional)</param>
            <param name="materialEffect">Effect that will render this WpfGeometryModel3DNode; if null, a standard effect will be used (effect set in EffectsManager as standard effect)</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfVisual3DCollectionNode.#ctor(System.Windows.Media.Media3D.Visual3DCollection,System.Collections.Generic.Dictionary{System.Object,System.String},System.String,Ab3d.DirectX.Effect)">
            <summary>
            Initializes a new instance of the <see cref="T:Ab3d.DirectX.Models.WpfVisual3DCollectionNode"/> class.
            </summary>
            <param name="visuals">WPF's Visual3DCollection</param>
            <param name="objectNames">Dictionary of object names</param>
            <param name="name">name of this WpfGeometryModel3DNode (optional)</param>
            <param name="materialEffect">Effect that will render this WpfGeometryModel3DNode; if null, a standard effect will be used (effect set in EffectsManager as standard effect)</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfVisual3DCollectionNode.OnInitializeResources(Ab3d.DirectX.DXScene)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxScene">Parent DXScene used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfVisual3DCollectionNode.Update">
            <summary>
            Update method is called on each update phase (before render phase)
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfVisual3DCollectionNode.OnWorldMatrixChanged">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfVisual3DCollectionNode.RefreshChildNodes">
            <summary>
            Checks if there are any changes in the original Visual3DCollection and changes the child nodes accordingly
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfVisual3DCollectionNode.NotifyChanges(System.Collections.Generic.List{System.Windows.Media.Media3D.Visual3D},System.Collections.Generic.List{System.Windows.Media.Media3D.Visual3D})">
            <summary>
            NotifyChanges method should be called when <see cref="P:Ab3d.DirectX.Models.WpfVisual3DCollectionNode.IsCheckingForChanges"/> is set to false and it informs this WpfVisual3DCollectionNode about the changes in the Visual3DCollection.
            If both parameters are null, then all the child SceneNodes are recreated.
            </summary>
            <param name="addedVisuals">list of added Visual3D objects</param>
            <param name="removedVisuals">list of removed Visual3D objects</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfVisual3DCollectionNode.RecreateChildNodes">
            <summary>
            Disposed the existing child SceneNodes and recreates all SceneNodes
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfVisual3DCollectionNode.CollectRenderableObjects">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfVisual3DCollectionNode.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Models.WpfWireframeVisual3DNode">
            <summary>
            WpfWireframeVisual3DNode represents a Ab3d.PowerToys's WireframeVisual3D as a <see cref="T:Ab3d.DirectX.SceneNode"/>.
            The WpfWireframeVisual3DNode is optimized to render the wireframe and solid objects with hardware created wireframe rendering.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfWireframeVisual3DNode.WireframeVisual3D">
            <summary>
            Gets the WireframeVisual3D (as Visual3D) that is used to initialize this WpfWireframeVisual3DNode.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfWireframeVisual3DNode.DepthBias">
            <summary>
            Gets or sets a float that represents a depth bias - used to move the wireframe away from solid geometry to prevent partial hiding the 3D lines in the solid geometry.
            </summary>
        </member>
        <member name="P:Ab3d.DirectX.Models.WpfWireframeVisual3DNode.ReadZBuffer">
            <summary>
            Gets or sets a float that represents a depth bias - used to move the wireframe away from solid geometry to prevent partial hiding the 3D lines in the solid geometry.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfWireframeVisual3DNode.#ctor(System.Windows.Media.Media3D.ModelVisual3D,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="wireframeVisual3D">Ab3d.PowerToys's WireframeVisual3D</param>
            <param name="name">optional name</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfWireframeVisual3DNode.Update">
            <summary>
            Update method is called on each update phase (before render phase)
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfWireframeVisual3DNode.UpdateBounds(System.Boolean)">
            <summary>
            Updates the bounds of this SceneNode if the dirty flags indicates that the bounds could be changed of if the forceUpdate parameter is set to true
            </summary>
            <param name="forceUpdate">if true than bounds are updated regardless of the SceneNode's dirty flags</param>
            <returns>true if bounds were changed</returns>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfWireframeVisual3DNode.OnInitializeResources(Ab3d.DirectX.DXScene)">
            <summary>
            Initializes resources.
            </summary>
            <param name="dxScene">Parent DXScene used to initialize resources</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfWireframeVisual3DNode.RecreateChildNodes">
            <summary>
            RecreateChildNodes recreates the DXEngine objects used to render the WireframeVisual3D.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfWireframeVisual3DNode.OnIsVisibleChanged(System.Boolean)">
            <summary>
            OnIsVisibleChanged is called when IsVisible property is changed.
            </summary>
            <param name="newIsVisibleValue">new value of IsVisible property</param>
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfWireframeVisual3DNode.CollectRenderableObjects">
            <inheritdoc />
        </member>
        <member name="M:Ab3d.DirectX.Models.WpfWireframeVisual3DNode.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.DirectX.Models.WpfWireframeVisual3DNode.DynamicWireframeVisual3D.WireframeTypes">
            <summary>
            WireframeType enum defines the possible types of showing wireframe model.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Models.WpfWireframeVisual3DNode.DynamicWireframeVisual3D.WireframeTypes.None">
            <summary>
            Nothing is shown.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Models.WpfWireframeVisual3DNode.DynamicWireframeVisual3D.WireframeTypes.Wireframe">
            <summary>
            Only wireframe of the model is shown.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Models.WpfWireframeVisual3DNode.DynamicWireframeVisual3D.WireframeTypes.OriginalSolidModel">
            <summary>
            Only unchanged original model is shown.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Models.WpfWireframeVisual3DNode.DynamicWireframeVisual3D.WireframeTypes.WireframeWithOriginalSolidModel">
            <summary>
            Wireframe is shown on top of unchanged original model.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Models.WpfWireframeVisual3DNode.DynamicWireframeVisual3D.WireframeTypes.SingleColorSolidModel">
            <summary>
            Only original model with material set to SolidModelColor is shown.
            </summary>
        </member>
        <member name="F:Ab3d.DirectX.Models.WpfWireframeVisual3DNode.DynamicWireframeVisual3D.WireframeTypes.WireframeWithSingleColorSolidModel">
            <summary>
            Wireframe is shown on top of original model with material set to SolidModelColor.
            </summary>
        </member>
        <member name="T:Ab3d.DirectX.DXWireframeHelper">
            <summary>
            DXWireframeHelper class contains methods that can be used to annotate ModelVisual3D or Model3D with special property that is used by DXEngine to render the objects with the specified wireframe settings.
            </summary>
        </member>
        <member name="M:Ab3d.DirectX.DXWireframeHelper.SetLineMaterial(System.Windows.Media.Media3D.ModelVisual3D,System.Double,System.Windows.Media.Color,System.Boolean)">
            <summary>
            SetLineMaterial method annotates ModelVisual3D with special property that is used by DXEngine to render the objects with the specified wireframe settings
            </summary>
            <param name="visual3D">ModelVisual3D</param>
            <param name="lineThickness">line thickness</param>
            <param name="lineColor">line color</param>
            <param name="preserveLineColor">if true than line color is get from the color of the Material used by the GeometryModel3D; if false the lineColor is used for all lines</param>
        </member>
        <member name="M:Ab3d.DirectX.DXWireframeHelper.SetLineMaterial(System.Windows.Media.Media3D.Model3D,System.Double,System.Windows.Media.Color,System.Boolean)">
            <summary>
            SetLineMaterial method annotates Model3D with special property that is used by DXEngine to render the objects with the specified wireframe settings
            </summary>
            <param name="model">Model3D</param>
            <param name="lineThickness">line thickness</param>
            <param name="lineColor">line color</param>
            <param name="preserveLineColor">if true than line color is get from the color of the Material used by the GeometryModel3D; if false the lineColor is used for all lines</param>
        </member>
        <member name="M:Ab3d.DirectX.DXWireframeHelper.SetLineMaterial(System.Windows.Media.Media3D.Model3D,Ab3d.DirectX.Materials.LineMaterial,System.Boolean)">
            <summary>
            SetLineMaterial method annotates Model3D with special property that is used by DXEngine to render the objects with the specified wireframe settings
            </summary>
            <param name="model">Model3D</param>
            <param name="lineMaterial">LineMaterial object with wireframe settings</param>
            <param name="preserveLineColor">if true than line color is get from the color of the Material used by the GeometryModel3D; if false the lineColor is used for all lines</param>
        </member>
        <member name="M:Ab3d.DirectX.DXWireframeHelper.ClearLineMaterial(System.Windows.Media.Media3D.ModelVisual3D,Ab3d.DirectX.DXDevice)">
            <summary>
            Removes DXEngine's line material from the specified ModelVisual3D
            </summary>
            <param name="visual3D">ModelVisual3D</param>
            <param name="parentDXDevice">DXDevice that was used to show ModelVisual3D in DXEngine</param>
        </member>
        <member name="M:Ab3d.DirectX.DXWireframeHelper.ClearLineMaterial(System.Windows.Media.Media3D.Model3D,Ab3d.DirectX.DXDevice)">
            <summary>
            Removes DXEngine's line material from the specified Model3D
            </summary>
            <param name="model">Model3D</param>
            <param name="parentDXDevice">DXDevice that was used to show Model3D in DXEngine</param>
        </member>
        <member name="M:Ab3d.DirectX.DXWireframeHelper.SetLineMaterial(System.Windows.Media.Media3D.ModelVisual3D,System.Double,System.Windows.Media.Color,System.Boolean,Ab3d.DirectX.DXDevice)">
            <summary>
            SetLineMaterial method annotates ModelVisual3D with special property that is used by DXEngine to render the objects with the specified wireframe settings
            </summary>
            <param name="visual3D">ModelVisual3D</param>
            <param name="lineThickness">line thickness</param>
            <param name="lineColor">line color</param>
            <param name="preserveLineColor">if true than line color is get from the color of the Material used by the GeometryModel3D; if false the lineColor is used for all lines</param>
            <param name="parentDXDevice">DXDevice that was used to show ModelVisual3D in DXEngine</param>
        </member>
        <member name="M:Ab3d.DirectX.DXWireframeHelper.SetLineMaterial(System.Windows.Media.Media3D.Model3D,System.Double,System.Windows.Media.Color,System.Boolean,Ab3d.DirectX.DXDevice)">
            <summary>
            SetLineMaterial method annotates Model3D with special property that is used by DXEngine to render the objects with the specified wireframe settings
            </summary>
            <param name="model">Model3D</param>
            <param name="lineThickness">line thickness</param>
            <param name="lineColor">line color</param>
            <param name="preserveLineColor">if true than line color is get from the color of the Material used by the GeometryModel3D; if false the lineColor is used for all lines</param>
            <param name="parentDXDevice">DXDevice that was used to show Model3D in DXEngine</param>
        </member>
        <member name="M:Ab3d.DirectX.DXWireframeHelper.SetLineMaterial(System.Windows.Media.Media3D.Model3D,Ab3d.DirectX.Materials.LineMaterial,System.Boolean,Ab3d.DirectX.DXDevice)">
            <summary>
            SetLineMaterial method annotates Model3D with special property that is used by DXEngine to render the objects with the specified wireframe settings
            </summary>
            <param name="model">Model3D</param>
            <param name="lineMaterial">LineMaterial object with wireframe settings</param>
            <param name="preserveLineColor">if true than line color is get from the color of the Material used by the GeometryModel3D; if false the lineColor is used for all lines</param>
            <param name="parentDXDevice">DXDevice that was used to generate the dxMaterial - this parameted can be null when the dxMaterial was already initialized (in this case the parentDXDevice is get from the dxMaterial)</param>
        </member>
        <member name="M:Ab3d.DirectX.DXWireframeHelper.GetMaterialColor(Ab3d.DirectX.Material,SharpDX.Color4)">
            <summary>
            Returns Color4 that is get from the material's color. If the color cannot be get from material, than default color is returned.
            </summary>
            <param name="material">material</param>
            <param name="defaultColor">default color used when color cannot be determined from material</param>
            <returns>Color4 that is get from the  material's color</returns>
        </member>
        <member name="M:Ab3d.DirectX.DXWireframeHelper.GetMaterialColor(System.Windows.Media.Media3D.Material,SharpDX.Color4)">
            <summary>
            Returns Color4 that is get from the WPF material's color. If the color cannot be get from material, than default color is returned.
            </summary>
            <param name="material">WPF material</param>
            <param name="defaultColor">default color used when color cannot be determined from WPF material</param>
            <returns>Color4 that is get from the WPF material's color</returns>
        </member>
        <member name="T:Ab3d.Common.Color3TypeConverter">
            <summary>
            Color3TypeConverter is a TypeConverter that can convert string to SharpDX's Color3
            </summary>
        </member>
        <member name="M:Ab3d.Common.Color3TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter.
            </summary>
            <param name="context">context</param>
            <param name="sourceType">sourceType</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Ab3d.Common.Color3TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type.
            </summary>
            <param name="context">context</param>
            <param name="destinationType">destinationType</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Ab3d.Common.Color3TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter.
            </summary>
            <param name="context">context</param>
            <param name="culture">culture</param>
            <param name="value">value</param>
            <returns>DiffuseMaterial object</returns>
        </member>
        <member name="T:Ab3d.Common.FloatTypeConverter">
            <summary>
            FloatTypeConverter is a TypeConverter that can convert string to float
            </summary>
        </member>
        <member name="M:Ab3d.Common.FloatTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter.
            </summary>
            <param name="context">context</param>
            <param name="sourceType">sourceType</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Ab3d.Common.FloatTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type.
            </summary>
            <param name="context">context</param>
            <param name="destinationType">destinationType</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Ab3d.Common.FloatTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter.
            </summary>
            <param name="context">context</param>
            <param name="culture">culture</param>
            <param name="value">value</param>
            <returns>DiffuseMaterial object</returns>
        </member>
        <member name="T:Ab3d.Common.Vector3TypeConverter">
            <summary>
            Vector3TypeConverter is a TypeConverter that can convet string into Vector3
            </summary>
        </member>
        <member name="M:Ab3d.Common.Vector3TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter.
            </summary>
            <param name="context">context</param>
            <param name="sourceType">sourceType</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Ab3d.Common.Vector3TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type.
            </summary>
            <param name="context">context</param>
            <param name="destinationType">destinationType</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Ab3d.Common.Vector3TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given value to the type of this converter.
            </summary>
            <param name="context">context</param>
            <param name="culture">culture</param>
            <param name="value">value</param>
            <returns>DiffuseMaterial object</returns>
        </member>
        <member name="T:Ab3d.Visuals.BaseDXVisual3D">
            <summary>
            BaseDXVisual3D is a base class for all Visual3D objects defined in DXEngine.
            Objects derived from BaseDXVisual3D can be added to WPF's Viewport3D.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.BaseDXVisual3D.IsWpf3DVisible">
            <summary>
            Gets a Boolean that specifies if this BaseDXVisual3D can show its content when rendered with WPF 3D objects.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.BaseDXVisual3D.Bounds">
            <summary>
            Gets a Rect3D that specifies the bounding box of the 3D objects shown with this Visual3D.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.BaseDXVisual3D.GetBounds">
            <summary>
            Returns a Rect3D that specifies the bounding box of the 3D objects shown with this Visual3D.
            </summary>
            <returns>Rect3D that specifies the bounding box of the 3D objects shown with this Visual3D</returns>
        </member>
        <member name="F:Ab3d.Visuals.BaseDXVisual3D.IsVisibleProperty">
            <summary>
            IsVisibleProperty
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.BaseDXVisual3D.IsVisible">
            <summary>
            Gets or sets a Boolean that specify if the object is visible.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.BaseDXVisual3D.OnIsVisiblePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnIsVisiblePropertyChanged
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="M:Ab3d.Visuals.BaseDXVisual3D.OnIsVisibleChanged(System.Boolean)">
            <summary>
            OnIsVisibleChanged is called when the IsVisible property is changed
            </summary>
            <param name="newIsVisibleValue">newIsVisibleValue as bool</param>
        </member>
        <member name="M:Ab3d.Visuals.BaseDXVisual3D.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.BaseDXVisual3D.Dispose(System.Boolean)">
            <summary>
            Dispose can be overridden in a derived class to dispose created resources (note that this method is called from the SceneNode.Disposing event handler so you do not need to dispose the SceneNode).
            </summary>
            <param name="disposing">disposing is true when we are called from Dispose method</param>
        </member>
        <member name="T:Ab3d.Visuals.InstancedMeshGeometryVisual3D">
            <summary>
            InstancedMeshGeometryVisual3D is a WPF Visual3D object that can be used to define a MeshGeometry3D that will be rendered multiple times as instances where each instace can have its own color and its own world matrix (defines scale, rotation and translation).
            When rendered with DirectX, InstancedMeshGeometryVisual3D provides the fastest way to render many MeshGeometry3D instances. When rendered with WPF, InstancedMeshGeometryVisual3D is rendered as multiple GeometryModel3D objects inside Model3DGroup.
            </summary>
            <remarks>
            <para>
            InstancedMeshGeometryVisual3D is a WPF Visual3D object that can be used to define a MeshGeometry3D that will be rendered multiple times as instances where each instace can have its own color and its own world matrix (defines scale, rotation and translation).
            </para>
            <para>
            When rendered with DirectX, InstancedMeshGeometryVisual3D provides <b>the fastest way to render many MeshGeometry3D instances</b>.
            </para>
            <para>
            The MeshGeometry3D object that is rendered with this InstancedMeshGeometryVisual3D need to be specified in the InstancedMeshGeometryVisual3D constructor.
            In the constructor you can also specify the <see cref="P:Ab3d.Visuals.InstancedMeshGeometryVisual3D.SpecularMaterial"/> that can be used for all instances (but can be null).
            </para>
            <para>
            The data about each instance that will be rendered are specified with <see cref="P:Ab3d.Visuals.InstancedMeshGeometryVisual3D.InstancesData"/> property.
            InstancesData is an array of <see cref="T:Ab3d.DirectX.InstanceData"/> structs. Each InstanceData defines a Matrix and Color.
            Matrix can be used to position the object (by defining the M41, M42, M43 fields), scale of the object (by defining M11, M22, M33) and rotation (with using method on the Matrix class).
            Color defines the color of this instance - same as using DiffuseMaterial with SolidColorBrush.
            If color has alpha value less the 1 (is semi-transparent), then see below for more information on how to render semi-transparent objects.
            </para>
            <para>
            To render <b>back faces</b> (back side of triangles) defined in the MeshGeometry3D, set the <see cref="P:Ab3d.Visuals.InstancedMeshGeometryVisual3D.IsBackFaceMaterial"/> to true.
            </para>
            <para>
            By default the InstancedMeshGeometryVisual3D is not <b>hit test visible</b> - this means that by default you cannot use WPF hit testing or subscribe on mouse events (MouseOver, MouseClick, etc.) with EventManager3D from Ab3d.PowerToys.
            To enable hit testing, set the <see cref="P:Ab3d.Visuals.InstancedMeshGeometryVisual3D.IsWpfHitTestVisible"/> property to true.<br/>
            IMPORTANT:<br/>
            When IsWpfHitTestVisible is true then InstancedMeshGeometryVisual3D always creates WPF's GeometryModel3D objects (one for each instance) that are used by WPF's hit testing.
            This can greatly increase initialization time.
            </para>
            <para>
            When GeometryModel3D objects are created with this InstancedMeshGeometryVisual3D, then a custom<see cref="F:Ab3d.Visuals.InstancedMeshGeometryVisual3D.InstanceIndexProperty"/> property is set to
            each created GeometryModel3D object. This property can be read with using modelHit.GetValue(InstancedMeshGeometryVisual3D.InstanceIndexProperty) to get 
            the instance index that was used to create the GeometryModel3D object. 
            </para>
            <para>
            When the values in the <see cref="P:Ab3d.Visuals.InstancedMeshGeometryVisual3D.InstancesData"/> are changed after the InstancedMeshGeometryVisual3D has been rendered,
            you need to call the <see cref="M:Ab3d.Visuals.InstancedMeshGeometryVisual3D.Update"/> or <see cref="M:Ab3d.Visuals.InstancedMeshGeometryVisual3D.Update(System.Int32,System.Int32,System.Boolean)"/> method 
            (call the overload without parameters when data for all instances are changed, call Update with parameters when only some instances data are changed).
            </para>
            <para>
            If you want to render many instances of Model3DGroup objects, you can use the <see cref="T:Ab3d.Visuals.InstancedModelGroupVisual3D"/>.
            </para>
            <para>
            When rendered with WPF, InstancedMeshGeometryVisual3D is rendered as multiple GeometryModel3D objects inside Model3DGroup.
            </para>    
            <para>
            <b>Rendering semi-transparent instances</b>
            </para>
            <para>
            When instances use semi-transparent colors (color's alpha is less than 1), the <see cref="P:Ab3d.Visuals.InstancedMeshGeometryVisual3D.UseAlphaBlend"/> property must be set to true.
            This will use alpha bending to blend the semi-transparent colors with already rendered 3D objects.
            </para>
            <para>
            If only some objects have transparent colors and the colors do not change, then it is recommended to split the instance objects into two InstancedMeshGeometryVisual3D
            objects - one with solid and the other with semi-transparent instances.
            </para>
            <para>
            When rendering semi-transparent objects, you need to define the InstancedMeshGeometryVisual3D after opaque 3D objects (in the WPF's tree view).
            Note that TransparencyHelper from Ab3d.PowerToys does not work with InstancedMeshGeometryVisual3D - it always considers InstancedMeshGeometryVisual3D as opaque object.
            </para>
            <para>
            Because semi-transparent objects are rendered with using alpha blending (blending semi-transparent color with already rendered objects),
            the order of positions need to be such, that the instances that farther away from the camera need to be added before those that are closer to the camera.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.Visuals.InstancedMeshGeometryVisual3D.IsWpf3DVisible">
            <summary>
            Gets a Boolean that specifies if this BaseDXVisual3D can show its content when rendered with WPF 3D objects.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.InstancedMeshGeometryVisual3D.InstancesData">
            <summary>
            Gets or sets an array of InstanceData structs that define the world transformations (positions, scales, rotations) and colors or instanced geometry objects.
            After each change of InstancesData user must call Update method.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.InstancedMeshGeometryVisual3D.MeshGeometry3D">
            <summary>
            Gets MeshGeometry3D that is used by this InstancedMeshGeometryVisual3D
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.InstancedMeshGeometryVisual3D.SpecularMaterial">
            <summary>
            Gets material that is used as a base material for this InstancedMeshGeometryVisual3D.
            BaseMaterial can provide additional specular material properties.
            After changing the property the <see cref="M:Ab3d.Visuals.InstancedMeshGeometryVisual3D.UpdateMaterial"/> method must be called.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.InstancedMeshGeometryVisual3D.TextureBitmap">
            <summary>
            When TextureBitmap is set to a BitmapSource, then this texture is used for all instances of the mesh (instance color is not used).
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.InstancedMeshGeometryVisual3D.TextureBlendState">
            <summary>
            Gets or sets a BlendState that is used to render the texture. If null then <see cref="P:Ab3d.DirectX.CommonStates.Opaque"/> or <see cref="P:Ab3d.DirectX.CommonStates.PremultipliedAlphaBlend"/> (for transparent materials) will be used.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.InstancedMeshGeometryVisual3D.TextureAlphaClipThreshold">
            <summary>
            TextureAlphaClipThreshold can be set when <see cref="P:Ab3d.Visuals.InstancedMeshGeometryVisual3D.TextureBitmap"/> is set.
            When its value is above 0 then pixels in texture with alpha color values below this value will be clipped (not rendered and their depth will not be written to depth buffer).
            Expected values are between 0 and 1.
            When 0 (by default) then alpha clipping is disabled - this means that also pixels with alpha value 0 are fully processed (they are not visible but its depth value is still written so objects that are rendered afterwards and are behind the pixel will not be visible).
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.InstancedMeshGeometryVisual3D.IsBackFaceMaterial">
            <summary>
            Gets or sets a Boolean that specifies if this InstancedMeshGeometryVisual3D is rendering front or back faces of the MeshGeometry3D.
            Default value is false which means that front face materials are rendered.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.InstancedMeshGeometryVisual3D.IsSolidColorMaterial">
            <summary>
            Gets or sets a Boolean that specifies if instanced objects are rendered with a solid color (without any shading based on lighting calculations). Default value is false.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.InstancedMeshGeometryVisual3D.UseAlphaBlend">
            <summary>
            Gets or sets a Boolean that specifies if alpha blending is used when rendering model instances.
            This can be used to render semi-transparent objects. Default value is false.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.InstancedMeshGeometryVisual3D.IsPreMultipliedAlphaColor">
            <summary>
            When IsPreMultipliedAlphaColor is true (false by default) and Alpha is less then 1, then the instance colors components are already multiplied with alpha value to produce pre-multiplied colors.
            When false, then non-pre-multiplied color is converted in pre-multiplied color when this is required by the shader.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.InstancedMeshGeometryVisual3D.IsWpfHitTestVisible">
            <summary>
            Gets or sets a Boolean that specifies if WPF hit testing can be done on the instanced 3D objects when rendered with DirectX hardware acceleration.
            When IsWpfHitTestVisible is true then InstancedMeshGeometryVisual3D always creates WPF's GeometryModel3D objects (one for each instance) that are used by WPF's hit testing.
            This can greatly increase initialization time. Default value is false.
            When showing instanced objects, it is recommended to use DXEngine hit testing that support fast hit testing on instanced objects and leave this property on false.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.InstancedMeshGeometryVisual3D.UseDynamicInstanceBuffer">
            <summary>
            Gets or sets a Boolean that specifies if dynamic instance buffer is created instead of immutable instance buffer.
            Dynamic instance buffer has better performance when instance data is changed often.
            On the other side the immutable buffer is better when the instance data is not changed or changed only a few times.
            Default value is false - use immutable buffer.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.InstancedMeshGeometryVisual3D.UseScreenSpaceScaling">
            <summary>
            When true (false by default) then each instance is scaled in the shader so that the value specified in matrix's M11
            defines the size of the rendered object on screen (when the size of the mesh is 1).
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.InstancedMeshGeometryVisual3D.InstanceIndexProperty">
            <summary>
            InstanceIndexProperty - set to GeometryModel3D objects that are created with InstancedMeshGeometryVisual3D.
            Its value is set to instance index and can be used in WPDF hit testing to get the index of the hit instance.
            Default value is -1 (returned when InstanceIndexProperty is not set).
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.InstancedMeshGeometryVisual3D.#ctor(System.Windows.Media.Media3D.MeshGeometry3D,System.Windows.Media.Media3D.SpecularMaterial)">
            <summary>
            Constructor
            </summary>
            <param name="meshGeometry3D">MeshGeometry3D</param>
            <param name="specularMaterial">SpecularMaterial used for all instances (null by default).</param>
        </member>
        <member name="M:Ab3d.Visuals.InstancedMeshGeometryVisual3D.Update">
            <summary>
            Update method updates the data for all instances.
            It must be called after InstancesData are changed.
            When only some other instances were changed, it is highly recommended to call <see cref="M:Ab3d.Visuals.InstancedMeshGeometryVisual3D.Update(System.Int32,System.Int32,System.Boolean)"/> and pass startIndex and count as parameters.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.InstancedMeshGeometryVisual3D.Update(System.Boolean)">
            <summary>
            Update method updates the data for all instances and provides a parameter to specify if bounding box need to be updated.
            </summary>
            <param name="updateBounds">when true, the bounding box of the InstancedMeshGeometryVisual3D will be updated (this can take some time but is needed when this object's bounds change the bounds of the whole scene)</param>
        </member>
        <member name="M:Ab3d.Visuals.InstancedMeshGeometryVisual3D.Update(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Update method updates instance data specified with startIndex, count parameters and updateBounds.
            This method can be called after some instance transformations or colors were changed.
            NOTE: If multiple sections of data are changed, do not call this method multiple times - it is faster to call <see cref="M:Ab3d.Visuals.InstancedMeshGeometryVisual3D.Update"/> only once.
            </summary>
            <param name="startIndex">index of the first instance that was changed and need to be updated</param>
            <param name="count">number of instances that were changed and need to be updated</param>
            <param name="updateBounds">when true, the bounding box of the InstancedMeshGeometryVisual3D will be updated (this can take some time but is needed when this object's bounds change the bounds of the whole scene)</param>
        </member>
        <member name="M:Ab3d.Visuals.InstancedMeshGeometryVisual3D.UseSingleObjectColor(System.Windows.Media.Color)">
            <summary>
            When UseSingleObjectColor is called, the specified objectColor is used as diffuse color for all instances.
            This overrides the color defined in the instances data. When color's alpha value is less than 1, then alpha blending is used.
            To use instance color after calling UseSingleObjectColor, call the <see cref="M:Ab3d.Visuals.InstancedMeshGeometryVisual3D.UseInstanceObjectColor"/> method.
            </summary>
            <param name="objectColor">color used for all instances</param>
        </member>
        <member name="M:Ab3d.Visuals.InstancedMeshGeometryVisual3D.UseInstanceObjectColor">
            <summary>
            UseInstanceObjectColor method can be called after calling the <see cref="M:Ab3d.Visuals.InstancedMeshGeometryVisual3D.UseSingleObjectColor(System.Windows.Media.Color)"/>.
            This method resets using diffuse color from instances data.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.InstancedMeshGeometryVisual3D.UpdateMaterial">
            <summary>
            UpdateMaterial updates the used specular material. It must be called after the SpecularMaterial is changed.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.InstancedMeshGeometryVisual3D.OnVisualParentChanged(System.Windows.DependencyObject)">
            <summary>
            OnVisualParentChanged
            </summary>
            <param name="oldParent">DependencyObject</param>
        </member>
        <member name="M:Ab3d.Visuals.InstancedMeshGeometryVisual3D.GetBounds">
            <summary>
            Returns a Rect3D that specifies the bounding box of the 3D objects shown with this Visual3D.
            </summary>
            <returns>Rect3D that specifies the bounding box of the 3D objects shown with this Visual3D</returns>
        </member>
        <member name="M:Ab3d.Visuals.InstancedMeshGeometryVisual3D.OnIsVisibleChanged(System.Boolean)">
            <summary>
            OnIsVisibleChanged is called when the IsVisible property is changed
            </summary>
            <param name="newIsActuallyVisible">newIsActuallyVisible as bool</param>
        </member>
        <member name="M:Ab3d.Visuals.InstancedMeshGeometryVisual3D.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Ab3d.Visuals.InstancedModelGroupVisual3D">
            <summary>
            InstancedModelGroupVisual3D is a WPF Visual3D object that can be used to define a Model3DGroup that will be rendered multiple times as instances where each instace can have its own world matrix (defines scale, rotation and translation).
            When rendered with DirectX, InstancedModelGroupVisual3D provides the fastest way to render many Model3DGroup instances.
            </summary>
            <remarks>
            <para>
            InstancedModelGroupVisual3D is a WPF Visual3D object that can be used to define a Model3DGroup that will be rendered multiple times as instances where each instace can have its own world matrix (defines scale, rotation and translation).
            </para>
            <para>
            When rendered with DirectX, InstancedModelGroupVisual3D provides the fastest way to render many Model3DGroup instances.
            </para>
            <para>
            InstancedModelGroupVisual3D renders the Model3DGroup with rendering each Child GeometryModel3D as instanced MeshGeometry3D where each instance has the same color - the one defined in the GeometryModel3D's Material or BackMaterial.
            </para>
            <para>
            Because InstancedModelGroupVisual3D uses MeshGeometry3D instancing, it can render only SolidColorBrush DiffuseMaterials.
            </para>
            <para>
            For more information about instanced rendering see remarks for <see cref="T:Ab3d.Visuals.InstancedMeshGeometryVisual3D"/>.
            </para>
            <para>
            If you want to render many instances of GeometryModel3D or MeshGeometry3D, then you can also use the <see cref="T:Ab3d.Visuals.InstancedMeshGeometryVisual3D"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.Visuals.InstancedModelGroupVisual3D.IsWpf3DVisible">
            <summary>
            Gets a Boolean that specifies if this BaseDXVisual3D can show its content when rendered with WPF 3D objects.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.InstancedModelGroupVisual3D.InstancesData">
            <summary>
            Gets or sets an array of InstanceData structs that define the world transformations (positions, scales, rotations) and colors or instanced geometry objects.
            After each change of InstancesData user must call Update method.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.InstancedModelGroupVisual3D.Model3DGroup">
            <summary>
            Gets Model3DGroup that is used by this InstancedModelGroupVisual3D
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.InstancedModelGroupVisual3D.IsWpfHitTestVisible">
            <summary>
            Gets or sets a Boolean that specifies if WPF hit testing can be done on the instanced 3D objects when rendered with DirectX hardware acceleration.
            When IsWpfHitTestVisible is true then InstancedModelGroupVisual3D always creates WPF's Model3D objects that are used by WPF's hit testing.
            This can increase initialization time. Default value is false.
            When showing instanced objects, it is recommended to use DXEngine hit testing that support fast hit testing on instanced objects and leave this property on false.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.InstancedModelGroupVisual3D.UseDynamicInstanceBuffer">
            <summary>
            Gets or sets a Boolean that specifies if dynamic instance buffer is created instead of immutable instance buffer.
            Dynamic instance buffer has better performance when instance data is changed often.
            On the other side the immutable buffer is better when the instance data is not changed or changed only a few times.
            Default value is false - use immutable buffer.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.InstancedModelGroupVisual3D.#ctor(System.Windows.Media.Media3D.Model3DGroup)">
            <summary>
            Constructor
            </summary>
            <param name="model3DGroup">Model3DGroup</param>
        </member>
        <member name="M:Ab3d.Visuals.InstancedModelGroupVisual3D.Update">
            <summary>
            Update method updates the data for all instances.
            It must be called after InstancesData are changed.
            When only some of the instances were changed, it is highly recommended to call <see cref="M:Ab3d.Visuals.InstancedModelGroupVisual3D.Update(System.Int32,System.Int32,System.Boolean)"/> and pass startIndex and count as parameters.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.InstancedModelGroupVisual3D.Update(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Update method updates instance data specified with startIndex, count parameters and updateBounds.
            This method can be called after some instance transformations or colors were changed.
            </summary>
            <param name="startIndex">index of the first instance that was changed and need to be updated</param>
            <param name="count">number of instances that were changed and need to be updated</param>
            <param name="updateBounds">when true, the bounding box of the InstancedModelGroupVisual3D will be updated (this can take some time but is needed when this object's bounds change the bounds of the whole scene)</param>
        </member>
        <member name="M:Ab3d.Visuals.InstancedModelGroupVisual3D.UpdateMaterial">
            <summary>
            UpdateMaterial updates the used specular material. It must be called after the SpecularMaterial is changed.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.InstancedModelGroupVisual3D.OnVisualParentChanged(System.Windows.DependencyObject)">
            <summary>
            OnVisualParentChanged
            </summary>
            <param name="oldParent">DependencyObject</param>
        </member>
        <member name="M:Ab3d.Visuals.InstancedModelGroupVisual3D.GetBounds">
            <summary>
            Returns a Rect3D that specifies the bounding box of the 3D objects shown with this Visual3D.
            </summary>
            <returns>Rect3D that specifies the bounding box of the 3D objects shown with this Visual3D</returns>
        </member>
        <member name="M:Ab3d.Visuals.InstancedModelGroupVisual3D.OnIsVisibleChanged(System.Boolean)">
            <summary>
            OnIsVisibleChanged is called when the IsVisible property is changed
            </summary>
            <param name="newIsActuallyVisible">newIsActuallyVisible as bool</param>
        </member>
        <member name="M:Ab3d.Visuals.InstancedModelGroupVisual3D.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Ab3d.Visuals.PixelsVisual3D">
            <summary>
            PixelsVisual3D is a Visual3D that can show many pixels with specified color and size and at the specified 3D positions.
            The size is specified in screen coordinates.
            </summary>
            <remarks>
            <para>
            <b>PixelsVisual3D</b> is a Visual3D that can show many pixels with specified color and size and at the specified 3D positions.
            </para>
            <para>
            Positions of the pixels is specified with the <see cref="P:Ab3d.Visuals.PixelsVisual3D.Positions"/> array or Vector3 elements.
            When you change individual positions, you need to call <see cref="M:Ab3d.Visuals.PixelsVisual3D.UpdatePositions"/> method for the changes to take effect.
            </para>
            <para>
            When <see cref="P:Ab3d.Visuals.PixelsVisual3D.PixelColors"/> array is set to an array of Color4 elements, then the color of each pixel is defined by the values in the array.
            In this case <see cref="P:Ab3d.Visuals.PixelsVisual3D.PixelColor"/> property defines a color mask (color of each pixel is multiplied with the color specified in the PixelColor property).
            When using PixelColors array, it is also possible to hide pixels with setting the alpha color value to 0.
            When <see cref="P:Ab3d.Visuals.PixelsVisual3D.PixelColors"/> array is not set (is null), then all pixels are colored with the color specified with the <see cref="P:Ab3d.Visuals.PixelsVisual3D.PixelColor"/> property.
            When colors in the PixelColors array are changed, you need to call <see cref="M:Ab3d.Visuals.PixelsVisual3D.UpdatePixelColors"/> method for the changes to take effect.
            </para>
            <para>
            When <see cref="P:Ab3d.Visuals.PixelsVisual3D.PixelSizes"/> array is set to an array of float values, then the size of each pixel is defined by the values in the array.
            In this case the <see cref="P:Ab3d.Visuals.PixelsVisual3D.PixelSize"/> value is multiplied with each size defined in the PixelSizes array (set PixelSize to 1 to use the values specified in this array).
            When PixelSizes array is null, the size of all the pixels is set by the value defined by the <see cref="P:Ab3d.Visuals.PixelsVisual3D.PixelSize"/> property.
            When individual values of PixelSizes are changed, you need to call <see cref="M:Ab3d.Visuals.PixelsVisual3D.UpdatePixelSizes"/> method for the changes to take effect.
            </para>
            <para>
            When you know the area in which the pixels are rendered (bounding box of positions), it is recommended to set the <see cref="P:Ab3d.Visuals.PixelsVisual3D.PositionsBounds"/> property.
            This way the bounds will not be calculated by the PixelsVisual3D.
            </para>
            <para>
            IMPORTANT:<br/>
            When an instance of PixelsVisual3D is not used any more, user needs to call <see cref="M:Ab3d.Visuals.PixelsVisual3D.Dispose(System.Boolean)"/> method to free DirectX resources that are created with this class.
            </para>
            </remarks>
        </member>
        <member name="P:Ab3d.Visuals.PixelsVisual3D.Positions">
            <summary>
            Gets or sets an array of Vector3 that represents the 3D positions of pixels.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.PixelsVisual3D.PixelColors">
            <summary>
            Gets or sets the Color4 array that specifies the colors for each pixel. When color's alpha is 0, the pixel is not rendered.
            When null, the color of all the pixels is set by the color defined by the <see cref="P:Ab3d.Visuals.PixelsVisual3D.PixelColor"/> property.
            When PixelColors array is set, the <see cref="P:Ab3d.Visuals.PixelsVisual3D.PixelColor"/> is used as a mask that is multiplied with each color specified in this array.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.PixelsVisual3D.PixelSizes">
            <summary>
            Gets or sets a float array that specifies the sizes for each pixel. When size is less of equal to 0, the pixel is not rendered.
            When PixelSizes array is set, the <see cref="P:Ab3d.Visuals.PixelsVisual3D.PixelSize"/> value is multiplied with each size defined in the array (set PixelSize to 1 to use the values specified in this array).
            When null, the size of all the pixels is set by the value defined by the <see cref="P:Ab3d.Visuals.PixelsVisual3D.PixelSize"/> property.
            When individual values of PixelSizes are changed, you need to call <see cref="M:Ab3d.Visuals.PixelsVisual3D.UpdatePixelSizes"/> method for the changes to take effect.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.PixelsVisual3D.PositionsBounds">
            <summary>
            Gets or sets Bounds of the positions. 
            This value can be set before setting the <see cref="P:Ab3d.Visuals.PixelsVisual3D.Positions"/> to manually set the Bounds. 
            This prevents automatic bounds calculations with checking all positions.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.PixelsVisual3D.PixelSize">
            <summary>
            Gets or sets the width and height of the pixel in screen space units.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.PixelsVisual3D.PixelSizeProperty">
            <summary>
            PixelSizeProperty
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.PixelsVisual3D.OnPixelSizePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnPixelSizePropertyPropertyChanged
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="P:Ab3d.Visuals.PixelsVisual3D.PixelColor">
            <summary>
            Gets or sets the Color4 of pixels. Default value is White.
            When <see cref="P:Ab3d.Visuals.PixelsVisual3D.PixelColors"/> array is set, the value of this property is used as a mask that is multiplied with each color defined in the array.
            </summary>
        </member>
        <member name="F:Ab3d.Visuals.PixelsVisual3D.PixelColorProperty">
            <summary>
            PixelSizeProperty
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.PixelsVisual3D.OnPixelColorPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OnPixelColorPropertyChanged
            </summary>
            <param name="obj">DependencyObject</param>
            <param name="args">DependencyPropertyChangedEventArgs</param>
        </member>
        <member name="P:Ab3d.Visuals.PixelsVisual3D.CreateDynamicVertexBuffer">
            <summary>
            Gets or sets a Boolean that specifies if the vertex buffer that is used to sent pixels data to graphics card is created as a dynamic buffer.
            This can provide slightly better performance for cases when pixels data is updated very often. Default value is false.
            Setting this value will change the same properties in the used SimpleMesh and PixelMaterial.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.PixelsVisual3D.#ctor">
            <summary>
            PixelsVisual3D constructor with no positions and default pixel color (White) and pixel size (1.0f)
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.PixelsVisual3D.#ctor(SharpDX.Vector3[])">
            <summary>
            PixelsVisual3D constructor with specified positions and default pixel color (White) and pixel size (1.0f)
            </summary>
            <param name="positions">positions defined in an array of Vector3</param>
        </member>
        <member name="M:Ab3d.Visuals.PixelsVisual3D.#ctor(SharpDX.Vector3[],System.Windows.Media.Color,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="positions">positions defined in an array of Vector3</param>
            <param name="pixelColor">color of pixels or color mask when PixelColors array is used</param>
            <param name="pixelSize">size of pixels</param>
        </member>
        <member name="M:Ab3d.Visuals.PixelsVisual3D.UpdatePositions">
            <summary>
            UpdatePositions updates the DirectX vertex buffer from the existing Positions array.
            This method must be called when the values defined in the Positions array are changed.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.PixelsVisual3D.UpdatePixelColors">
            <summary>
            UpdatePixelColors method updates the DirectX vertex buffer from the current values of <see cref="P:Ab3d.Visuals.PixelsVisual3D.PixelColors"/>.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.PixelsVisual3D.UpdatePixelSizes">
            <summary>
            UpdatePixelSizes method updates the DirectX vertex buffer from the current values of <see cref="P:Ab3d.Visuals.PixelsVisual3D.PixelSize"/>.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.PixelsVisual3D.GetBounds">
            <summary>
            Returns a Rect3D that specifies the bounding box of the 3D objects shown with this Visual3D.
            </summary>
            <returns>Rect3D that specifies the bounding box of the 3D objects shown with this Visual3D</returns>
        </member>
        <member name="M:Ab3d.Visuals.PixelsVisual3D.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">disposing</param>
        </member>
        <member name="T:Ab3d.Visuals.SceneNodeVisual3D">
            <summary>
            SceneNodeVisual3D is a ModelVisual3D object that can show a DXEngine's SceneNode inside WPF 3D objects.
            </summary>
            <remarks>
            <para>
            SceneNodeVisual3D is a ModelVisual3D object that can show a DXEngine's SceneNode inside WPF 3D objects.
            </para>
            <para>
            When SceneNodeVisual3D is rendered inside DXEngine, the SceneNode and its children are rendered.
            The WPF objects that are set to Content property are not shown (the Content is shown only when SceneNodeVisual3D is rendered with WPF rendering).
            </para>
            <para>
            SceneNodeVisual3D can have Transform property set to any WPF transformation. This can be used to position, scale or rotate the 3D objects defined in the SceneNode.
            </para>
            <para>
            SceneNodeVisual3D also provides a protected virtual Dispose method that can be override by derived class to dispose its resources.
            The Dispose method is called from the SceneNode's Disposing event handler.
            </para>
            </remarks>
            <example>
            <para>
            The following example shows how to use SceneNodeVisual3D to show <see cref="T:Ab3d.DirectX.Models.WpfOptimizedModel3DGroupNode"/> that is created from a Model3DGroup.
            This way all the memory used for WPF 3D objects can be freed.
            </para>
            <code>
            var wpfOptimizedModel3DGroupNode = new WpfOptimizedModel3DGroupNode(model3DGroup);
            wpfOptimizedModel3DGroupNode.AutomaticallyClearWpfObjectsAfterInitialization = true;
            
            var sceneNodeVisual3D = new SceneNodeVisual3D(wpfOptimizedModel3DGroupNode);
            sceneNodeVisual3D.Transform = new TranslateTransform3D(100, 0, 0);
            
            MainViewport.Children.Add(sceneNodeVisual3D);
            </code>
            </example>
        </member>
        <member name="P:Ab3d.Visuals.SceneNodeVisual3D.IsWpf3DVisible">
            <summary>
            Gets a Boolean that specifies if this BaseDXVisual3D can show its content when rendered with WPF 3D objects.
            </summary>
        </member>
        <member name="P:Ab3d.Visuals.SceneNodeVisual3D.SceneNode">
            <summary>
            Gets the SceneNode that is shown with this SceneNodeVisual3D. The SceneNode is set in the constructor and cannot be changed.
            </summary>
        </member>
        <member name="M:Ab3d.Visuals.SceneNodeVisual3D.#ctor(Ab3d.DirectX.SceneNode)">
            <summary>
            Constructor
            </summary>
            <param name="sceneNode">SceneNode that will be shown with this SceneNodeVisual3D (must not be null).</param>
        </member>
        <member name="M:Ab3d.Visuals.SceneNodeVisual3D.GetBounds">
            <summary>
            Returns a Rect3D that specifies the bounding box of the 3D objects shown with this Visual3D.
            </summary>
            <returns>Rect3D that specifies the bounding box of the 3D objects shown with this Visual3D</returns>
        </member>
        <member name="M:Ab3d.Visuals.SceneNodeVisual3D.OnIsVisibleChanged(System.Boolean)">
            <summary>
            OnIsVisibleChanged is called when the IsVisible property is changed
            </summary>
            <param name="newIsActuallyVisible">newIsActuallyVisible as bool</param>
        </member>
        <member name="M:Ab3d.Visuals.SceneNodeVisual3D.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
    </members>
</doc>
